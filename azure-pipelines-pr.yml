pool:
    vmImage: 'Ubuntu 16.04'

pr:
- master

variables:
    buildConfiguration: 'Release'

steps:
 - task: NuGetCommand@2
   inputs:
     command: custom
     arguments: install GitVersion.CommandLine -Version 4.0.0 -OutputDirectory $(Build.BinariesDirectory)/tools -ExcludeVersion

 - script: |
        chmod -R 755 $(Build.BinariesDirectory)/tools/GitVersion.CommandLine/tools/
        mkdir $(System.DefaultWorkingDirectory)/gitversion && touch $(System.DefaultWorkingDirectory)/gitversion/gitversionvariables.json
        mono $(Build.BinariesDirectory)/tools/GitVersion.CommandLine/tools/GitVersion.exe /output json /nofetch > $(System.DefaultWorkingDirectory)/gitversion/gitversionvariables.json
        mono $(Build.BinariesDirectory)/tools/GitVersion.CommandLine/tools/GitVersion.exe /output buildserver /nofetch
 
 - task: NodeTool@0
   inputs:
     versionSpec: '12.x'

 - script: npm install
   displayName: npm install
   workingDirectory: src/orbital-designer

 - script: npm run build -- --prod
   displayName: npm build
   workingDirectory: src/orbital-designer

 - task: CopyFiles@2
   displayName: Move Builds to Artifact Directory
   inputs:
     SourceFolder: '$(System.DefaultWorkingDirectory)/src/orbital-designer/dist'
     Contents: |
        *
        orbital-designer/**
     TargetFolder: '$(Build.ArtifactStagingDirectory)'


 - task: DotNetCoreCLI@2
   displayName: Publishing Mock Server
   inputs:
     command: publish
     arguments: '--configuration $(buildConfiguration) --output $(System.DefaultWorkingDirectory)/mock/build'
     workingDirectory: src/Orbital.Mock.Server/
     publishWebProjects: false
     modifyOutputPath: true
     zipAfterPublish: false

 - task: DotNetCoreCLI@2
   displayName: Publishing Mock Server Windows
   inputs:
     command: publish
     arguments: '--configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)/win --runtime win-x64'
     workingDirectory: src/Orbital.Mock.Server/
     publishWebProjects: false
     modifyOutputPath: true
     zipAfterPublish: yes

 - task: DotNetCoreCLI@2
   displayName: Publishing Mock Server Linux
   inputs:
     command: publish
     arguments: '--configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)/linux --runtime linux-x64'
     workingDirectory: src/Orbital.Mock.Server/
     publishWebProjects: false
     modifyOutputPath: true
     zipAfterPublish: yes
  
 - task: DotNetCoreCLI@2
   displayName: Publishing Mock Server MacOS
   inputs:
     command: publish
     arguments: '--configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)/mac --runtime osx-x64'
     workingDirectory: src/Orbital.Mock.Server/
     publishWebProjects: false
     modifyOutputPath: true
     zipAfterPublish: yes



 - task: Docker@2
   displayName: 'buildAndPush Orbital'
   inputs:
     command: 'buildAndPush'
     containerRegistry: 'OrbitalRegistryDan'
     repository: 'orbitalmock'
     dockerfile: '$(System.DefaultWorkingDirectory)/mock/build/Dockerfile'
     tags: |
      $(GitVersion.SemVer)
      
 - task: Docker@2
   displayName: 'buildAndPush Orbital Designer'
   inputs:
    command: 'buildAndPush'
    containerRegistry: 'OrbitalRegistryDan'
    repository: 'orbitaldesigner'
    buildContext: '$(System.DefaultWorkingDirectory)'
    dockerfile: '$(System.DefaultWorkingDirectory)/docker/designer/Dockerfile'
    tags: |
        $(GitVersion.SemVer)

 - task: CopyFiles@2
   displayName: Move GitVersion Variables to Artifact Directory
   inputs:
     SourceFolder: '$(System.DefaultWorkingDirectory)/gitversion'
     Contents: |
        *
     TargetFolder: '$(Build.ArtifactStagingDirectory)'

 - task: PublishBuildArtifacts@1
   displayName: Publish Build Artifiacts