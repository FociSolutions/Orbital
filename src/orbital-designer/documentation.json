{
    "pipes": [
        {
            "name": "GetEndpointScenariosPipe",
            "id": "pipe-GetEndpointScenariosPipe-9fdd473e9fbfb10f3b663fc4e9e689fe",
            "file": "src/app/pipes/get-endpoint-scenarios/get-endpoint-scenarios.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "scenarios",
                            "type": "Scenario[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "[]"
                        },
                        {
                            "name": "endpoint",
                            "type": "Endpoint",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Scenario[]",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nFilters a list of scenarios, leaving only the scenarios whose path and verb match\nthe path and verb of the endpoint argument\n",
                    "description": "<p>Filters a list of scenarios, leaving only the scenarios whose path and verb match\nthe path and verb of the endpoint argument</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 451,
                                "end": 460,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "scenarios"
                            },
                            "type": "Scenario[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "[]",
                            "tagName": {
                                "pos": 445,
                                "end": 450,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>The list of scenarios to filter</p>\n"
                        },
                        {
                            "name": {
                                "pos": 505,
                                "end": 513,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "endpoint"
                            },
                            "type": "Endpoint",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 499,
                                "end": 504,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>The endpoint to filter the scenarios against</p>\n"
                        }
                    ]
                }
            ],
            "ngname": "getEndpointScenarios",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\nimport { Scenario } from '../../models/mock-definition/scenario/scenario.model';\nimport { Endpoint } from '../../models/endpoint.model';\n\n@Pipe({\n  name: 'getEndpointScenarios'\n})\nexport class GetEndpointScenariosPipe implements PipeTransform {\n  /**\n   * Filters a list of scenarios, leaving only the scenarios whose path and verb match\n   * the path and verb of the endpoint argument\n   * @param scenarios The list of scenarios to filter\n   * @param endpoint The endpoint to filter the scenarios against\n   */\n  transform(scenarios: Scenario[] = [], endpoint: Endpoint): Scenario[] {\n    if (!endpoint) {\n      return scenarios;\n    }\n    return scenarios.filter(\n      scenario =>\n        scenario.path === endpoint.path &&\n        scenario.verb.toString().toUpperCase() ===\n          endpoint.verb.toString().toUpperCase()\n    );\n  }\n}\n"
        },
        {
            "name": "GetRuleTypeStringPipe",
            "id": "pipe-GetRuleTypeStringPipe-f79e1d5cc4d5e257b29a5da281e47a5f",
            "file": "src/app/pipes/get-rule-type-string/get-rule-type-string.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "ruleType",
                            "type": "RuleType",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nTakes in a ruleType and outputs the corresponding ruleType as a nicely formatted string\n",
                    "description": "<p>Takes in a ruleType and outputs the corresponding ruleType as a nicely formatted string</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 344,
                                "end": 352,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "ruleType"
                            },
                            "type": "RuleType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 338,
                                "end": 343,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>The ruleType to be piped in</p>\n"
                        }
                    ]
                }
            ],
            "ngname": "getRuleTypeString",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\nimport { RuleType } from 'src/app/models/mock-definition/scenario/rule.type';\n\n@Pipe({\n  name: 'getRuleTypeString'\n})\nexport class GetRuleTypeStringPipe implements PipeTransform {\n  /**\n   * Takes in a ruleType and outputs the corresponding ruleType as a nicely formatted string\n   * @param ruleType The ruleType to be piped in\n   */\n  transform(ruleType: RuleType): string {\n    switch (+ruleType) {\n      case 0:\n        return 'None';\n      case 1:\n        return 'Regex';\n      case 2:\n        return 'Text: Starts With';\n      case 3:\n        return 'Text: Ends With';\n      case 4:\n        return 'Text: Contains';\n      case 5:\n        return 'Text: Equals';\n      case 6:\n        return 'JSON: Path';\n      case 7:\n        return 'JSON: Equality';\n      case 8:\n        return 'JSON: Contains';\n      case 9:\n        return 'JSON: Schema';\n      default:\n        return 'Invalid Rule';\n    }\n  }\n}\n"
        },
        {
            "name": "GetVerbColorPipe",
            "id": "pipe-GetVerbColorPipe-7fc139db3f452544ee5667930548ff16",
            "file": "src/app/pipes/get-verb-color/get-verb-color.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [
                {
                    "name": "blue",
                    "defaultValue": "'rgba(0, 163, 255, 0.25)'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        143
                    ]
                },
                {
                    "name": "green",
                    "defaultValue": "'rgba(30, 255, 160, 0.25)'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        143
                    ]
                },
                {
                    "name": "notsonavyblue",
                    "defaultValue": "'rgba(30,144,255 ,1)'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        143
                    ]
                },
                {
                    "name": "orange",
                    "defaultValue": "'rgba(255, 165, 0, 0.25)'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        143
                    ]
                },
                {
                    "name": "purple",
                    "defaultValue": "'rgba(82, 0, 255, 0.25)'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        143
                    ]
                },
                {
                    "name": "red",
                    "defaultValue": "'rgba(255, 0, 0, 0.25)'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        143
                    ]
                },
                {
                    "name": "turquoise",
                    "defaultValue": "'rgba(64,224,208 ,1 )'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        143
                    ]
                },
                {
                    "name": "yellow",
                    "defaultValue": "'rgba(250, 255, 0, 0.25)'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        143
                    ]
                }
            ],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "verb",
                            "type": "VerbType",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "prefix",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "''"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nReturns a string containing the appropriate bootstrap color\nclass for the verb type. If a prefix string is passed into the parameters\nthen the pipe will prefix the color string with the prefix string.\ncolor string with the passed in string\n",
                    "description": "<p>Returns a string containing the appropriate bootstrap color\nclass for the verb type. If a prefix string is passed into the parameters\nthen the pipe will prefix the color string with the prefix string.\ncolor string with the passed in string</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 866,
                                "end": 870,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "verb"
                            },
                            "type": "VerbType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 860,
                                "end": 865,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>The verb whose color we are trying to get</p>\n"
                        },
                        {
                            "name": {
                                "pos": 925,
                                "end": 931,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "prefix"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "''",
                            "tagName": {
                                "pos": 919,
                                "end": 924,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>An optional argument that prefixes the verbscdf\ncolor string with the passed in string</p>\n"
                        }
                    ]
                }
            ],
            "ngname": "getVerbColor",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\nimport { VerbType } from '../../models/verb.type';\n\n@Pipe({\n  name: 'getVerbColor'\n})\nexport class GetVerbColorPipe implements PipeTransform {\n  readonly blue: string = 'rgba(0, 163, 255, 0.25)';\n  readonly green: string = 'rgba(30, 255, 160, 0.25)';\n  readonly red: string = 'rgba(255, 0, 0, 0.25)';\n  readonly yellow: string = 'rgba(250, 255, 0, 0.25)';\n  readonly orange: string = 'rgba(255, 165, 0, 0.25)';\n  readonly purple: string = 'rgba(82, 0, 255, 0.25)';\n  readonly turquoise: string = 'rgba(64,224,208 ,1 )';\n  readonly notsonavyblue: string = 'rgba(30,144,255 ,1)';\n\n  /**\n   * Returns a string containing the appropriate bootstrap color\n   * class for the verb type. If a prefix string is passed into the parameters\n   * then the pipe will prefix the color string with the prefix string.\n   * @param verb The verb whose color we are trying to get\n   * @param prefix An optional argument that prefixes the verbscdf\n   * color string with the passed in string\n   */\n  transform(verb: VerbType, prefix: string = ''): string {\n    switch (verb) {\n      case VerbType.DELETE:\n        return prefix + this.red;\n      case VerbType.GET:\n        return prefix + this.blue;\n      case VerbType.POST:\n        return prefix + this.green;\n      case VerbType.PUT:\n        return prefix + this.yellow;\n      case VerbType.HEAD:\n        return prefix + this.purple;\n      case VerbType.OPTIONS:\n        return prefix + this.notsonavyblue;\n      case VerbType.PATCH:\n        return prefix + this.turquoise;\n    }\n  }\n}\n"
        },
        {
            "name": "GetVerbStringPipe",
            "id": "pipe-GetVerbStringPipe-ac222bbf164b34399c8cbffa94fccad1",
            "file": "src/app/pipes/get-verb-string/get-verb-string.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "verb",
                            "type": "VerbType",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nTakes in a verbTypes and outputs the corresponding verb as a string\n",
                    "description": "<p>Takes in a verbTypes and outputs the corresponding verb as a string</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 291,
                                "end": 295,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "verb"
                            },
                            "type": "VerbType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 285,
                                "end": 290,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>The verbType to be piped in</p>\n"
                        }
                    ]
                }
            ],
            "ngname": "getVerbString",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\nimport { VerbType } from 'src/app/models/verb.type';\n\n@Pipe({\n  name: 'getVerbString'\n})\nexport class GetVerbStringPipe implements PipeTransform {\n  /**\n   * Takes in a verbTypes and outputs the corresponding verb as a string\n   * @param verb The verbType to be piped in\n   */\n  transform(verb: VerbType): string {\n    switch (verb) {\n      case VerbType.DELETE:\n        return 'DELETE';\n      case VerbType.GET:\n        return 'GET';\n      case VerbType.POST:\n        return 'POST';\n      case VerbType.PUT:\n        return 'PUT';\n      case VerbType.HEAD:\n        return 'HEAD';\n      case VerbType.OPTIONS:\n        return 'OPTIONS';\n      case VerbType.PATCH:\n        return 'PATCH';\n    }\n  }\n}\n"
        }
    ],
    "interfaces": [
        {
            "name": "BodyRule",
            "id": "interface-BodyRule-1568e2f1f67c647ac4ab6014d67c4380",
            "file": "src/app/models/mock-definition/scenario/body-rule.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { RuleType } from './rule.type';\n\n/**\n * Model representation of body matching rule\n */\nexport interface BodyRule {\n  type: RuleType;\n  rule: object;\n}\n\nexport const defaultBodyRule: BodyRule = {\n  type: RuleType.NONE,\n  rule: {}\n};\n",
            "properties": [
                {
                    "name": "rule",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "RuleType",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 164,
            "description": "<p>Model representation of body matching rule</p>\n",
            "rawdescription": "\n\nModel representation of body matching rule\n",
            "methods": []
        },
        {
            "name": "Endpoint",
            "id": "interface-Endpoint-a2f37eed036f9468a5fdf063ba691e43",
            "file": "src/app/models/endpoint.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { OpenAPIV2 } from 'openapi-types';\nimport { VerbType } from './verb.type';\n\n/**\n * Model representation of an endpoint\n */\nexport interface Endpoint {\n  path: string;\n  verb: VerbType;\n  spec: OpenAPIV2.OperationObject;\n}\n",
            "properties": [
                {
                    "name": "path",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "spec",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "OpenAPIV2.OperationObject",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "verb",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "VerbType",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "indexSignatures": [],
            "kind": 164,
            "description": "<p>Model representation of an endpoint</p>\n",
            "rawdescription": "\n\nModel representation of an endpoint\n",
            "methods": []
        },
        {
            "name": "KeyValuePairRule",
            "id": "interface-KeyValuePairRule-73bc020cd0684cc27006978ce26194a0",
            "file": "src/app/models/mock-definition/scenario/key-value-pair-rule.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { RuleType } from './rule.type';\n\n/**\n * Model representation of KeyValue pair matching rule\n */\nexport interface KeyValuePairRule {\n  type: RuleType;\n  rule: Record<string, string>;\n}\n",
            "properties": [
                {
                    "name": "rule",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Record<string | string>",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "RuleType",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 164,
            "description": "<p>Model representation of KeyValue pair matching rule</p>\n",
            "rawdescription": "\n\nModel representation of KeyValue pair matching rule\n",
            "methods": []
        },
        {
            "name": "Metadata",
            "id": "interface-Metadata-7a31e3a3595f05948d460f7681dbfe8e",
            "file": "src/app/models/mock-definition/metadata.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface Metadata {\n  title: string;\n  description: string;\n}\n\nexport const defaultMetadata: Metadata = {\n  title: '',\n  description: ''\n};\n",
            "properties": [
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 164,
            "description": "<p>Model representation of mock definition metadata</p>\n",
            "rawdescription": "\n\nModel representation of mock definition metadata\n",
            "methods": []
        },
        {
            "name": "MockDefinition",
            "id": "interface-MockDefinition-9b889915dd250c1d6213666b4c578820",
            "file": "src/app/models/mock-definition/mock-definition.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Metadata, defaultMetadata } from './metadata.model';\nimport { Scenario, emptyScenario } from './scenario/scenario.model';\nimport { OpenAPIV2 } from 'openapi-types';\n\n/**\n * Model representation of mock definition\n */\nexport interface MockDefinition {\n  metadata: Metadata;\n  host?: string;\n  basePath?: string;\n  scenarios: Scenario[];\n  openApi: OpenAPIV2.Document;\n}\n\nexport const defaultMockDefinition: MockDefinition = {\n  metadata: defaultMetadata,\n  host: '',\n  basePath: '',\n  scenarios: [emptyScenario],\n  openApi: {} as OpenAPIV2.Document\n};\n",
            "properties": [
                {
                    "name": "basePath",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "host",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "metadata",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Metadata",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "openApi",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "OpenAPIV2.Document",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "scenarios",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Scenario[]",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "indexSignatures": [],
            "kind": 164,
            "description": "<p>Model representation of mock definition</p>\n",
            "rawdescription": "\n\nModel representation of mock definition\n",
            "methods": []
        },
        {
            "name": "Policy",
            "id": "interface-Policy-9e6fa4f44c624ba842fd39330b5441dd",
            "file": "src/app/models/mock-definition/scenario/policy.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { PolicyType } from './policy.type';\n\nexport interface Policy {\n  type: PolicyType;\n  attributes: Record<string, string>;\n}\n\nexport const defaultPolicy: Policy = {\n  type: PolicyType.NONE,\n  attributes: {}\n};\n",
            "properties": [
                {
                    "name": "attributes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Record<string | string>",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PolicyType",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 164,
            "methods": []
        },
        {
            "name": "RequestMatchRule",
            "id": "interface-RequestMatchRule-cd77cc74e0e6fb56e918cde94c379954",
            "file": "src/app/models/mock-definition/scenario/request-match-rule.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { BodyRule } from './body-rule.model';\nimport { KeyValuePairRule } from './key-value-pair-rule.model';\n\n/**\n * Model representation of a request matching rule\n */\nexport interface RequestMatchRule {\n  headerRules: KeyValuePairRule[];\n  queryRules: KeyValuePairRule[];\n  bodyRules: BodyRule[];\n  urlRules: KeyValuePairRule[];\n}\n\nexport const defaultRquestMatchRule: RequestMatchRule = {\n  headerRules: [],\n  queryRules: [],\n  bodyRules: [],\n  urlRules: []\n};\n",
            "properties": [
                {
                    "name": "bodyRules",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BodyRule[]",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "headerRules",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "KeyValuePairRule[]",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "queryRules",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "KeyValuePairRule[]",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "urlRules",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "KeyValuePairRule[]",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "indexSignatures": [],
            "kind": 164,
            "description": "<p>Model representation of a request matching rule</p>\n",
            "rawdescription": "\n\nModel representation of a request matching rule\n",
            "methods": []
        },
        {
            "name": "Response",
            "id": "interface-Response-561e698fe64d3278b4c391dd420e8135",
            "file": "src/app/models/mock-definition/scenario/response.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { ResponseType } from './response.type';\n\n/**\n * Model representation of a mock response\n */\nexport interface Response {\n  headers: Record<string, string>;\n  body: string;\n  status: number;\n  type: ResponseType;\n}\n\nexport const defaultResponse: Response = {\n  headers: {},\n  body: '',\n  status: 200,\n  type: ResponseType.CUSTOM\n};\n",
            "properties": [
                {
                    "name": "body",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "headers",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Record<string | string>",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "status",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ResponseType",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "indexSignatures": [],
            "kind": 164,
            "description": "<p>Model representation of a mock response</p>\n",
            "rawdescription": "\n\nModel representation of a mock response\n",
            "methods": []
        },
        {
            "name": "Scenario",
            "id": "interface-Scenario-89785e3d6898d4d6c9038223a522408c",
            "file": "src/app/models/mock-definition/scenario/scenario.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { RequestMatchRule, defaultRquestMatchRule } from './request-match-rule.model';\nimport { Metadata, defaultMetadata } from '../metadata.model';\nimport { VerbType } from '../../verb.type';\nimport { Response, defaultResponse } from './response.model';\nimport * as uuid from 'uuid';\nimport { Policy } from './policy.model';\n\n/**\n * Model representation of a scenario\n */\nexport interface Scenario {\n  id: string;\n  metadata: Metadata;\n  verb: VerbType;\n  path: string;\n  response: Response;\n  requestMatchRules: RequestMatchRule;\n  policies: Policy[];\n  defaultScenario: boolean;\n}\n\nexport const emptyScenario: Scenario = {\n  id: uuid.v4(),\n  metadata: defaultMetadata,\n  verb: VerbType.GET,\n  path: '',\n  response: defaultResponse,\n  requestMatchRules: defaultRquestMatchRule,\n  policies: [],\n  defaultScenario: false\n};\n",
            "properties": [
                {
                    "name": "defaultScenario",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "metadata",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Metadata",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "path",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "policies",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Policy[]",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "requestMatchRules",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "RequestMatchRule",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "response",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Response",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "verb",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "VerbType",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "indexSignatures": [],
            "kind": 164,
            "description": "<p>Model representation of a scenario</p>\n",
            "rawdescription": "\n\nModel representation of a scenario\n",
            "methods": []
        },
        {
            "name": "State",
            "id": "interface-State-1cc82296aa942dd496d3deaebdcff524",
            "file": "src/app/store/designer-store.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Endpoint } from '../models/endpoint.model';\nimport { Scenario } from '../models/mock-definition/scenario/scenario.model';\nimport { MockDefinition } from '../models/mock-definition/mock-definition.model';\nimport { Store } from 'rxjs-observable-store';\nimport { Injectable } from '@angular/core';\nimport { OpenAPIV2 } from 'openapi-types';\nimport { VerbType } from '../models/verb.type';\nimport { Metadata } from '../models/mock-definition/metadata.model';\nimport { NGXLogger } from 'ngx-logger';\nimport { cloneDeep } from 'lodash';\nimport { recordDelete, recordAdd, recordFirstOrDefault } from '../models/record';\n\nexport interface State {\n  selectedEndpoint: Endpoint;\n  selectedScenario: Scenario;\n  mockDefinition: MockDefinition;\n  mockDefinitions: Record<string, MockDefinition>;\n  endpoints: Endpoint[];\n}\n\nInjectable();\nexport class DesignerStore extends Store<State> {\n  private static readonly mockDefinitionStoreKey = 'orbital_state_mockDefinition';\n  private static readonly mockDefinitionsStoreKey = 'orbital_state_mockDefinitions';\n  private static readonly endpointsStoreKey = 'orbital_state_endpoints';\n  private static readonly selectedEndpointStoreKey = 'orbital_state_selectedEndpoint';\n  private static readonly selectedScenarioStoreKey = 'orbital_state_selectedScenario';\n\n  constructor(private logger: NGXLogger) {\n    super({\n      selectedEndpoint: JSON.parse(localStorage.getItem(DesignerStore.selectedEndpointStoreKey)),\n      selectedScenario: JSON.parse(localStorage.getItem(DesignerStore.selectedScenarioStoreKey)),\n      mockDefinition: JSON.parse(localStorage.getItem(DesignerStore.mockDefinitionStoreKey)),\n      mockDefinitions: JSON.parse(localStorage.getItem(DesignerStore.mockDefinitionsStoreKey)) || {},\n      endpoints: JSON.parse(localStorage.getItem(DesignerStore.endpointsStoreKey)) || []\n    });\n\n    this.state$.subscribe(state => {\n      const clonedDefinition = cloneDeep(state.mockDefinition);\n      const clonedDefinitions = cloneDeep(state.mockDefinitions);\n      localStorage.setItem(DesignerStore.mockDefinitionStoreKey, JSON.stringify(clonedDefinition));\n      localStorage.setItem(DesignerStore.mockDefinitionsStoreKey, JSON.stringify(clonedDefinitions));\n      localStorage.setItem(DesignerStore.endpointsStoreKey, JSON.stringify(state.endpoints));\n      localStorage.setItem(DesignerStore.selectedEndpointStoreKey, JSON.stringify(state.selectedEndpoint));\n      localStorage.setItem(DesignerStore.selectedScenarioStoreKey, JSON.stringify(state.selectedScenario));\n    });\n  }\n\n  /**\n   * This setter updates the Mockdefinitions map with the Mockdefinitions parameter\n   * It creates a new Map for the store in order to trigger any render changes relying on this map.\n   * Also updates the mockDefinition to the first mockDefinition in the list\n   */\n  set mockDefinitions(mockDefinitions: MockDefinition[]) {\n    this.logger.debug('Setting mockDefinitions to ', mockDefinitions);\n    this.setState({\n      ...this.state,\n      mockDefinitions: mockDefinitions.reduce(\n        (previous, current) => recordAdd(previous, current.metadata.title, current),\n        {} as Record<string, MockDefinition>\n      )\n    });\n    this.mockDefinition = mockDefinitions[0];\n  }\n\n  /**\n   * Deletes a mock definition by title\n   */\n  deleteMockDefinitionByTitle(mockTitle: string) {\n    if (this.state.mockDefinitions[mockTitle]) {\n      this.logger.debug('Deleting mock ', mockTitle);\n      this.setState({\n        ...this.state,\n        mockDefinitions: recordDelete(this.state.mockDefinitions, mockTitle)\n      });\n\n      const mockDefKeys = Object.keys(this.state.mockDefinitions);\n      if (!!this.state.mockDefinitions && mockDefKeys.length > 0) {\n        this.logger.debug(\n          'Mock store contains at least one mock; setting first mock to one in store ',\n          this.state.mockDefinitions\n        );\n        this.mockDefinition = this.state.mockDefinitions[mockDefKeys[0]];\n        this.selectedEndpoint = null;\n        this.selectedScenario = null;\n      }\n    }\n  }\n\n  /**\n   * Updates a mock definition by title\n   */\n  private updateMockDefinitionsState(mockDefinition: MockDefinition) {\n    this.logger.debug('Updating mock ', mockDefinition.metadata.title);\n    this.setState({\n      ...this.state,\n      mockDefinitions: recordAdd(this.state.mockDefinitions, mockDefinition.metadata.title, mockDefinition)\n    });\n  }\n\n  /**\n   * Appends a mock definition to the store; if one with the same name already exists\n   * it will be overwritten\n   */\n  appendMockDefinition(mockDefinition: MockDefinition) {\n    this.logger.debug('Appending mock definition', mockDefinition);\n    this.setState({\n      ...this.state,\n      mockDefinitions: recordAdd(this.state.mockDefinitions, mockDefinition.metadata.title, mockDefinition)\n    });\n    this.logger.debug('New state after appending', this.state);\n    this.mockDefinition = recordFirstOrDefault(this.state.mockDefinitions, null);\n\n    if (this.state.mockDefinition) {\n      this.selectedEndpoint = null;\n      this.selectedScenario = null;\n    }\n  }\n\n  /**\n   * This setter updates the selected endpoint for the designer store\n   */\n  set selectedEndpoint(endpoint: Endpoint) {\n    this.logger.debug('setting selectedEndpoint to ', endpoint);\n    this.setState({\n      ...this.state,\n      selectedEndpoint: {\n        ...endpoint\n      }\n    });\n  }\n\n  /**\n   * This setter updates the selected scenario for the designer store\n   */\n  set selectedScenario(scenario: Scenario) {\n    this.logger.debug('setting selectedScenario to ', scenario);\n    this.setState({\n      ...this.state,\n      selectedScenario: {\n        ...scenario\n      }\n    });\n  }\n\n  /**\n   * setEndpoints reads the details of the endpoints specified in the Open Api document\n   * and updates the state of the designer store.\n   * @param doc The parsed Open Api document to extrapolate the endpoints from\n   * @param clearStore Whether to clear the store before clearing the endpoints\n   */\n  setEndpoints(doc: OpenAPIV2.Document, clearStore = true): void {\n    this.logger.debug('Clearing current endpoints: ', clearStore);\n    const pathStrings = Object.keys(doc.paths);\n    let endpoints = [];\n    for (const path of pathStrings) {\n      const pathObject: OpenAPIV2.PathItemObject = doc.paths[path];\n      const newEndpoints = Object.keys(VerbType)\n        .map(verb => ({ verb: VerbType[verb], lowerVerb: verb.toLowerCase() }))\n        .map(({ verb, lowerVerb }) => (!!pathObject[lowerVerb] ? { path, verb, spec: pathObject[lowerVerb] } : null))\n        .filter(endpoint => !!endpoint);\n      endpoints = [...endpoints, ...newEndpoints];\n    }\n    this.logger.debug('Endpoints from openApi document ', endpoints);\n    this.setState({\n      ...this.state,\n      endpoints: clearStore ? [...endpoints] : [...this.state.endpoints, ...endpoints]\n    });\n  }\n\n  /**\n   * Setter method used to updated the MockDefinition in the designer store and the endpoints list\n   * @param mockDefinition The MockDefinition used to update the store\n   */\n  set mockDefinition(mockDefinition: MockDefinition) {\n    const mockDefinitionCopy = { ...mockDefinition };\n    const mockDefinitions = recordAdd(this.state.mockDefinitions, mockDefinition.metadata.title, mockDefinitionCopy);\n    this.logger.debug('Setting mockDefinition to ', mockDefinition);\n    this.setState({\n      ...this.state,\n      mockDefinitions,\n      mockDefinition: mockDefinitionCopy\n    });\n    this.setEndpoints(mockDefinition.openApi);\n  }\n\n  /**\n   * This method updates Metadata for the MockDefinition in the designer store\n   *\n   * @param metadata The metdata to update\n   */\n  updateMetadata(metadata: Metadata): void {\n    this.logger.debug('Setting metadata to ', metadata);\n    this.setState({\n      ...this.state,\n      mockDefinition: {\n        ...this.state.mockDefinition,\n        metadata: {\n          ...metadata\n        }\n      }\n    });\n  }\n\n  /**\n   * Add the provided scenario to current mock definition;\n   * If scenario already exist, update the existing scenario\n   * @param scenario Scenario to add to current mock definition\n   */\n  addOrUpdateScenario(scenario: Scenario) {\n    const currentMock = this.state.mockDefinition;\n    if (currentMock) {\n      let current = currentMock.scenarios.find(s => s.id === scenario.id);\n      if (current) {\n        this.logger.debug(\n          'DesignerStore:AddOrUpdateScenario: Provided scenario already exist in the mock definition',\n          current,\n          scenario\n        );\n        current.metadata.title = scenario.metadata.title;\n        current.metadata.description = scenario.metadata.description;\n\n        current.requestMatchRules.bodyRules = scenario.requestMatchRules.bodyRules;\n        current.requestMatchRules.headerRules = scenario.requestMatchRules.headerRules;\n        current.requestMatchRules.queryRules = scenario.requestMatchRules.queryRules;\n        current.requestMatchRules.urlRules = scenario.requestMatchRules.urlRules;\n        current.defaultScenario = scenario.defaultScenario;\n\n        current.policies = scenario.policies;\n\n        current.response.body = scenario.response.body;\n        current.response.headers = scenario.response.headers;\n        current.response.status = scenario.response.status;\n        current.response.type = scenario.response.type;\n      } else {\n        this.logger.debug(\n          'DesignerStore:AddOrUpdateScenario: Unable to find provided scenario in the mock definition, Append it to the end of the list',\n          scenario\n        );\n        current = scenario;\n        currentMock.scenarios.push(current);\n      }\n      this.updateMockDefinitionsState(currentMock);\n    }\n  }\n\n  /**\n   * This method updates the host,basepath and openAPI spec of the MockDefinition in the designer store\n   * @param host The string representing the host\n   * @param basePath The string representing endpoint path\n   * @param openApi The string representing openSpecAPI file contents\n   */\n  updateApiInformation(host: string, basePath: string, openApi: OpenAPIV2.Document): void {\n    this.logger.debug('Setting host to ', host);\n    this.logger.debug('Setting basePath to ', basePath);\n    this.logger.debug('Setting openApi to ', openApi);\n    this.setState({\n      ...this.state,\n      mockDefinition: {\n        ...this.state.mockDefinition,\n        host,\n        basePath,\n        openApi: { ...openApi }\n      }\n    });\n  }\n\n  /**\n   * This method updates scenario array for the MockDefinition in the designer store\n   * @param scenarios The list of scenarios to update\n   */\n  updateScenarios(scenarios: Scenario[]) {\n    this.logger.debug('Setting scenarios to ', scenarios);\n    this.mockDefinition = {\n      ...this.state.mockDefinition,\n      scenarios: [...scenarios]\n    };\n  }\n\n  deleteScenario(scenarioId: string) {\n    this.mockDefinition = {\n      ...this.state.mockDefinition,\n      scenarios: this.state.mockDefinition.scenarios.filter(s => s.id !== scenarioId)\n    };\n  }\n}\n",
            "properties": [
                {
                    "name": "endpoints",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Endpoint[]",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "mockDefinition",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MockDefinition",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "mockDefinitions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Record<string | MockDefinition>",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "selectedEndpoint",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Endpoint",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "selectedScenario",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Scenario",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "indexSignatures": [],
            "kind": 164,
            "methods": []
        }
    ],
    "injectables": [
        {
            "name": "AddBodyRuleBuilder",
            "id": "injectable-AddBodyRuleBuilder-6e563be29d293a65fd11cfa0d2223019",
            "file": "src/app/components/scenario-editor/add-body-rule-edit/add-body-rule-builder/add-body-rule.builder.ts",
            "properties": [],
            "methods": [
                {
                    "name": "createBodyRuleForm",
                    "args": [
                        {
                            "name": "bodyRule",
                            "type": "BodyRule",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "FormGroup",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCreates a default body rule form group\n",
                    "description": "<p>Creates a default body rule form group</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 990,
                                "end": 998,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "bodyRule"
                            },
                            "type": "BodyRule",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 984,
                                "end": 989,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>The body rule to create the form for</p>\n"
                        }
                    ]
                },
                {
                    "name": "createNewBodyRuleForm",
                    "args": [],
                    "optional": false,
                    "returnType": "FormGroup",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGenerates a form group for a body rule with default values\n",
                    "description": "<p>Generates a form group for a body rule with default values</p>\n"
                },
                {
                    "name": "validateJson",
                    "args": [
                        {
                            "name": "formControl",
                            "type": "FormControl",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "{ invalidJson: boolean; message: string; }",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nChecks if the JSON is valid\n",
                    "description": "<p>Checks if the JSON is valid</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1420,
                                "end": 1431,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "formControl"
                            },
                            "type": "FormControl",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1414,
                                "end": 1419,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>The form control to validate against</p>\n"
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { FormGroup, FormBuilder, FormControl, Validators } from '@angular/forms';\nimport { BodyRule } from '../../../../models/mock-definition/scenario/body-rule.model';\nimport { ValidJsonService } from 'src/app/services/valid-json/valid-json.service';\nimport { RuleType } from 'src/app/models/mock-definition/scenario/rule.type';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AddBodyRuleBuilder {\n  constructor(private formBuilder: FormBuilder, private validJsonService: ValidJsonService) { }\n\n  /**\n   * Generates a form group for a body rule with default values\n   */\n  createNewBodyRuleForm(): FormGroup {\n    // the default body rule's rule is none, but the designer mockup does not have an option for none\n    // specify a different default with the \"ACCEPT ALL\" type instead\n    return this.createBodyRuleForm({ rule: {}, type: RuleType.JSONCONTAINS } as BodyRule);\n  }\n\n  /**\n   * Creates a default body rule form group\n   * @param bodyRule The body rule to create the form for\n   */\n  createBodyRuleForm(bodyRule: BodyRule): FormGroup {\n    return this.formBuilder.group({\n      type: new FormControl(bodyRule.type, Validators.required),\n      rule: new FormControl(\n        this.validJsonService.parseJSONOrDefault(JSON.stringify(bodyRule.rule), ''),\n        this.validateJson.bind(this)\n      )\n    });\n  }\n\n  /**\n   * Checks if the JSON is valid\n   * @param formControl The form control to validate against\n   */\n  validateJson(formControl: FormControl) {\n    return this.validJsonService.isValidJSON(formControl.value)\n      ? null\n      : { invalidJson: true, message: 'The JSON is invalid' };\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "validJsonService",
                        "type": "ValidJsonService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "validJsonService",
                        "type": "ValidJsonService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ExportMockdefinitionService",
            "id": "injectable-ExportMockdefinitionService-b2187afe8197ef59a1bb3a10e2747137",
            "file": "src/app/services/export-mockdefinition/export-mockdefinition.service.ts",
            "properties": [
                {
                    "name": "mockdefinitionCache",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MockDefinition",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "urlCache",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "methods": [
                {
                    "name": "exportMockDefinition",
                    "args": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "mockdefinition",
                            "type": "MockDefinition",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nPOSTs a Mockdefinition to the server\n",
                    "description": "<p>POSTs a Mockdefinition to the server</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1191,
                                "end": 1194,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "url"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1185,
                                "end": 1190,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>The url to post the mockdefinition to</p>\n"
                        },
                        {
                            "name": {
                                "pos": 1245,
                                "end": 1259,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "mockdefinition"
                            },
                            "type": "MockDefinition",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1239,
                                "end": 1244,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>The mockdefinition to be posted</p>\n"
                        }
                    ]
                },
                {
                    "name": "getMockdefinition",
                    "args": [],
                    "optional": false,
                    "returnType": "MockDefinition",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAccess to Mockdefinition for Quick Export\n",
                    "description": "<p>Access to Mockdefinition for Quick Export</p>\n"
                },
                {
                    "name": "getUrl",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAccess to Url for Quick Export\n",
                    "description": "<p>Access to Url for Quick Export</p>\n"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { MockDefinition } from 'src/app/models/mock-definition/mock-definition.model';\nimport { Observable, throwError, forkJoin } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { NGXLogger } from 'ngx-logger';\nimport { cloneDeep } from 'lodash';\nimport { HttpHeaders, HttpClient } from '@angular/common/http';\nimport { DesignerStore } from '../../store/designer-store';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ExportMockdefinitionService {\n  urlCache: string;\n  mockdefinitionCache: MockDefinition;\n  constructor(private store: DesignerStore, private httpClient: HttpClient, private logger: NGXLogger) {\n    // tslint:disable-next-line: no-shadowed-variable\n    this.store.state$.subscribe(state => {\n      if (!!state.mockDefinition) {\n        this.mockdefinitionCache = state.mockDefinition;\n      }\n    });\n  }\n\n  /**\n   * Access to Url for Quick Export\n   */\n  getUrl(): string {\n    return this.urlCache;\n  }\n\n  /**\n   * Access to Mockdefinition for Quick Export\n   */\n  getMockdefinition(): MockDefinition {\n    return this.mockdefinitionCache;\n  }\n\n  /**\n   * POSTs a Mockdefinition to the server\n   * @param url The url to post the mockdefinition to\n   * @param mockdefinition The mockdefinition to be posted\n   */\n  exportMockDefinition(url: string, mockdefinition: MockDefinition): Observable<boolean> {\n    this.logger.debug('Mockdefinition has been exported: ', mockdefinition);\n    const mockDefinitionToExport = cloneDeep(mockdefinition);\n\n    this.logger.debug('Mockdefinition in JSON format: ', mockDefinitionToExport);\n    this.urlCache = url;\n    this.mockdefinitionCache = mockDefinitionToExport;\n    return this.httpClient\n      .post<boolean>(url, mockDefinitionToExport, {\n        headers: new HttpHeaders({\n          'Content-Type': 'application/json; charset=utf-8'\n        })\n      })\n      .pipe(\n        catchError(error => {\n          return throwError(error);\n        })\n      );\n  }\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "DesignerStore",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "httpClient",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "logger",
                        "type": "NGXLogger",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "DesignerStore",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "httpClient",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "logger",
                        "type": "NGXLogger",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "MockDefinitionService",
            "id": "injectable-MockDefinitionService-1b3d91b4c08251661636e96395f803df",
            "file": "src/app/services/mock-definition/mock-definition.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "AddMockDefinitionToStore",
                    "args": [
                        {
                            "name": "mockDefinition",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nParse provided string to mock definition, save it in the store and make it the current mockdefinition in the store.\n",
                    "description": "<p>Parse provided string to mock definition, save it in the store and make it the current mockdefinition in the store.</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1147,
                                "end": 1161,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "mockDefinition"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1141,
                                "end": 1146,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>String representation of mock definition</p>\n"
                        }
                    ]
                },
                {
                    "name": "cloneScenario",
                    "args": [
                        {
                            "name": "mockId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "scenario",
                            "type": "Scenario",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 102,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "mockId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "scenario",
                            "type": "Scenario",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "generateNewScenario",
                    "args": [
                        {
                            "name": "path",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "verb",
                            "type": "VerbType",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Scenario",
                    "typeParameters": [],
                    "line": 190,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGenerates a new Scenario based on the path and verb.\n\n",
                    "description": "<p>Generates a new Scenario based on the path and verb.</p>\n",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "path",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "verb",
                            "type": "VerbType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getDefaultScenarios",
                    "args": [
                        {
                            "name": "endpoints",
                            "type": "OpenAPIV2.PathsObject",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Scenario[]",
                    "typeParameters": [],
                    "line": 149,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGenerate default Scenarios based on the endpoints provided.\n\n",
                    "description": "<p>Generate default Scenarios based on the endpoints provided.</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 5801,
                                "end": 5810,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "endpoints"
                            },
                            "type": "OpenAPIV2.PathsObject",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 5795,
                                "end": 5800,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>list of endpoints from the imported openapi document</p>\n"
                        }
                    ]
                },
                {
                    "name": "validateMockDefinition",
                    "args": [
                        {
                            "name": "mockDefinition",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 64,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nValidates if a string is a valid mockdefinition.\n",
                    "description": "<p>Validates if a string is a valid mockdefinition.</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2563,
                                "end": 2577,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "mockDefinition"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2557,
                                "end": 2562,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>String representation of mock definition</p>\n"
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Scenario } from 'src/app/models/mock-definition/scenario/scenario.model';\nimport { Injectable } from '@angular/core';\nimport { DesignerStore } from 'src/app/store/designer-store';\nimport { NGXLogger } from 'ngx-logger';\nimport { MockDefinition } from 'src/app/models/mock-definition/mock-definition.model';\nimport { Observable } from 'rxjs';\nimport * as uuid from 'uuid';\nimport * as _ from 'lodash';\nimport { KeyValuePairRule } from 'src/app/models/mock-definition/scenario/key-value-pair-rule.model';\nimport { BodyRule } from 'src/app/models/mock-definition/scenario/body-rule.model';\nimport { VerbType } from 'src/app/models/verb.type';\nimport { OpenAPIV2 } from 'openapi-types';\nimport { Policy } from 'src/app/models/mock-definition/scenario/policy.model';\nimport { ResponseType } from 'src/app/models/mock-definition/scenario/response.type';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class MockDefinitionService {\n  constructor(private store: DesignerStore, private logger: NGXLogger) {}\n\n  /**\n   * Parse provided string to mock definition, save it in the store and make it the current mockdefinition in the store.\n   * @param mockDefinition String representation of mock definition\n   */\n  public AddMockDefinitionToStore(mockDefinition: string): Observable<boolean> {\n    return new Observable(observer => {\n      try {\n        let content = JSON.parse(mockDefinition);\n        content = {\n          ...content,\n          scenarios: content.scenarios.map(s => ({\n            ...s,\n            response: {\n              ...s.response,\n              headers: s.response.headers,\n              type: s.response.type || ResponseType.CUSTOM\n            },\n            requestMatchRules: {\n              headerRules: s.requestMatchRules.headerRules || ([] as KeyValuePairRule[]),\n              queryRules: s.requestMatchRules.queryRules || ([] as KeyValuePairRule[]),\n              bodyRules: s.requestMatchRules.bodyRules || ([] as BodyRule[]),\n              urlRules: s.requestMatchRules.urlRules || ([] as KeyValuePairRule[])\n            },\n            policies: s.policies || ([] as Policy[]),\n            defaultScenario: s.defaultScenario || false\n          }))\n        };\n        this.store.appendMockDefinition(content);\n        this.store.mockDefinition = content;\n        this.store.state.mockDefinition = content as MockDefinition;\n        observer.next(true);\n      } catch (error) {\n        observer.error(error);\n      }\n      observer.complete();\n    });\n  }\n\n  /**\n   * Validates if a string is a valid mockdefinition.\n   * @param mockDefinition String representation of mock definition\n   */\n  public validateMockDefinition(mockDefinition: string): Observable<boolean> {\n    return new Observable(observer => {\n      try {\n        let content = JSON.parse(mockDefinition);\n        content = {\n          ...content,\n          scenarios: content.scenarios.map(s => ({\n            ...s,\n            response: {\n              ...s.response,\n              headers: s.response.headers,\n              type: s.response.type || ResponseType.CUSTOM\n            },\n            requestMatchRules: {\n              headerRules: s.requestMatchRules.headerRules,\n              queryRules: s.requestMatchRules.queryRules,\n              bodyRules: s.requestMatchRules.bodyRules,\n              urlRules: s.requestMatchRules.urlRules\n            },\n            policies: {\n              ...s.policies\n            },\n            defaultScenario: s.defaultScenario\n          }))\n        };\n        observer.next(true);\n      } catch (error) {\n        observer.error(error);\n      }\n      observer.complete();\n    });\n  }\n\n  /*\n   * Clones the provided scenario and updates the mock definition in the store with the new copy scenario\n   * @param mockId  string representation of mock definition's id\n   * @param scenario Object representation of the scenario to be cloned\n   */\n  public cloneScenario(mockId: string, scenario: Scenario): Observable<boolean> {\n    return new Observable(observer => {\n      try {\n        if (!scenario || !scenario.id || !scenario.metadata || !scenario.metadata.title) {\n          this.logger.warn('Scenario not cloned because it contains undefined attributes');\n          observer.next(false);\n          return;\n        }\n\n        // copy scenario using deep copy\n        const clonedScenario = _.cloneDeep(scenario);\n        clonedScenario.defaultScenario = false;\n        clonedScenario.id = uuid.v4();\n        clonedScenario.metadata.title = clonedScenario.metadata.title + '-copy';\n        const scenariomockdefinition = this.store.state.mockDefinitions[mockId];\n        this.store.state.mockDefinition = scenariomockdefinition;\n        const originalScenarioIndex = scenariomockdefinition.scenarios.indexOf(scenario);\n\n        // ensure that there are no naming conflicts; if there are, repeat until a name is found\n        if (scenariomockdefinition.scenarios.find(x => x.metadata.title === clonedScenario.metadata.title)) {\n          let copyCounter = 2;\n          while (\n            scenariomockdefinition.scenarios.find(\n              x => x.metadata.title === clonedScenario.metadata.title + ' ' + copyCounter\n            )\n          ) {\n            copyCounter++;\n          }\n\n          clonedScenario.metadata.title = clonedScenario.metadata.title + ' ' + copyCounter;\n        }\n        scenariomockdefinition.scenarios.splice(originalScenarioIndex + 1, 0, clonedScenario);\n        this.store.updateScenarios([...scenariomockdefinition.scenarios]);\n        this.logger.warn('Scenario successfully cloned: ', clonedScenario);\n        observer.next(true);\n      } catch (error) {\n        observer.error(error);\n      }\n      observer.complete();\n    });\n  }\n\n  /**\n   * Generate default Scenarios based on the endpoints provided.\n   *\n   * @param endpoints list of endpoints from the imported openapi document\n   */\n  public getDefaultScenarios(endpoints: OpenAPIV2.PathsObject): Scenario[] {\n    const defaultScenariosPerEndpoint = [];\n    const keyArrayofEndpoints = Object.keys(endpoints);\n    keyArrayofEndpoints.forEach(pathName => {\n      const endpoint = endpoints[pathName];\n      if (endpoint.get) {\n        const newScenarioGet = this.generateNewScenario(pathName, VerbType.GET);\n        defaultScenariosPerEndpoint.push(newScenarioGet);\n      }\n      if (endpoint.put) {\n        const newScenarioPut = this.generateNewScenario(pathName, VerbType.PUT);\n        defaultScenariosPerEndpoint.push(newScenarioPut);\n      }\n      if (endpoint.post) {\n        const newScenarioPost = this.generateNewScenario(pathName, VerbType.POST);\n        defaultScenariosPerEndpoint.push(newScenarioPost);\n      }\n      if (endpoint.delete) {\n        const newScenarioDelete = this.generateNewScenario(pathName, VerbType.DELETE);\n        defaultScenariosPerEndpoint.push(newScenarioDelete);\n      }\n      if (endpoint.head) {\n        const newScenarioHead = this.generateNewScenario(pathName, VerbType.HEAD);\n        defaultScenariosPerEndpoint.push(newScenarioHead);\n      }\n      if (endpoint.patch) {\n        const newScenarioPatch = this.generateNewScenario(pathName, VerbType.PATCH);\n        defaultScenariosPerEndpoint.push(newScenarioPatch);\n      }\n      if (endpoint.options) {\n        const newScenarioOptions = this.generateNewScenario(pathName, VerbType.OPTIONS);\n        defaultScenariosPerEndpoint.push(newScenarioOptions);\n      }\n    });\n    return defaultScenariosPerEndpoint;\n  }\n\n  /**\n   * Generates a new Scenario based on the path and verb.\n   *\n   */\n  private generateNewScenario(path: string, verb: VerbType): Scenario {\n    return {\n      id: uuid.v4(),\n      metadata: {\n        title: 'default title for ' + path,\n        description: 'default description for ' + path\n      },\n      verb,\n      path,\n      response: {\n        headers: {},\n        body: '\"default response for ' + path + '\"',\n        status: 200,\n        type: ResponseType.CUSTOM\n      },\n      requestMatchRules: {\n        headerRules: [],\n        queryRules: [],\n        bodyRules: [],\n        urlRules: []\n      },\n      policies: [],\n      defaultScenario: false\n    } as Scenario;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "DesignerStore",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "logger",
                        "type": "NGXLogger",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 19,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "DesignerStore",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "logger",
                        "type": "NGXLogger",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "NotificationService",
            "id": "injectable-NotificationService-e21a37edbe093c77a945ab78d6253629",
            "file": "src/app/services/notification-service/notification.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "open",
                    "args": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "action",
                            "type": "null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "null"
                        },
                        {
                            "name": "duration",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "3000"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n\n",
                    "description": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 282,
                                "end": 289,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "message"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 276,
                                "end": 281,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>The message to display</p>\n"
                        },
                        {
                            "name": {
                                "pos": 325,
                                "end": 331,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "action"
                            },
                            "type": "null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "null",
                            "tagName": {
                                "pos": 319,
                                "end": 324,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>The name of the button which dismisses the snackbar</p>\n"
                        },
                        {
                            "name": {
                                "pos": 396,
                                "end": 404,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "duration"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "3000",
                            "tagName": {
                                "pos": 390,
                                "end": 395,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>How long in milliseconds to show the snackbar for</p>\n"
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable, NgZone } from '@angular/core';\nimport { MatSnackBar } from '@angular/material';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NotificationService {\n\n  constructor(\n    private snackBar: MatSnackBar,\n    private zone: NgZone\n  ) {}\n\n  /**\n   *\n   * @param message The message to display\n   * @param action The name of the button which dismisses the snackbar\n   * @param duration How long in milliseconds to show the snackbar for\n   */\n  public open(message: string,  action = null, duration = 3000) {\n      this.zone.run(() => {\n          this.snackBar.open(message, action, {duration});\n      });\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "snackBar",
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "zone",
                        "type": "NgZone",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 7,
                "jsdoctags": [
                    {
                        "name": "snackBar",
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "zone",
                        "type": "NgZone",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "OpenApiSpecService",
            "id": "injectable-OpenApiSpecService-2fd87e51e5fa4437923ec2ede2918aca",
            "file": "src/app/services/openapispecservice/open-api-spec.service.ts",
            "properties": [
                {
                    "name": "validatorV2",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "OpenAPISchemaValidator",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "validatorV3",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "OpenAPISchemaValidator",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "methods": [
                {
                    "name": "readOpenApiSpec",
                    "args": [
                        {
                            "name": "openApiString",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<OpenAPIV2.Document>",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nTakes a string as input and returns an observable of type OpenAPIV2.Document\n",
                    "description": "<p>Takes a string as input and returns an observable of type OpenAPIV2.Document</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 645,
                                "end": 658,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "openApiString"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 639,
                                "end": 644,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>a string representing the open api file and turn contents into an OpenApiSpec</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 744,
                                "end": 751,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "returns"
                            },
                            "comment": "<p>observable object of type Open Api Document</p>\n"
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport OpenAPISchemaValidator from 'openapi-schema-validator';\r\nimport { OpenAPIV2 } from 'openapi-types';\r\nimport { Observable } from 'rxjs';\r\nimport * as yaml from 'js-yaml';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class OpenApiSpecService {\r\n  validatorV2: OpenAPISchemaValidator;\r\n  validatorV3: OpenAPISchemaValidator;\r\n  constructor() {\r\n    this.validatorV2 = new OpenAPISchemaValidator({ version: 2 });\r\n    this.validatorV3 = new OpenAPISchemaValidator({ version: 3 });\r\n  }\r\n\r\n  /**\r\n   * Takes a string as input and returns an observable of type OpenAPIV2.Document\r\n   * @param openApiString a string representing the open api file and turn contents into an OpenApiSpec\r\n   * @returns observable object of type Open Api Document\r\n   */\r\n  readOpenApiSpec(openApiString: string): Observable<OpenAPIV2.Document> {\r\n    return new Observable(observer => {\r\n      try {\r\n        const content = yaml.safeLoad(openApiString);\r\n        let result;\r\n        if (content.swagger === '2.0') {\r\n          result = this.validatorV2.validate(content);\r\n        } else {\r\n          result = this.validatorV3.validate(content);\r\n        }\r\n\r\n        if (!result.errors || result.errors.length === 0) {\r\n          observer.next(content);\r\n        } else {\r\n          observer.error(result.errors.map(err => `${err.dataPath} ${err.message}`.trim()));\r\n        }\r\n      } catch (error) {\r\n        observer.error(['file content is invalid yaml']);\r\n      }\r\n      observer.complete();\r\n    });\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 12
            },
            "type": "injectable"
        },
        {
            "name": "OrbitalAdminService",
            "id": "injectable-OrbitalAdminService-eb12a3bf019d5c8bdf46ca3b86c324f1",
            "file": "src/app/services/orbital-admin/orbital-admin.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "deleteMockDefinition",
                    "args": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "mockDefId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 92,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRemoves the specified mock definition from the orbital server\n\n",
                    "description": "<p>Removes the specified mock definition from the orbital server</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2646,
                                "end": 2649,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "url"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2640,
                                "end": 2645,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>the orbital server url</p>\n"
                        },
                        {
                            "name": {
                                "pos": 2685,
                                "end": 2694,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "mockDefId"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2679,
                                "end": 2684,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>the title of the mock definition that will be removed</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 2755,
                                "end": 2762,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "returns"
                            },
                            "comment": "<p>a boolean indicating if the mockdefinition was removed successfully both the orbital server.</p>\n"
                        }
                    ]
                },
                {
                    "name": "deleteMockDefinitions",
                    "args": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "mockdefinitions",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<boolean[]>",
                    "typeParameters": [],
                    "line": 111,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDeletes a list of Mockdefinitions to the server\n",
                    "description": "<p>Deletes a list of Mockdefinitions to the server</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 3330,
                                "end": 3333,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "url"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 3324,
                                "end": 3329,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>The url to delete the Mockdefinitions from\nDeletes a list of Mockdefinitions to the server</p>\n"
                        },
                        {
                            "name": {
                                "pos": 3442,
                                "end": 3457,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "mockdefinitions"
                            },
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 3436,
                                "end": 3441,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>The mockdefinitions to delete</p>\n"
                        }
                    ]
                },
                {
                    "name": "exportMockDefinition",
                    "args": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "mockdefinition",
                            "type": "MockDefinition",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nPOSTs a Mockdefinition to the server\n",
                    "description": "<p>POSTs a Mockdefinition to the server</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1398,
                                "end": 1401,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "url"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1392,
                                "end": 1397,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>The url to post the mockdefinition to</p>\n"
                        },
                        {
                            "name": {
                                "pos": 1452,
                                "end": 1466,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "mockdefinition"
                            },
                            "type": "MockDefinition",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1446,
                                "end": 1451,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>The mockdefinition to be posted</p>\n"
                        }
                    ]
                },
                {
                    "name": "exportMockDefinitions",
                    "args": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "mockdefinitions",
                            "type": "MockDefinition[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<boolean[]>",
                    "typeParameters": [],
                    "line": 76,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nPOSTs a list of Mockdefinitions to the server\n",
                    "description": "<p>POSTs a list of Mockdefinitions to the server</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2165,
                                "end": 2168,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "url"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2159,
                                "end": 2164,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>The url to post the Mockdefinitions to\nPOSTs a list of Mockdefinitions to the server</p>\n"
                        },
                        {
                            "name": {
                                "pos": 2271,
                                "end": 2286,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "mockdefinitions"
                            },
                            "type": "MockDefinition[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2265,
                                "end": 2270,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>The mockdefinitions to export</p>\n"
                        }
                    ]
                },
                {
                    "name": "get",
                    "args": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<MockDefinition>",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSends a GET request to get a mock definition; the URL should not have a trailing slash\n",
                    "description": "<p>Sends a GET request to get a mock definition; the URL should not have a trailing slash</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 718,
                                "end": 721,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "url"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 712,
                                "end": 717,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>The url to send the GET request to</p>\n"
                        },
                        {
                            "name": {
                                "pos": 769,
                                "end": 771,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "id"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 763,
                                "end": 768,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>The mock definition id to get</p>\n"
                        }
                    ]
                },
                {
                    "name": "getAll",
                    "args": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<MockDefinition[]>",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSends a GET all request to a specified server\n",
                    "description": "<p>Sends a GET all request to a specified server</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1105,
                                "end": 1108,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "url"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1099,
                                "end": 1104,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>The url to send the GET request to</p>\n"
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport {\n  HttpClient,\n  HttpHeaders\n} from '@angular/common/http';\nimport { NGXLogger } from 'ngx-logger';\nimport { MockDefinition } from 'src/app/models/mock-definition/mock-definition.model';\nimport { Observable, throwError, forkJoin, from } from 'rxjs';\nimport { catchError, mergeMap, every, finalize, map } from 'rxjs/operators';\nimport { timeout } from 'rxjs/operators';\nimport { cloneDeep } from 'lodash';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class OrbitalAdminService {\n  constructor(private httpClient: HttpClient, private logger: NGXLogger) {}\n\n  /**\n   * Sends a GET request to get a mock definition; the URL should not have a trailing slash\n   * @param url The url to send the GET request to\n   * @param id The mock definition id to get\n   */\n  get(url: string, id: string): Observable<MockDefinition> {\n    this.logger.debug('Sent GET request to ' + url + '/' + id);\n    return this.httpClient\n      .get<MockDefinition>(url + '/' + id)\n      .pipe(timeout(3000));\n  }\n\n  /**\n   * Sends a GET all request to a specified server\n   * @param url The url to send the GET request to\n   */\n  getAll(url: string): Observable<MockDefinition[]> {\n    this.logger.debug('Sent GET request to ' + url);\n\n    return this.httpClient.get<MockDefinition[]>(url).pipe(timeout(3000));\n  }\n\n  /**\n   * POSTs a Mockdefinition to the server\n   * @param url The url to post the mockdefinition to\n   * @param mockdefinition The mockdefinition to be posted\n   */\n  exportMockDefinition(\n    url: string,\n    mockdefinition: MockDefinition\n  ): Observable<boolean> {\n    this.logger.debug('Mockdefinition has been exported: ', mockdefinition);\n    const mockDefinitionToExport = cloneDeep(mockdefinition);\n\n    this.logger.debug(\n      'Mockdefinition in JSON format: ',\n      mockDefinitionToExport\n    );\n\n    return this.httpClient\n      .post<boolean>(url, mockDefinitionToExport, {\n        headers: new HttpHeaders({\n          'Content-Type': 'application/json; charset=utf-8'\n        })\n      })\n      .pipe(\n        catchError(error => {\n          return throwError(error);\n        })\n      );\n  }\n\n  /**\n   * @param url The url to post the Mockdefinitions to\n   * POSTs a list of Mockdefinitions to the server\n   * @param mockdefinitions The mockdefinitions to export\n   */\n  exportMockDefinitions(\n    url: string,\n    mockdefinitions: MockDefinition[]\n  ): Observable<boolean[]> {\n    return forkJoin(mockdefinitions.map(mockdefinition =>\n      this.exportMockDefinition(url, mockdefinition)\n    ));\n  }\n\n  /**\n   * Removes the specified mock definition from the orbital server\n   *\n   * @param url the orbital server url\n   * @param mockDefId the title of the mock definition that will be removed\n   * @returns a boolean indicating if the mockdefinition was removed successfully both the orbital server.\n   */\n  deleteMockDefinition(url: string, mockDefId: string): Observable<boolean> {\n    const fullURL = url + '/' + mockDefId;\n\n    return this.httpClient.delete<boolean>(\n      fullURL, {headers: new HttpHeaders({}), observe: 'response', responseType: 'json'})\n      .pipe(\n      catchError(error => {\n        this.logger.error(error);\n        return throwError(error);\n      }),\n      map(deleteMockResult => deleteMockResult.status === 200)\n    );\n  }\n\n  /**\n   * @param url The url to delete the Mockdefinitions from\n   * Deletes a list of Mockdefinitions to the server\n   * @param mockdefinitions The mockdefinitions to delete\n   */\n  deleteMockDefinitions(\n    url: string,\n    mockdefinitions: string[]\n  ): Observable<boolean[]> {\n    return forkJoin(mockdefinitions.map(mockdefinition =>\n      this.deleteMockDefinition(url, mockdefinition)\n    ));\n  }\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "httpClient",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "logger",
                        "type": "NGXLogger",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "httpClient",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "logger",
                        "type": "NGXLogger",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "PolicyFormBuilder",
            "id": "injectable-PolicyFormBuilder-5182ca00c7a79218c466ee4431026b1d",
            "file": "src/app/components/scenario-editor/policy-container/policy-form-builder/policy-form.builder.ts",
            "properties": [],
            "methods": [
                {
                    "name": "generateDelayPolicyFormGroup",
                    "args": [],
                    "optional": false,
                    "returnType": "FormGroup",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThis method will return you the metadata provided as a form group.\n\n",
                    "description": "<p>This method will return you the metadata provided as a form group.</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": []
                },
                {
                    "name": "generateEmptyPolicyFormArray",
                    "args": [],
                    "optional": false,
                    "returnType": "FormArray",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators, FormControl, FormArray } from '@angular/forms';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class PolicyFormBuilder {\n  constructor(private formBuilder: FormBuilder) {}\n\n  /**\n   * This method will return you the metadata provided as a form group.\n   *\n   * @param metadata The metadata information to be turned to a form group.\n   */\n  public generateDelayPolicyFormGroup(): FormGroup {\n    return this.formBuilder.group({\n      delay: new FormControl('', [Validators.required, Validators.min(1), Validators.pattern('^[0-9]*$')])\n    });\n  }\n\n  public generateEmptyPolicyFormArray(): FormArray {\n    return this.formBuilder.array([], Validators.required);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 7,
                "jsdoctags": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ReadFileService",
            "id": "injectable-ReadFileService-8be8760a15d7dff9c1b93f7e931b37f8",
            "file": "src/app/services/read-file/read-file.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "read",
                    "args": [
                        {
                            "name": "file",
                            "type": "File",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<string>",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nTakes a file as input and returns a promise that will resolve to a string representing\nthe contents of the file\n",
                    "description": "<p>Takes a file as input and returns a promise that will resolve to a string representing\nthe contents of the file</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 387,
                                "end": 391,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "file"
                            },
                            "type": "File",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 381,
                                "end": 386,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>an Object representing the file to read</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 439,
                                "end": 446,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "returns"
                            },
                            "comment": "<p>a promise containing a string representing the file contents</p>\n"
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { NGXLogger } from 'ngx-logger';\r\nimport { Observable } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ReadFileService {\r\n  constructor(private logger: NGXLogger) {}\r\n\r\n  /**\r\n   * Takes a file as input and returns a promise that will resolve to a string representing\r\n   * the contents of the file\r\n   * @param file an Object representing the file to read\r\n   * @returns a promise containing a string representing the file contents\r\n   */\r\n  read(file: File): Observable<string> {\r\n    const fileReader = new FileReader();\r\n    return new Observable((observer) => {\r\n      fileReader.readAsText(file);\r\n      fileReader.onload = () => {\r\n        const contentString = fileReader.result as string;\r\n        this.logger.debug('File read succeeded');\r\n        observer.next(contentString);\r\n      };\r\n      fileReader.onerror = (ev: ProgressEvent): void => {\r\n        this.logger.debug('There was an error reading the file');\r\n        observer.error(ev);\r\n      };\r\n    });\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "logger",
                        "type": "NGXLogger",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 8,
                "jsdoctags": [
                    {
                        "name": "logger",
                        "type": "NGXLogger",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ScenarioFormBuilder",
            "id": "injectable-ScenarioFormBuilder-9e36775d1f5a8833d0466fc304a38adf",
            "file": "src/app/components/scenario-editor/scenario-form-builder/scenario-form.builder.ts",
            "properties": [
                {
                    "name": "scenarioForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "createNewScenarioForm",
                    "args": [],
                    "optional": false,
                    "returnType": "FormGroup",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGenerates a form group for a scenario with default values\n",
                    "description": "<p>Generates a form group for a scenario with default values</p>\n"
                },
                {
                    "name": "createScenarioForm",
                    "args": [
                        {
                            "name": "scenario",
                            "type": "Scenario",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGenerates a form group with the values provided by the scenario parameter.\n\n",
                    "description": "<p>Generates a form group with the values provided by the scenario parameter.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1601,
                                "end": 1609,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "scenario"
                            },
                            "type": "Scenario",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1595,
                                "end": 1600,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>the scenario to be used to create the form.</p>\n"
                        }
                    ]
                },
                {
                    "name": "getHeaderOrQueryItemFormGroup",
                    "args": [
                        {
                            "name": "headerOrQueryRule",
                            "type": "KeyValuePairRule",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 126,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThis method will return you the keyvaluepairrule provided as a form group.\n\n",
                    "description": "<p>This method will return you the keyvaluepairrule provided as a form group.</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 4776,
                                "end": 4793,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "headerOrQueryRule"
                            },
                            "type": "KeyValuePairRule",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 4770,
                                "end": 4775,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>KeyValuePairRule to be turned to a form group.</p>\n"
                        }
                    ]
                },
                {
                    "name": "getPolicyFormGroup",
                    "args": [
                        {
                            "name": "policy",
                            "type": "Policy",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "FormGroup",
                    "typeParameters": [],
                    "line": 94,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "policy",
                            "type": "Policy",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getUrlItemFormGroup",
                    "args": [
                        {
                            "name": "urlRule",
                            "type": "KeyValuePairRule",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 114,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThis method will return you the keyvaluepairrule provided as a form group.\n\n",
                    "description": "<p>This method will return you the keyvaluepairrule provided as a form group.</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 4325,
                                "end": 4332,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "urlRule"
                            },
                            "type": "KeyValuePairRule",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 4319,
                                "end": 4324,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>KeyValuePairRule to be turned to a form group.</p>\n"
                        }
                    ]
                },
                {
                    "name": "metadataFormGroup",
                    "args": [
                        {
                            "name": "metadata",
                            "type": "Metadata",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "FormGroup",
                    "typeParameters": [],
                    "line": 83,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThis method will return you the metadata provided as a form group.\n\n",
                    "description": "<p>This method will return you the metadata provided as a form group.</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 3306,
                                "end": 3314,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "metadata"
                            },
                            "type": "Metadata",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 3300,
                                "end": 3305,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>The metadata information to be turned to a form group.</p>\n"
                        }
                    ]
                },
                {
                    "name": "policiesFormArray",
                    "args": [
                        {
                            "name": "policies",
                            "type": "Policy[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "FormArray",
                    "typeParameters": [],
                    "line": 90,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "policies",
                            "type": "Policy[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "requestMatchRulesFormGroup",
                    "args": [
                        {
                            "name": "requestMatchRules",
                            "type": "RequestMatchRule",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "FormGroup",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nReturns a form group with values from the RequestMatchRule provided.\n\n",
                    "description": "<p>Returns a form group with values from the RequestMatchRule provided.</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2464,
                                "end": 2481,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "requestMatchRules"
                            },
                            "type": "RequestMatchRule",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2458,
                                "end": 2463,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>RequestMatchRules to be turned to form groups</p>\n"
                        }
                    ]
                },
                {
                    "name": "responseFormGroup",
                    "args": [
                        {
                            "name": "response",
                            "type": "Response",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "FormGroup",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nReturns a form group with the provided response values.\n\n",
                    "description": "<p>Returns a form group with the provided response values.</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "response",
                            "type": "Response",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators, FormControl, FormArray } from '@angular/forms';\nimport { Scenario, emptyScenario } from 'src/app/models/mock-definition/scenario/scenario.model';\nimport { Metadata } from 'src/app/models/mock-definition/metadata.model';\nimport { KeyValuePairRule } from 'src/app/models/mock-definition/scenario/key-value-pair-rule.model';\nimport { recordFirstOrDefault, recordFirstOrDefaultKey } from 'src/app/models/record';\nimport { RequestMatchRule } from 'src/app/models/mock-definition/scenario/request-match-rule.model';\nimport { Response } from 'src/app/models/mock-definition/scenario/response.model';\nimport { Policy } from 'src/app/models/mock-definition/scenario/policy.model';\nimport { PolicyType } from 'src/app/models/mock-definition/scenario/policy.type';\nimport { AddBodyRuleBuilder } from '../add-body-rule-edit/add-body-rule-builder/add-body-rule.builder';\nimport { BodyRule } from 'src/app/models/mock-definition/scenario/body-rule.model';\nimport { ResponseType } from 'src/app/models/mock-definition/scenario/response.type';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ScenarioFormBuilder {\n  private scenarioForm: FormGroup;\n\n  constructor(private formBuilder: FormBuilder, private bodyRuleFormBuilder: AddBodyRuleBuilder) {}\n\n  /**\n   * Generates a form group for a scenario with default values\n   */\n  createNewScenarioForm(): FormGroup {\n    return this.createScenarioForm(emptyScenario);\n  }\n\n  /**\n   * Generates a form group with the values provided by the scenario parameter.\n   *\n   * @param scenario the scenario to be used to create the form.\n   */\n  createScenarioForm(scenario: Scenario) {\n    this.scenarioForm = this.formBuilder.group({\n      metadata: this.metadataFormGroup(scenario.metadata),\n      requestMatchRules: this.requestMatchRulesFormGroup(scenario.requestMatchRules),\n      response: this.responseFormGroup(scenario.response),\n      policies: this.policiesFormArray(scenario.policies)\n    });\n    return this.scenarioForm;\n  }\n\n  /**\n   * Returns a form group with the provided response values.\n   *\n   */\n  public responseFormGroup(response: Response): FormGroup {\n    return this.formBuilder.group({\n      status: response.status,\n      headers: this.formBuilder.array,\n      body: response.body,\n      type: response.type\n    });\n  }\n\n  /**\n   * Returns a form group with values from the RequestMatchRule provided.\n   *\n   * @param requestMatchRules RequestMatchRules to be turned to form groups\n   */\n  public requestMatchRulesFormGroup(requestMatchRules: RequestMatchRule): FormGroup {\n    return this.formBuilder.group({\n      headerMatchRules: this.formBuilder.array(\n        requestMatchRules.headerRules.map(h => this.getHeaderOrQueryItemFormGroup(h))\n      ),\n      queryMatchRules: this.formBuilder.array(\n        requestMatchRules.queryRules.map(q => this.getHeaderOrQueryItemFormGroup(q))\n      ),\n      urlMatchRules: this.formBuilder.array(requestMatchRules.urlRules.map(u => this.getUrlItemFormGroup(u))),\n      bodyMatchRules: this.formBuilder.array(\n        requestMatchRules.bodyRules.map(u => this.bodyRuleFormBuilder.createBodyRuleForm(u))\n      )\n    });\n  }\n\n  /**\n   * This method will return you the metadata provided as a form group.\n   *\n   * @param metadata The metadata information to be turned to a form group.\n   */\n  public metadataFormGroup(metadata: Metadata): FormGroup {\n    return this.formBuilder.group({\n      title: [metadata.title, [Validators.maxLength(50)]],\n      description: [metadata.description, [Validators.maxLength(500)]]\n    });\n  }\n\n  public policiesFormArray(policies: Policy[]): FormArray {\n    return this.formBuilder.array(policies.map(p => this.getPolicyFormGroup(p)));\n  }\n\n  public getPolicyFormGroup(policy: Policy): FormGroup {\n    switch (policy.type) {\n      case PolicyType.DELAYRESPONSE: {\n        return new FormGroup({\n          delay: new FormControl(recordFirstOrDefault(policy.attributes, ''), [\n            Validators.required,\n            Validators.min(1),\n            Validators.pattern('^[0-9]*$')\n          ]),\n          policyType: new FormControl(policy.type, [Validators.required])\n        });\n      }\n    }\n  }\n\n  /**\n   * This method will return you the keyvaluepairrule provided as a form group.\n   *\n   * @param urlRule KeyValuePairRule to be turned to a form group.\n   */\n  public getUrlItemFormGroup(urlRule: KeyValuePairRule) {\n    return new FormGroup({\n      path: new FormControl(recordFirstOrDefault(urlRule.rule, ''), [Validators.required, Validators.maxLength(3000)]),\n      ruleType: new FormControl(urlRule.type, [Validators.required])\n    });\n  }\n\n  /**\n   * This method will return you the keyvaluepairrule provided as a form group.\n   *\n   * @param headerOrQueryRule KeyValuePairRule to be turned to a form group.\n   */\n  public getHeaderOrQueryItemFormGroup(headerOrQueryRule: KeyValuePairRule) {\n    return new FormGroup({\n      key: new FormControl(recordFirstOrDefaultKey(headerOrQueryRule.rule, ''), [\n        Validators.required,\n        Validators.maxLength(200)\n      ]),\n      value: new FormControl(recordFirstOrDefault(headerOrQueryRule.rule, ''), [\n        Validators.required,\n        Validators.maxLength(3000)\n      ]),\n      type: new FormControl(headerOrQueryRule.type, [Validators.required])\n    });\n  }\n\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ScenarioFormMapper {\n  /**\n   * Extracts the type of the response (e.g. NONE) from the response form\n   * @param responseForm The response form group to extract the type from\n   */\n  GetResponseTypeFromForm(responseForm: FormGroup): ResponseType {\n    return responseForm.controls.type.value;\n  }\n\n  public GetUrlRulesFromForm(urlMatchRules: FormArray) {\n    interface UrlRuleFormGroup {\n      path: string;\n      ruleType: number;\n    }\n\n    let urlRules: KeyValuePairRule[];\n\n    urlRules = urlMatchRules.controls\n      .map(group => {\n        return (group as FormGroup).getRawValue() as UrlRuleFormGroup;\n      })\n      .map(urlFormGroup => {\n        return {\n          type: urlFormGroup.ruleType,\n          rule: { urlPath: urlFormGroup.path }\n        } as KeyValuePairRule;\n      });\n    return urlRules;\n  }\n\n  /**\n   * Transforms FormArray data into policies to be saved in the scenario\n   *\n   * @param policies raw policies to be transformed\n   */\n  public GetPolicyRulesFromForm(policies: FormArray) {\n    let newPolicies: Policy[];\n\n    newPolicies = policies.controls.map(group => {\n      const policytype = (group as FormGroup).get('policyType').value;\n      const rawValue = (group as FormGroup).getRawValue();\n      return this.getPolicy(policytype, rawValue);\n    });\n    return newPolicies;\n  }\n\n  public GetBodyRulesFromForm(bodyRules: FormArray) {\n    let newBodyRules: BodyRule[];\n\n    newBodyRules = bodyRules.controls.map(group => {\n      const rawValue = (group as FormGroup).getRawValue();\n      return this.getBodyRule(rawValue);\n    });\n    return newBodyRules;\n  }\n\n  /**\n   * Transforms FormGroup into the appropiate policy\n   * @param policytype The type of policy\n   * @param rawValue The raw FormGroup value to be transformed\n   */\n  private getPolicy(policytype: PolicyType, rawValue: any) {\n    switch (policytype) {\n      case PolicyType.DELAYRESPONSE: {\n        interface PolicyDelayFormGroup {\n          delay: string;\n          policyType: number;\n        }\n        const rawPolicy = rawValue as PolicyDelayFormGroup;\n        const policyToReturn = {\n          type: rawPolicy.policyType,\n          attributes: { delay: rawPolicy.delay } as Record<string, string>\n        };\n        return policyToReturn;\n      }\n    }\n  }\n\n  /**\n   * Transforms FormGroup into the appropriate query or header rule\n   * @param headerOrQuerRules The header or query rules form array to extract from\n   */\n  public GetHeaderOrQueryRulesFromForm(headerOrQuerRules: FormArray) {\n    interface HeaderQueryRuleFormGroup {\n      key: string;\n      value: string;\n      type: number;\n    }\n\n    let kvpRules: KeyValuePairRule[];\n\n    kvpRules = headerOrQuerRules.controls\n      .map(group => {\n        return (group as FormGroup).getRawValue() as HeaderQueryRuleFormGroup;\n      })\n      .map(kvpRuleFormGroup => {\n        return {\n          type: kvpRuleFormGroup.type,\n          rule: { [kvpRuleFormGroup.key]: kvpRuleFormGroup.value }\n        } as KeyValuePairRule;\n      });\n    return kvpRules;\n  }\n\n  /*\n   * Transforms FormGroup into the appropiate policy\n   * @param policytype The type of policy\n   * @param rawValue The raw FormGroup value to be transformed\n   */\n  private getBodyRule(rawValue: any): BodyRule {\n    return { rule: rawValue.rule, type: rawValue.type } as BodyRule;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "bodyRuleFormBuilder",
                        "type": "AddBodyRuleBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 19,
                "jsdoctags": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "bodyRuleFormBuilder",
                        "type": "AddBodyRuleBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ScenarioFormMapper",
            "id": "injectable-ScenarioFormMapper-9e36775d1f5a8833d0466fc304a38adf",
            "file": "src/app/components/scenario-editor/scenario-form-builder/scenario-form.builder.ts",
            "properties": [],
            "methods": [
                {
                    "name": "getBodyRule",
                    "args": [
                        {
                            "name": "rawValue",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "BodyRule",
                    "typeParameters": [],
                    "line": 254,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "rawValue",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "GetBodyRulesFromForm",
                    "args": [
                        {
                            "name": "bodyRules",
                            "type": "FormArray",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "{}",
                    "typeParameters": [],
                    "line": 191,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "bodyRules",
                            "type": "FormArray",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "GetHeaderOrQueryRulesFromForm",
                    "args": [
                        {
                            "name": "headerOrQuerRules",
                            "type": "FormArray",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "{}",
                    "typeParameters": [],
                    "line": 227,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nTransforms FormGroup into the appropriate query or header rule\n",
                    "description": "<p>Transforms FormGroup into the appropriate query or header rule</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 7754,
                                "end": 7771,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "headerOrQuerRules"
                            },
                            "type": "FormArray",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 7748,
                                "end": 7753,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>The header or query rules form array to extract from</p>\n"
                        }
                    ]
                },
                {
                    "name": "getPolicy",
                    "args": [
                        {
                            "name": "policytype",
                            "type": "PolicyType",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "rawValue",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "{ type: number; attributes: any; }",
                    "typeParameters": [],
                    "line": 206,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nTransforms FormGroup into the appropiate policy\n",
                    "description": "<p>Transforms FormGroup into the appropiate policy</p>\n",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 7070,
                                "end": 7080,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "policytype"
                            },
                            "type": "PolicyType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 7064,
                                "end": 7069,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>The type of policy</p>\n"
                        },
                        {
                            "name": {
                                "pos": 7112,
                                "end": 7120,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "rawValue"
                            },
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 7106,
                                "end": 7111,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>The raw FormGroup value to be transformed</p>\n"
                        }
                    ]
                },
                {
                    "name": "GetPolicyRulesFromForm",
                    "args": [
                        {
                            "name": "policies",
                            "type": "FormArray",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "{}",
                    "typeParameters": [],
                    "line": 180,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nTransforms FormArray data into policies to be saved in the scenario\n\n",
                    "description": "<p>Transforms FormArray data into policies to be saved in the scenario</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 6317,
                                "end": 6325,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "policies"
                            },
                            "type": "FormArray",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 6311,
                                "end": 6316,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>raw policies to be transformed</p>\n"
                        }
                    ]
                },
                {
                    "name": "GetResponseTypeFromForm",
                    "args": [
                        {
                            "name": "responseForm",
                            "type": "FormGroup",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ResponseType",
                    "typeParameters": [],
                    "line": 150,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nExtracts the type of the response (e.g. NONE) from the response form\n",
                    "description": "<p>Extracts the type of the response (e.g. NONE) from the response form</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 5517,
                                "end": 5529,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "responseForm"
                            },
                            "type": "FormGroup",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 5511,
                                "end": 5516,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>The response form group to extract the type from</p>\n"
                        }
                    ]
                },
                {
                    "name": "GetUrlRulesFromForm",
                    "args": [
                        {
                            "name": "urlMatchRules",
                            "type": "FormArray",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "{}",
                    "typeParameters": [],
                    "line": 154,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "urlMatchRules",
                            "type": "FormArray",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators, FormControl, FormArray } from '@angular/forms';\nimport { Scenario, emptyScenario } from 'src/app/models/mock-definition/scenario/scenario.model';\nimport { Metadata } from 'src/app/models/mock-definition/metadata.model';\nimport { KeyValuePairRule } from 'src/app/models/mock-definition/scenario/key-value-pair-rule.model';\nimport { recordFirstOrDefault, recordFirstOrDefaultKey } from 'src/app/models/record';\nimport { RequestMatchRule } from 'src/app/models/mock-definition/scenario/request-match-rule.model';\nimport { Response } from 'src/app/models/mock-definition/scenario/response.model';\nimport { Policy } from 'src/app/models/mock-definition/scenario/policy.model';\nimport { PolicyType } from 'src/app/models/mock-definition/scenario/policy.type';\nimport { AddBodyRuleBuilder } from '../add-body-rule-edit/add-body-rule-builder/add-body-rule.builder';\nimport { BodyRule } from 'src/app/models/mock-definition/scenario/body-rule.model';\nimport { ResponseType } from 'src/app/models/mock-definition/scenario/response.type';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ScenarioFormBuilder {\n  private scenarioForm: FormGroup;\n\n  constructor(private formBuilder: FormBuilder, private bodyRuleFormBuilder: AddBodyRuleBuilder) {}\n\n  /**\n   * Generates a form group for a scenario with default values\n   */\n  createNewScenarioForm(): FormGroup {\n    return this.createScenarioForm(emptyScenario);\n  }\n\n  /**\n   * Generates a form group with the values provided by the scenario parameter.\n   *\n   * @param scenario the scenario to be used to create the form.\n   */\n  createScenarioForm(scenario: Scenario) {\n    this.scenarioForm = this.formBuilder.group({\n      metadata: this.metadataFormGroup(scenario.metadata),\n      requestMatchRules: this.requestMatchRulesFormGroup(scenario.requestMatchRules),\n      response: this.responseFormGroup(scenario.response),\n      policies: this.policiesFormArray(scenario.policies)\n    });\n    return this.scenarioForm;\n  }\n\n  /**\n   * Returns a form group with the provided response values.\n   *\n   */\n  public responseFormGroup(response: Response): FormGroup {\n    return this.formBuilder.group({\n      status: response.status,\n      headers: this.formBuilder.array,\n      body: response.body,\n      type: response.type\n    });\n  }\n\n  /**\n   * Returns a form group with values from the RequestMatchRule provided.\n   *\n   * @param requestMatchRules RequestMatchRules to be turned to form groups\n   */\n  public requestMatchRulesFormGroup(requestMatchRules: RequestMatchRule): FormGroup {\n    return this.formBuilder.group({\n      headerMatchRules: this.formBuilder.array(\n        requestMatchRules.headerRules.map(h => this.getHeaderOrQueryItemFormGroup(h))\n      ),\n      queryMatchRules: this.formBuilder.array(\n        requestMatchRules.queryRules.map(q => this.getHeaderOrQueryItemFormGroup(q))\n      ),\n      urlMatchRules: this.formBuilder.array(requestMatchRules.urlRules.map(u => this.getUrlItemFormGroup(u))),\n      bodyMatchRules: this.formBuilder.array(\n        requestMatchRules.bodyRules.map(u => this.bodyRuleFormBuilder.createBodyRuleForm(u))\n      )\n    });\n  }\n\n  /**\n   * This method will return you the metadata provided as a form group.\n   *\n   * @param metadata The metadata information to be turned to a form group.\n   */\n  public metadataFormGroup(metadata: Metadata): FormGroup {\n    return this.formBuilder.group({\n      title: [metadata.title, [Validators.maxLength(50)]],\n      description: [metadata.description, [Validators.maxLength(500)]]\n    });\n  }\n\n  public policiesFormArray(policies: Policy[]): FormArray {\n    return this.formBuilder.array(policies.map(p => this.getPolicyFormGroup(p)));\n  }\n\n  public getPolicyFormGroup(policy: Policy): FormGroup {\n    switch (policy.type) {\n      case PolicyType.DELAYRESPONSE: {\n        return new FormGroup({\n          delay: new FormControl(recordFirstOrDefault(policy.attributes, ''), [\n            Validators.required,\n            Validators.min(1),\n            Validators.pattern('^[0-9]*$')\n          ]),\n          policyType: new FormControl(policy.type, [Validators.required])\n        });\n      }\n    }\n  }\n\n  /**\n   * This method will return you the keyvaluepairrule provided as a form group.\n   *\n   * @param urlRule KeyValuePairRule to be turned to a form group.\n   */\n  public getUrlItemFormGroup(urlRule: KeyValuePairRule) {\n    return new FormGroup({\n      path: new FormControl(recordFirstOrDefault(urlRule.rule, ''), [Validators.required, Validators.maxLength(3000)]),\n      ruleType: new FormControl(urlRule.type, [Validators.required])\n    });\n  }\n\n  /**\n   * This method will return you the keyvaluepairrule provided as a form group.\n   *\n   * @param headerOrQueryRule KeyValuePairRule to be turned to a form group.\n   */\n  public getHeaderOrQueryItemFormGroup(headerOrQueryRule: KeyValuePairRule) {\n    return new FormGroup({\n      key: new FormControl(recordFirstOrDefaultKey(headerOrQueryRule.rule, ''), [\n        Validators.required,\n        Validators.maxLength(200)\n      ]),\n      value: new FormControl(recordFirstOrDefault(headerOrQueryRule.rule, ''), [\n        Validators.required,\n        Validators.maxLength(3000)\n      ]),\n      type: new FormControl(headerOrQueryRule.type, [Validators.required])\n    });\n  }\n\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ScenarioFormMapper {\n  /**\n   * Extracts the type of the response (e.g. NONE) from the response form\n   * @param responseForm The response form group to extract the type from\n   */\n  GetResponseTypeFromForm(responseForm: FormGroup): ResponseType {\n    return responseForm.controls.type.value;\n  }\n\n  public GetUrlRulesFromForm(urlMatchRules: FormArray) {\n    interface UrlRuleFormGroup {\n      path: string;\n      ruleType: number;\n    }\n\n    let urlRules: KeyValuePairRule[];\n\n    urlRules = urlMatchRules.controls\n      .map(group => {\n        return (group as FormGroup).getRawValue() as UrlRuleFormGroup;\n      })\n      .map(urlFormGroup => {\n        return {\n          type: urlFormGroup.ruleType,\n          rule: { urlPath: urlFormGroup.path }\n        } as KeyValuePairRule;\n      });\n    return urlRules;\n  }\n\n  /**\n   * Transforms FormArray data into policies to be saved in the scenario\n   *\n   * @param policies raw policies to be transformed\n   */\n  public GetPolicyRulesFromForm(policies: FormArray) {\n    let newPolicies: Policy[];\n\n    newPolicies = policies.controls.map(group => {\n      const policytype = (group as FormGroup).get('policyType').value;\n      const rawValue = (group as FormGroup).getRawValue();\n      return this.getPolicy(policytype, rawValue);\n    });\n    return newPolicies;\n  }\n\n  public GetBodyRulesFromForm(bodyRules: FormArray) {\n    let newBodyRules: BodyRule[];\n\n    newBodyRules = bodyRules.controls.map(group => {\n      const rawValue = (group as FormGroup).getRawValue();\n      return this.getBodyRule(rawValue);\n    });\n    return newBodyRules;\n  }\n\n  /**\n   * Transforms FormGroup into the appropiate policy\n   * @param policytype The type of policy\n   * @param rawValue The raw FormGroup value to be transformed\n   */\n  private getPolicy(policytype: PolicyType, rawValue: any) {\n    switch (policytype) {\n      case PolicyType.DELAYRESPONSE: {\n        interface PolicyDelayFormGroup {\n          delay: string;\n          policyType: number;\n        }\n        const rawPolicy = rawValue as PolicyDelayFormGroup;\n        const policyToReturn = {\n          type: rawPolicy.policyType,\n          attributes: { delay: rawPolicy.delay } as Record<string, string>\n        };\n        return policyToReturn;\n      }\n    }\n  }\n\n  /**\n   * Transforms FormGroup into the appropriate query or header rule\n   * @param headerOrQuerRules The header or query rules form array to extract from\n   */\n  public GetHeaderOrQueryRulesFromForm(headerOrQuerRules: FormArray) {\n    interface HeaderQueryRuleFormGroup {\n      key: string;\n      value: string;\n      type: number;\n    }\n\n    let kvpRules: KeyValuePairRule[];\n\n    kvpRules = headerOrQuerRules.controls\n      .map(group => {\n        return (group as FormGroup).getRawValue() as HeaderQueryRuleFormGroup;\n      })\n      .map(kvpRuleFormGroup => {\n        return {\n          type: kvpRuleFormGroup.type,\n          rule: { [kvpRuleFormGroup.key]: kvpRuleFormGroup.value }\n        } as KeyValuePairRule;\n      });\n    return kvpRules;\n  }\n\n  /*\n   * Transforms FormGroup into the appropiate policy\n   * @param policytype The type of policy\n   * @param rawValue The raw FormGroup value to be transformed\n   */\n  private getBodyRule(rawValue: any): BodyRule {\n    return { rule: rawValue.rule, type: rawValue.type } as BodyRule;\n  }\n}\n",
            "type": "injectable"
        },
        {
            "name": "ValidJsonService",
            "id": "injectable-ValidJsonService-40e82db50b5726384d54e0282f6df5e5",
            "file": "src/app/services/valid-json/valid-json.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "isValidJSON",
                    "args": [
                        {
                            "name": "json",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nChecks if the provided JSON string is valid\n",
                    "description": "<p>Checks if the provided JSON string is valid</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 267,
                                "end": 271,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "json"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 261,
                                "end": 266,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>The JSON to validate</p>\n"
                        }
                    ]
                },
                {
                    "name": "parseJSONOrDefault",
                    "args": [
                        {
                            "name": "json",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "defaultValue",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "T",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nReturns a valid JSON object if the JSON can be parsed, otherwise the default value\n",
                    "description": "<p>Returns a valid JSON object if the JSON can be parsed, otherwise the default value</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 509,
                                "end": 513,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "json"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 503,
                                "end": 508,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>The JSON to parse</p>\n"
                        },
                        {
                            "name": {
                                "pos": 544,
                                "end": 556,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "defaultValue"
                            },
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 538,
                                "end": 543,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>The default value to return if the string cannot be parsed</p>\n"
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { NGXLogger } from 'ngx-logger';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ValidJsonService {\n  constructor(private logger: NGXLogger) {}\n\n  /**\n   * Checks if the provided JSON string is valid\n   * @param json The JSON to validate\n   */\n  isValidJSON(json: string): boolean {\n    return !!this.parseJSONOrDefault<boolean>(json, false);\n  }\n\n  /**\n   * Returns a valid JSON object if the JSON can be parsed, otherwise the default value\n   * @param json The JSON to parse\n   * @param defaultValue The default value to return if the string cannot be parsed\n   */\n  parseJSONOrDefault<T>(json: string, defaultValue: T): T {\n    try {\n      return JSON.parse(json);\n    } catch (e) {\n      this.logger.error('Invalid JSON file', e);\n      return defaultValue;\n    }\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "logger",
                        "type": "NGXLogger",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 7,
                "jsdoctags": [
                    {
                        "name": "logger",
                        "type": "NGXLogger",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        }
    ],
    "guards": [
        {
            "name": "OverviewRedirectService",
            "id": "injectable-OverviewRedirectService-b494855cf90dda3ce8ebeba1af5ca389",
            "file": "src/app/services/overview-redirect/overview-redirect.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "canActivate",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nNavigates to the homepage if the mock definition store is not initialized;\nalways returns true\n",
                    "description": "<p>Navigates to the homepage if the mock definition store is not initialized;\nalways returns true</p>\n"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { CanActivate, Router } from '@angular/router';\nimport { DesignerStore } from '../../store/designer-store';\n\n@Injectable({\n  providedIn: 'root'\n})\n\n/**\n * Redirects to the homepage if the user goes to an internal route which requires\n * a mock definition to be loaded\n */\nexport class OverviewRedirectService implements CanActivate {\n  constructor(private store: DesignerStore, private router: Router) {}\n\n  /**\n   * Navigates to the homepage if the mock definition store is not initialized;\n   * always returns true\n   */\n  canActivate() {\n    if (!this.store.state.mockDefinition) {\n      this.router.navigate(['/']);\n    }\n    return true;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "DesignerStore",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "DesignerStore",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "guard"
        }
    ],
    "interceptors": [],
    "classes": [
        {
            "name": "AppPage",
            "id": "class-AppPage-635eb3f7d3ea541b0b64c62f89afaae2",
            "file": "e2e/src/app.po.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { browser, by, element } from 'protractor';\n\nexport class AppPage {\n  navigateTo() {\n    return browser.get(browser.baseUrl) as Promise<any>;\n  }\n\n  getTitleText() {\n    return element(by.css('app-root h5')).getText() as Promise<string>;\n  }\n}\n",
            "properties": [],
            "methods": [
                {
                    "name": "getTitleText",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 8,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "navigateTo",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 4,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "DesignerStore",
            "id": "class-DesignerStore-1cc82296aa942dd496d3deaebdcff524",
            "file": "src/app/store/designer-store.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Endpoint } from '../models/endpoint.model';\nimport { Scenario } from '../models/mock-definition/scenario/scenario.model';\nimport { MockDefinition } from '../models/mock-definition/mock-definition.model';\nimport { Store } from 'rxjs-observable-store';\nimport { Injectable } from '@angular/core';\nimport { OpenAPIV2 } from 'openapi-types';\nimport { VerbType } from '../models/verb.type';\nimport { Metadata } from '../models/mock-definition/metadata.model';\nimport { NGXLogger } from 'ngx-logger';\nimport { cloneDeep } from 'lodash';\nimport { recordDelete, recordAdd, recordFirstOrDefault } from '../models/record';\n\nexport interface State {\n  selectedEndpoint: Endpoint;\n  selectedScenario: Scenario;\n  mockDefinition: MockDefinition;\n  mockDefinitions: Record<string, MockDefinition>;\n  endpoints: Endpoint[];\n}\n\nInjectable();\nexport class DesignerStore extends Store<State> {\n  private static readonly mockDefinitionStoreKey = 'orbital_state_mockDefinition';\n  private static readonly mockDefinitionsStoreKey = 'orbital_state_mockDefinitions';\n  private static readonly endpointsStoreKey = 'orbital_state_endpoints';\n  private static readonly selectedEndpointStoreKey = 'orbital_state_selectedEndpoint';\n  private static readonly selectedScenarioStoreKey = 'orbital_state_selectedScenario';\n\n  constructor(private logger: NGXLogger) {\n    super({\n      selectedEndpoint: JSON.parse(localStorage.getItem(DesignerStore.selectedEndpointStoreKey)),\n      selectedScenario: JSON.parse(localStorage.getItem(DesignerStore.selectedScenarioStoreKey)),\n      mockDefinition: JSON.parse(localStorage.getItem(DesignerStore.mockDefinitionStoreKey)),\n      mockDefinitions: JSON.parse(localStorage.getItem(DesignerStore.mockDefinitionsStoreKey)) || {},\n      endpoints: JSON.parse(localStorage.getItem(DesignerStore.endpointsStoreKey)) || []\n    });\n\n    this.state$.subscribe(state => {\n      const clonedDefinition = cloneDeep(state.mockDefinition);\n      const clonedDefinitions = cloneDeep(state.mockDefinitions);\n      localStorage.setItem(DesignerStore.mockDefinitionStoreKey, JSON.stringify(clonedDefinition));\n      localStorage.setItem(DesignerStore.mockDefinitionsStoreKey, JSON.stringify(clonedDefinitions));\n      localStorage.setItem(DesignerStore.endpointsStoreKey, JSON.stringify(state.endpoints));\n      localStorage.setItem(DesignerStore.selectedEndpointStoreKey, JSON.stringify(state.selectedEndpoint));\n      localStorage.setItem(DesignerStore.selectedScenarioStoreKey, JSON.stringify(state.selectedScenario));\n    });\n  }\n\n  /**\n   * This setter updates the Mockdefinitions map with the Mockdefinitions parameter\n   * It creates a new Map for the store in order to trigger any render changes relying on this map.\n   * Also updates the mockDefinition to the first mockDefinition in the list\n   */\n  set mockDefinitions(mockDefinitions: MockDefinition[]) {\n    this.logger.debug('Setting mockDefinitions to ', mockDefinitions);\n    this.setState({\n      ...this.state,\n      mockDefinitions: mockDefinitions.reduce(\n        (previous, current) => recordAdd(previous, current.metadata.title, current),\n        {} as Record<string, MockDefinition>\n      )\n    });\n    this.mockDefinition = mockDefinitions[0];\n  }\n\n  /**\n   * Deletes a mock definition by title\n   */\n  deleteMockDefinitionByTitle(mockTitle: string) {\n    if (this.state.mockDefinitions[mockTitle]) {\n      this.logger.debug('Deleting mock ', mockTitle);\n      this.setState({\n        ...this.state,\n        mockDefinitions: recordDelete(this.state.mockDefinitions, mockTitle)\n      });\n\n      const mockDefKeys = Object.keys(this.state.mockDefinitions);\n      if (!!this.state.mockDefinitions && mockDefKeys.length > 0) {\n        this.logger.debug(\n          'Mock store contains at least one mock; setting first mock to one in store ',\n          this.state.mockDefinitions\n        );\n        this.mockDefinition = this.state.mockDefinitions[mockDefKeys[0]];\n        this.selectedEndpoint = null;\n        this.selectedScenario = null;\n      }\n    }\n  }\n\n  /**\n   * Updates a mock definition by title\n   */\n  private updateMockDefinitionsState(mockDefinition: MockDefinition) {\n    this.logger.debug('Updating mock ', mockDefinition.metadata.title);\n    this.setState({\n      ...this.state,\n      mockDefinitions: recordAdd(this.state.mockDefinitions, mockDefinition.metadata.title, mockDefinition)\n    });\n  }\n\n  /**\n   * Appends a mock definition to the store; if one with the same name already exists\n   * it will be overwritten\n   */\n  appendMockDefinition(mockDefinition: MockDefinition) {\n    this.logger.debug('Appending mock definition', mockDefinition);\n    this.setState({\n      ...this.state,\n      mockDefinitions: recordAdd(this.state.mockDefinitions, mockDefinition.metadata.title, mockDefinition)\n    });\n    this.logger.debug('New state after appending', this.state);\n    this.mockDefinition = recordFirstOrDefault(this.state.mockDefinitions, null);\n\n    if (this.state.mockDefinition) {\n      this.selectedEndpoint = null;\n      this.selectedScenario = null;\n    }\n  }\n\n  /**\n   * This setter updates the selected endpoint for the designer store\n   */\n  set selectedEndpoint(endpoint: Endpoint) {\n    this.logger.debug('setting selectedEndpoint to ', endpoint);\n    this.setState({\n      ...this.state,\n      selectedEndpoint: {\n        ...endpoint\n      }\n    });\n  }\n\n  /**\n   * This setter updates the selected scenario for the designer store\n   */\n  set selectedScenario(scenario: Scenario) {\n    this.logger.debug('setting selectedScenario to ', scenario);\n    this.setState({\n      ...this.state,\n      selectedScenario: {\n        ...scenario\n      }\n    });\n  }\n\n  /**\n   * setEndpoints reads the details of the endpoints specified in the Open Api document\n   * and updates the state of the designer store.\n   * @param doc The parsed Open Api document to extrapolate the endpoints from\n   * @param clearStore Whether to clear the store before clearing the endpoints\n   */\n  setEndpoints(doc: OpenAPIV2.Document, clearStore = true): void {\n    this.logger.debug('Clearing current endpoints: ', clearStore);\n    const pathStrings = Object.keys(doc.paths);\n    let endpoints = [];\n    for (const path of pathStrings) {\n      const pathObject: OpenAPIV2.PathItemObject = doc.paths[path];\n      const newEndpoints = Object.keys(VerbType)\n        .map(verb => ({ verb: VerbType[verb], lowerVerb: verb.toLowerCase() }))\n        .map(({ verb, lowerVerb }) => (!!pathObject[lowerVerb] ? { path, verb, spec: pathObject[lowerVerb] } : null))\n        .filter(endpoint => !!endpoint);\n      endpoints = [...endpoints, ...newEndpoints];\n    }\n    this.logger.debug('Endpoints from openApi document ', endpoints);\n    this.setState({\n      ...this.state,\n      endpoints: clearStore ? [...endpoints] : [...this.state.endpoints, ...endpoints]\n    });\n  }\n\n  /**\n   * Setter method used to updated the MockDefinition in the designer store and the endpoints list\n   * @param mockDefinition The MockDefinition used to update the store\n   */\n  set mockDefinition(mockDefinition: MockDefinition) {\n    const mockDefinitionCopy = { ...mockDefinition };\n    const mockDefinitions = recordAdd(this.state.mockDefinitions, mockDefinition.metadata.title, mockDefinitionCopy);\n    this.logger.debug('Setting mockDefinition to ', mockDefinition);\n    this.setState({\n      ...this.state,\n      mockDefinitions,\n      mockDefinition: mockDefinitionCopy\n    });\n    this.setEndpoints(mockDefinition.openApi);\n  }\n\n  /**\n   * This method updates Metadata for the MockDefinition in the designer store\n   *\n   * @param metadata The metdata to update\n   */\n  updateMetadata(metadata: Metadata): void {\n    this.logger.debug('Setting metadata to ', metadata);\n    this.setState({\n      ...this.state,\n      mockDefinition: {\n        ...this.state.mockDefinition,\n        metadata: {\n          ...metadata\n        }\n      }\n    });\n  }\n\n  /**\n   * Add the provided scenario to current mock definition;\n   * If scenario already exist, update the existing scenario\n   * @param scenario Scenario to add to current mock definition\n   */\n  addOrUpdateScenario(scenario: Scenario) {\n    const currentMock = this.state.mockDefinition;\n    if (currentMock) {\n      let current = currentMock.scenarios.find(s => s.id === scenario.id);\n      if (current) {\n        this.logger.debug(\n          'DesignerStore:AddOrUpdateScenario: Provided scenario already exist in the mock definition',\n          current,\n          scenario\n        );\n        current.metadata.title = scenario.metadata.title;\n        current.metadata.description = scenario.metadata.description;\n\n        current.requestMatchRules.bodyRules = scenario.requestMatchRules.bodyRules;\n        current.requestMatchRules.headerRules = scenario.requestMatchRules.headerRules;\n        current.requestMatchRules.queryRules = scenario.requestMatchRules.queryRules;\n        current.requestMatchRules.urlRules = scenario.requestMatchRules.urlRules;\n        current.defaultScenario = scenario.defaultScenario;\n\n        current.policies = scenario.policies;\n\n        current.response.body = scenario.response.body;\n        current.response.headers = scenario.response.headers;\n        current.response.status = scenario.response.status;\n        current.response.type = scenario.response.type;\n      } else {\n        this.logger.debug(\n          'DesignerStore:AddOrUpdateScenario: Unable to find provided scenario in the mock definition, Append it to the end of the list',\n          scenario\n        );\n        current = scenario;\n        currentMock.scenarios.push(current);\n      }\n      this.updateMockDefinitionsState(currentMock);\n    }\n  }\n\n  /**\n   * This method updates the host,basepath and openAPI spec of the MockDefinition in the designer store\n   * @param host The string representing the host\n   * @param basePath The string representing endpoint path\n   * @param openApi The string representing openSpecAPI file contents\n   */\n  updateApiInformation(host: string, basePath: string, openApi: OpenAPIV2.Document): void {\n    this.logger.debug('Setting host to ', host);\n    this.logger.debug('Setting basePath to ', basePath);\n    this.logger.debug('Setting openApi to ', openApi);\n    this.setState({\n      ...this.state,\n      mockDefinition: {\n        ...this.state.mockDefinition,\n        host,\n        basePath,\n        openApi: { ...openApi }\n      }\n    });\n  }\n\n  /**\n   * This method updates scenario array for the MockDefinition in the designer store\n   * @param scenarios The list of scenarios to update\n   */\n  updateScenarios(scenarios: Scenario[]) {\n    this.logger.debug('Setting scenarios to ', scenarios);\n    this.mockDefinition = {\n      ...this.state.mockDefinition,\n      scenarios: [...scenarios]\n    };\n  }\n\n  deleteScenario(scenarioId: string) {\n    this.mockDefinition = {\n      ...this.state.mockDefinition,\n      scenarios: this.state.mockDefinition.scenarios.filter(s => s.id !== scenarioId)\n    };\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "logger",
                        "type": "NGXLogger",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 27,
                "jsdoctags": [
                    {
                        "name": "logger",
                        "type": "NGXLogger",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "endpointsStoreKey",
                    "defaultValue": "'orbital_state_endpoints'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        121,
                        124,
                        143
                    ]
                },
                {
                    "name": "mockDefinitionsStoreKey",
                    "defaultValue": "'orbital_state_mockDefinitions'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        121,
                        124,
                        143
                    ]
                },
                {
                    "name": "mockDefinitionStoreKey",
                    "defaultValue": "'orbital_state_mockDefinition'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        121,
                        124,
                        143
                    ]
                },
                {
                    "name": "selectedEndpointStoreKey",
                    "defaultValue": "'orbital_state_selectedEndpoint'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        121,
                        124,
                        143
                    ]
                },
                {
                    "name": "selectedScenarioStoreKey",
                    "defaultValue": "'orbital_state_selectedScenario'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        121,
                        124,
                        143
                    ]
                }
            ],
            "methods": [
                {
                    "name": "addOrUpdateScenario",
                    "args": [
                        {
                            "name": "scenario",
                            "type": "Scenario",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 210,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAdd the provided scenario to current mock definition;\nIf scenario already exist, update the existing scenario\n",
                    "description": "<p>Add the provided scenario to current mock definition;\nIf scenario already exist, update the existing scenario</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 8039,
                                "end": 8047,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "scenario"
                            },
                            "type": "Scenario",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 8033,
                                "end": 8038,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>Scenario to add to current mock definition</p>\n"
                        }
                    ]
                },
                {
                    "name": "appendMockDefinition",
                    "args": [
                        {
                            "name": "mockDefinition",
                            "type": "MockDefinition",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 105,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAppends a mock definition to the store; if one with the same name already exists\nit will be overwritten\n",
                    "description": "<p>Appends a mock definition to the store; if one with the same name already exists\nit will be overwritten</p>\n",
                    "jsdoctags": [
                        {
                            "name": "mockDefinition",
                            "type": "MockDefinition",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteMockDefinitionByTitle",
                    "args": [
                        {
                            "name": "mockTitle",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 69,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDeletes a mock definition by title\n",
                    "description": "<p>Deletes a mock definition by title</p>\n",
                    "jsdoctags": [
                        {
                            "name": "mockTitle",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteScenario",
                    "args": [
                        {
                            "name": "scenarioId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 280,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "scenarioId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setEndpoints",
                    "args": [
                        {
                            "name": "doc",
                            "type": "OpenAPIV2.Document",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "clearStore",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 152,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nsetEndpoints reads the details of the endpoints specified in the Open Api document\nand updates the state of the designer store.\n",
                    "description": "<p>setEndpoints reads the details of the endpoints specified in the Open Api document\nand updates the state of the designer store.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 5820,
                                "end": 5823,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "doc"
                            },
                            "type": "OpenAPIV2.Document",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 5814,
                                "end": 5819,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>The parsed Open Api document to extrapolate the endpoints from</p>\n"
                        },
                        {
                            "name": {
                                "pos": 5899,
                                "end": 5909,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "clearStore"
                            },
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "true",
                            "tagName": {
                                "pos": 5893,
                                "end": 5898,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>Whether to clear the store before clearing the endpoints</p>\n"
                        }
                    ]
                },
                {
                    "name": "updateApiInformation",
                    "args": [
                        {
                            "name": "host",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "basePath",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "openApi",
                            "type": "OpenAPIV2.Document",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 253,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThis method updates the host,basepath and openAPI spec of the MockDefinition in the designer store\n",
                    "description": "<p>This method updates the host,basepath and openAPI spec of the MockDefinition in the designer store</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 9777,
                                "end": 9781,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "host"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 9771,
                                "end": 9776,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>The string representing the host</p>\n"
                        },
                        {
                            "name": {
                                "pos": 9827,
                                "end": 9835,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "basePath"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 9821,
                                "end": 9826,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>The string representing endpoint path</p>\n"
                        },
                        {
                            "name": {
                                "pos": 9886,
                                "end": 9893,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "openApi"
                            },
                            "type": "OpenAPIV2.Document",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 9880,
                                "end": 9885,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>The string representing openSpecAPI file contents</p>\n"
                        }
                    ]
                },
                {
                    "name": "updateMetadata",
                    "args": [
                        {
                            "name": "metadata",
                            "type": "Metadata",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 192,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThis method updates Metadata for the MockDefinition in the designer store\n\n",
                    "description": "<p>This method updates Metadata for the MockDefinition in the designer store</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 7586,
                                "end": 7594,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "metadata"
                            },
                            "type": "Metadata",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 7580,
                                "end": 7585,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>The metdata to update</p>\n"
                        }
                    ]
                },
                {
                    "name": "updateMockDefinitionsState",
                    "args": [
                        {
                            "name": "mockDefinition",
                            "type": "MockDefinition",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 93,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nUpdates a mock definition by title\n",
                    "description": "<p>Updates a mock definition by title</p>\n",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "mockDefinition",
                            "type": "MockDefinition",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateScenarios",
                    "args": [
                        {
                            "name": "scenarios",
                            "type": "Scenario[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 272,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThis method updates scenario array for the MockDefinition in the designer store\n",
                    "description": "<p>This method updates scenario array for the MockDefinition in the designer store</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 10494,
                                "end": 10503,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "scenarios"
                            },
                            "type": "Scenario[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 10488,
                                "end": 10493,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>The list of scenarios to update</p>\n"
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "extends": "Store",
            "accessors": {
                "mockDefinitions": {
                    "name": "mockDefinitions",
                    "setSignature": {
                        "name": "mockDefinitions",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "mockDefinitions",
                                "type": "MockDefinition[]",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 54,
                        "rawdescription": "This setter updates the Mockdefinitions map with the Mockdefinitions parameter\nIt creates a new Map for the store in order to trigger any render changes relying on this map.\nAlso updates the mockDefinition to the first mockDefinition in the list",
                        "description": "<p>This setter updates the Mockdefinitions map with the Mockdefinitions parameter\nIt creates a new Map for the store in order to trigger any render changes relying on this map.\nAlso updates the mockDefinition to the first mockDefinition in the list</p>\n",
                        "jsdoctags": [
                            {
                                "name": "mockDefinitions",
                                "type": "MockDefinition[]",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "selectedEndpoint": {
                    "name": "selectedEndpoint",
                    "setSignature": {
                        "name": "selectedEndpoint",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "endpoint",
                                "type": "Endpoint",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 123,
                        "rawdescription": "This setter updates the selected endpoint for the designer store",
                        "description": "<p>This setter updates the selected endpoint for the designer store</p>\n",
                        "jsdoctags": [
                            {
                                "name": "endpoint",
                                "type": "Endpoint",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "selectedScenario": {
                    "name": "selectedScenario",
                    "setSignature": {
                        "name": "selectedScenario",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "scenario",
                                "type": "Scenario",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 136,
                        "rawdescription": "This setter updates the selected scenario for the designer store",
                        "description": "<p>This setter updates the selected scenario for the designer store</p>\n",
                        "jsdoctags": [
                            {
                                "name": "scenario",
                                "type": "Scenario",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "mockDefinition": {
                    "name": "mockDefinition",
                    "setSignature": {
                        "name": "mockDefinition",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "mockDefinition",
                                "type": "MockDefinition",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 175,
                        "rawdescription": "Setter method used to updated the MockDefinition in the designer store and the endpoints list",
                        "description": "<p>Setter method used to updated the MockDefinition in the designer store and the endpoints list</p>\n",
                        "jsdoctags": [
                            {
                                "name": {
                                    "pos": 6958,
                                    "end": 6972,
                                    "flags": 4227072,
                                    "modifierFlagsCache": 0,
                                    "transformFlags": 0,
                                    "kind": 79,
                                    "escapedText": "mockDefinition"
                                },
                                "type": "MockDefinition",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "pos": 6952,
                                    "end": 6957,
                                    "flags": 4227072,
                                    "modifierFlagsCache": 0,
                                    "transformFlags": 0,
                                    "kind": 79,
                                    "escapedText": "param"
                                },
                                "comment": "<p>The MockDefinition used to update the store</p>\n"
                            }
                        ]
                    }
                }
            },
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [],
    "components": [
        {
            "name": "AddMetadataComponent",
            "id": "component-AddMetadataComponent-b3c46cb89d07b77aff150cc0a5e1be6d",
            "file": "src/app/components/scenario-editor/add-metadata/add-metadata.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-add-metadata",
            "styleUrls": [
                "./add-metadata.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./add-metadata.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "metadata",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 1959,
                            "end": 1998,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 335,
                            "tagName": {
                                "pos": 1960,
                                "end": 1965,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>The metadata to set</p>\n",
                            "name": {
                                "pos": 1966,
                                "end": 1974,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "metadata"
                            },
                            "isNameFirst": true,
                            "isBracketed": false
                        }
                    ],
                    "rawdescription": "Sets the metadata",
                    "description": "<p>Sets the metadata</p>\n",
                    "line": 87,
                    "type": ""
                },
                {
                    "name": "metadataDescription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "Sets the metadata description",
                    "description": "<p>Sets the metadata description</p>\n",
                    "line": 67,
                    "type": "string"
                },
                {
                    "name": "metadataTitle",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "Sets the metadata title",
                    "description": "<p>Sets the metadata title</p>\n",
                    "line": 48,
                    "type": "string"
                },
                {
                    "name": "saveStatus",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "Emits the form validity and the metadata output when the form is saved",
                    "description": "<p>Emits the form validity and the metadata output when the form is saved</p>\n",
                    "line": 98,
                    "type": "boolean"
                }
            ],
            "outputsClass": [
                {
                    "name": "metadataOutput",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "EventEmitter<Metadata>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "descriptionErrorMessage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "isCardDisabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "metadataDescriptionProp",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "metadataTitleProp",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "panelExpanded",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "titleErrorMessage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 24
                }
            ],
            "methodsClass": [
                {
                    "name": "checkStatus",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 165,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCheck if current response is valid or not.\nIf not valid, call disable card; otherwise, enable expansion\n",
                    "description": "<p>Check if current response is valid or not.\nIf not valid, call disable card; otherwise, enable expansion</p>\n",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "disableCard",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 175,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDisable and expand the card\n",
                    "description": "<p>Disable and expand the card</p>\n",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "ngAfterContentChecked",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "validate",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 119,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nChecks if the form is valid (title is required)\n",
                    "description": "<p>Checks if the form is valid (title is required)</p>\n"
                },
                {
                    "name": "validateDescription",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 125,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "validateTitle",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 140,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  OnInit,\n  Input,\n  Output,\n  EventEmitter,\n  AfterContentChecked,\n  ChangeDetectorRef\n} from '@angular/core';\nimport { Metadata } from 'src/app/models/mock-definition/metadata.model';\nimport { NGXLogger } from 'ngx-logger';\n\n@Component({\n  selector: 'app-add-metadata',\n  templateUrl: './add-metadata.component.html',\n  styleUrls: ['./add-metadata.component.scss']\n})\nexport class AddMetadataComponent implements OnInit, AfterContentChecked {\n  @Output() metadataOutput: EventEmitter<Metadata>;\n\n  metadataTitleProp: string;\n  metadataDescriptionProp: string;\n\n  titleErrorMessage: string;\n  descriptionErrorMessage: string;\n\n  isCardDisabled: boolean;\n  panelExpanded: boolean;\n\n  constructor(private logger: NGXLogger, private cdRef: ChangeDetectorRef) {\n    this.metadataOutput = new EventEmitter<Metadata>();\n    this.metadataTitleProp = '';\n    this.metadataDescriptionProp = '';\n    this.titleErrorMessage = '';\n    this.descriptionErrorMessage = '';\n  }\n\n  ngOnInit() {}\n\n  ngAfterContentChecked(): void {\n    this.cdRef.detectChanges();\n  }\n\n  /**\n   * Sets the metadata title\n   */\n  @Input()\n  set metadataTitle(metadataTitle: string) {\n    if (metadataTitle !== undefined) {\n      this.logger.debug('Set the metadata title', metadataTitle);\n      this.metadataTitleProp = metadataTitle;\n      this.validate();\n    }\n  }\n\n  /**\n   * Gets the metadata title\n   */\n  get metadataTitle() {\n    return this.metadataTitleProp;\n  }\n\n  /**\n   * Sets the metadata description\n   */\n  @Input()\n  set metadataDescription(metadataDescription: string) {\n    if (metadataDescription !== undefined) {\n      this.logger.debug('Set the metadata description', metadataDescription);\n      this.metadataDescriptionProp = metadataDescription;\n      this.validateDescription();\n    }\n  }\n\n  /**\n   * Gets the metadata description\n   */\n  get metadataDescription() {\n    return this.metadataDescriptionProp;\n  }\n\n  /**\n   * Sets the metadata\n   * @param metadata The metadata to set\n   */\n  @Input()\n  set metadata(metadata: Metadata) {\n    if (!!metadata) {\n      this.metadataTitle = metadata.title;\n      this.metadataDescription = metadata.description;\n    }\n  }\n\n  /**\n   * Emits the form validity and the metadata output when the form is saved\n   */\n  @Input()\n  set saveStatus(shouldSave: boolean) {\n    if (shouldSave && this.titleErrorMessage.length < 1) {\n      if (this.metadataTitleProp && this.metadataTitleProp.length > 0) {\n        const metadataToOutput = {\n          title: this.metadataTitle,\n          description: this.metadataDescription\n        } as Metadata;\n        this.logger.debug(\n          'AddMetadataComponent:saveStatus: Emit metadata',\n          metadataToOutput\n        );\n        this.metadataOutput.emit(metadataToOutput);\n      } else {\n        this.validate();\n      }\n    }\n  }\n\n  /**\n   * Checks if the form is valid (title is required)\n   */\n  validate() {\n    this.validateTitle();\n    this.validateDescription();\n    this.checkStatus();\n  }\n\n  private validateDescription() {\n    if (\n      !!this.metadataDescriptionProp &&\n      this.metadataDescriptionProp.length > 500\n    ) {\n      this.logger.debug(\n        'AddMetadataComponent:validateDescription: Description is longer than 500 characters'\n      );\n      this.descriptionErrorMessage =\n        'Metadata description can only be 500 characters long';\n    } else {\n      this.descriptionErrorMessage = '';\n    }\n  }\n\n  private validateTitle() {\n    if (\n      this.metadataTitleProp.length > 0 &&\n      this.metadataTitleProp.trim().length === 0\n    ) {\n      this.titleErrorMessage = 'Scenario title cannot contain only whitespace';\n    } else if (!this.metadataTitleProp || this.metadataTitleProp.length === 0) {\n      this.logger.debug(\n        'AddMetadataComponent:validateTitle: Title is null or empty'\n      );\n      this.titleErrorMessage = 'Metadata title is required';\n    } else if (this.metadataTitleProp.length > 50) {\n      this.logger.debug(\n        'AddMetadataComponent:validateTitle: Title is longer than 50 characters'\n      );\n      this.titleErrorMessage =\n        'Metadata title max length exceeded (50 characters)';\n    } else {\n      this.titleErrorMessage = '';\n    }\n  }\n  /**\n   * Check if current response is valid or not.\n   * If not valid, call disable card; otherwise, enable expansion\n   */\n  private checkStatus() {\n    if (this.titleErrorMessage.length < 1) {\n      this.isCardDisabled = false;\n    } else {\n      this.disableCard();\n    }\n  }\n  /**\n   * Disable and expand the card\n   */\n  private disableCard() {\n    this.logger.debug(\n      'AddMetadataComponent:disableCard: Disable and expand card'\n    );\n    this.isCardDisabled = true;\n    this.panelExpanded = true;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".fullwidth {\n  width: 100%;\n}\n",
                    "styleUrl": "./add-metadata.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "logger",
                        "type": "NGXLogger",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cdRef",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 28,
                "jsdoctags": [
                    {
                        "name": "logger",
                        "type": "NGXLogger",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cdRef",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "AfterContentChecked"
            ],
            "accessors": {
                "metadataTitle": {
                    "name": "metadataTitle",
                    "setSignature": {
                        "name": "metadataTitle",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "metadataTitle",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 48,
                        "rawdescription": "Sets the metadata title",
                        "description": "<p>Sets the metadata title</p>\n",
                        "jsdoctags": [
                            {
                                "name": "metadataTitle",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "metadataTitle",
                        "type": "",
                        "returnType": "",
                        "line": 59,
                        "rawdescription": "Gets the metadata title",
                        "description": "<p>Gets the metadata title</p>\n"
                    }
                },
                "metadataDescription": {
                    "name": "metadataDescription",
                    "setSignature": {
                        "name": "metadataDescription",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "metadataDescription",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 67,
                        "rawdescription": "Sets the metadata description",
                        "description": "<p>Sets the metadata description</p>\n",
                        "jsdoctags": [
                            {
                                "name": "metadataDescription",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "metadataDescription",
                        "type": "",
                        "returnType": "",
                        "line": 78,
                        "rawdescription": "Gets the metadata description",
                        "description": "<p>Gets the metadata description</p>\n"
                    }
                },
                "metadata": {
                    "name": "metadata",
                    "setSignature": {
                        "name": "metadata",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "metadata",
                                "type": "Metadata",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 87,
                        "rawdescription": "Sets the metadata",
                        "description": "<p>Sets the metadata</p>\n",
                        "jsdoctags": [
                            {
                                "name": {
                                    "pos": 1966,
                                    "end": 1974,
                                    "flags": 4227072,
                                    "modifierFlagsCache": 0,
                                    "transformFlags": 0,
                                    "kind": 79,
                                    "escapedText": "metadata"
                                },
                                "type": "Metadata",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "pos": 1960,
                                    "end": 1965,
                                    "flags": 4227072,
                                    "modifierFlagsCache": 0,
                                    "transformFlags": 0,
                                    "kind": 79,
                                    "escapedText": "param"
                                },
                                "comment": "<p>The metadata to set</p>\n"
                            }
                        ]
                    }
                },
                "saveStatus": {
                    "name": "saveStatus",
                    "setSignature": {
                        "name": "saveStatus",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "shouldSave",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 98,
                        "rawdescription": "Emits the form validity and the metadata output when the form is saved",
                        "description": "<p>Emits the form validity and the metadata output when the form is saved</p>\n",
                        "jsdoctags": [
                            {
                                "name": "shouldSave",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            },
            "templateData": "<mat-accordion>\n  <mat-expansion-panel\n    [disabled]=\"this.isCardDisabled\"\n    [expanded]=\"this.panelExpanded\"\n  >\n    <mat-expansion-panel-header class=\"right-aligned-header\">\n      <mat-panel-title>\n        Metadata\n      </mat-panel-title>\n    </mat-expansion-panel-header>\n    <mat-form-field class=\"fullwidth\">\n      <input [(ngModel)]=\"this.metadataTitle\" matInput placeholder=\"Name\" />\n    </mat-form-field>\n    <mat-form-field class=\"fullwidth\">\n      <input\n        [(ngModel)]=\"this.metadataDescription\"\n        matInput\n        placeholder=\"Description\"\n      />\n    </mat-form-field>\n    <div class=\"error-message\" *ngIf=\"this.titleErrorMessage.length > 0\">\n      {{ this.titleErrorMessage }}\n    </div>\n    <div class=\"error-message\" *ngIf=\"this.descriptionErrorMessage.length > 0\">\n      {{ this.descriptionErrorMessage }}\n    </div>\n  </mat-expansion-panel>\n</mat-accordion>\n"
        },
        {
            "name": "AddRequestMatchRuleComponent",
            "id": "component-AddRequestMatchRuleComponent-4719b64e259e6d90c477b3921abc6675",
            "file": "src/app/components/scenario-editor/add-request-match-rule/add-request-match-rule.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-add-request-match-rule",
            "styleUrls": [
                "./add-request-match-rule.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./add-request-match-rule.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "requestMatchRule",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "RequestMatchRule"
                },
                {
                    "name": "requestMatchRuleFormGroup",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "FormGroup"
                },
                {
                    "name": "saveStatus",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 32,
                    "type": "boolean"
                }
            ],
            "outputsClass": [
                {
                    "name": "requestMatchRuleOutput",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "EventEmitter<RequestMatchRule>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "bodyMatchRules",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BodyRule[]",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "isCardDisabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "panelExpanded",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "shouldSave",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\nimport { RequestMatchRule } from 'src/app/models/mock-definition/scenario/request-match-rule.model';\nimport { BodyRule } from 'src/app/models/mock-definition/scenario/body-rule.model';\nimport { FormGroup } from '@angular/forms';\n\n@Component({\n  selector: 'app-add-request-match-rule',\n  templateUrl: './add-request-match-rule.component.html',\n  styleUrls: ['./add-request-match-rule.component.scss']\n})\nexport class AddRequestMatchRuleComponent implements OnInit {\n  @Input() requestMatchRule: RequestMatchRule;\n  @Output() requestMatchRuleOutput: EventEmitter<RequestMatchRule>;\n  @Input() requestMatchRuleFormGroup: FormGroup;\n\n  bodyMatchRules: BodyRule[];\n\n  shouldSave: boolean;\n  panelExpanded: boolean;\n  isCardDisabled: boolean;\n  constructor() {\n    this.requestMatchRuleOutput = new EventEmitter<RequestMatchRule>();\n    this.bodyMatchRules = [];\n  }\n\n  ngOnInit() {}\n\n  /*\n   * Sets the save status\n   */\n  @Input()\n  set saveStatus(save: boolean) {\n    this.shouldSave = save;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "::ng-deep mat-expansion-panel {\n  padding: 16px;\n}\n\n::ng-deep mat-panel-description {\n  font-size: 0.85em;\n}\n",
                    "styleUrl": "./add-request-match-rule.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 20
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "saveStatus": {
                    "name": "saveStatus",
                    "setSignature": {
                        "name": "saveStatus",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "save",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 32,
                        "jsdoctags": [
                            {
                                "name": "save",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            },
            "templateData": "<mat-accordion>\n  <mat-expansion-panel [disabled]=\"this.isCardDisabled\" [expanded]=\"this.panelExpanded\">\n    <mat-expansion-panel-header class=\"right-aligned-header\">\n      <mat-panel-title>\n        Request Match Rules\n      </mat-panel-title>\n      <mat-panel-description\n        >Query Match Rules, Header Match Rules, Url Match Rules and Body Match Rules</mat-panel-description\n      >\n    </mat-expansion-panel-header>\n    <mat-accordion>\n      <mat-expansion-panel class=\"mat-elevation-z0\">\n        <mat-expansion-panel-header class=\"right-aligned-header\">\n          <mat-panel-title>\n            Header Match Rules\n          </mat-panel-title>\n          <mat-divider></mat-divider>\n        </mat-expansion-panel-header>\n        <app-kvp-edit-rule\n          [addKvpTitle]=\"'Add New Header Match Rule'\"\n          [matchRuleFormArray]=\"this.requestMatchRuleFormGroup.controls.headerMatchRules\"\n        >\n        </app-kvp-edit-rule>\n      </mat-expansion-panel>\n    </mat-accordion>\n    <mat-accordion>\n      <mat-expansion-panel class=\"mat-elevation-z0\">\n        <mat-expansion-panel-header class=\"right-aligned-header\">\n          <mat-panel-title>\n            Query Match Rules\n          </mat-panel-title>\n          <mat-divider></mat-divider>\n        </mat-expansion-panel-header>\n        <app-kvp-edit-rule\n          [addKvpTitle]=\"'Add New Query Match Rule'\"\n          [matchRuleFormArray]=\"this.requestMatchRuleFormGroup.controls.queryMatchRules\"\n        >\n        </app-kvp-edit-rule>\n      </mat-expansion-panel>\n    </mat-accordion>\n    <mat-accordion>\n      <mat-expansion-panel class=\"mat-elevation-z0\">\n        <mat-expansion-panel-header class=\"right-aligned-header\">\n          <mat-panel-title>\n            Url Match Rules\n          </mat-panel-title>\n          <mat-divider></mat-divider>\n        </mat-expansion-panel-header>\n        <app-url-edit-rule [urlMatchRuleFormArray]=\"this.requestMatchRuleFormGroup.controls.urlMatchRules\">\n        </app-url-edit-rule>\n      </mat-expansion-panel>\n    </mat-accordion>\n    <mat-accordion>\n      <mat-expansion-panel class=\"mat-elevation-z0\">\n        <mat-expansion-panel-header class=\"right-aligned-header\">\n          <mat-panel-title>\n            Body Match Rules\n          </mat-panel-title>\n          <mat-divider></mat-divider>\n        </mat-expansion-panel-header>\n        <app-body-edit-rule [bodyMatchRuleFormArray]=\"this.requestMatchRuleFormGroup.controls.bodyMatchRules\">\n        </app-body-edit-rule>\n      </mat-expansion-panel>\n    </mat-accordion>\n  </mat-expansion-panel>\n</mat-accordion>\n"
        },
        {
            "name": "AddResponseComponent",
            "id": "component-AddResponseComponent-08ce0d5085a7a2ada593d6b1da30c0a7",
            "file": "src/app/components/scenario-editor/add-response/add-response.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-add-response",
            "styleUrls": [
                "./add-response.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./add-response.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "response",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 113,
                    "type": ""
                },
                {
                    "name": "responseFormGroup",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "FormGroup"
                },
                {
                    "name": "saveStatus",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "If shouldSave is true, validate the response and emit to the parent as well as the isValid boolean",
                    "description": "<p>If shouldSave is true, validate the response and emit to the parent as well as the isValid boolean</p>\n",
                    "line": 108,
                    "type": "boolean"
                }
            ],
            "outputsClass": [
                {
                    "name": "isValid",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "EventEmitter<boolean>"
                },
                {
                    "name": "responseOutput",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "EventEmitter<Response>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "bodyErrorMessage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>The error message for the body response</p>\n",
                    "line": 32,
                    "rawdescription": "\n\nThe error message for the body response\n"
                },
                {
                    "name": "headers",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Record<string | string>",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "isCardDisabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "panelExpanded",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 46
                },
                {
                    "name": "shadowType",
                    "defaultValue": "new FormControl()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormControl",
                    "optional": false,
                    "description": "",
                    "line": 49
                },
                {
                    "name": "shouldSave",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 47
                },
                {
                    "name": "statusMessage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p> The status message for the corresponding code</p>\n",
                    "line": 37,
                    "rawdescription": "\n\n The status message for the corresponding code\n"
                },
                {
                    "name": "titleForKvp",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>The titles for the kvp edit component</p>\n",
                    "line": 42,
                    "rawdescription": "\n\nThe titles for the kvp edit component\n"
                },
                {
                    "name": "titleForKvpAdded",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 43
                }
            ],
            "methodsClass": [
                {
                    "name": "checkStatus",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 161,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCheck if current response is valid or not.\nIf not valid, call disable card; otherwise, enable expansion\n",
                    "description": "<p>Check if current response is valid or not.\nIf not valid, call disable card; otherwise, enable expansion</p>\n",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "disableCard",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 172,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDisable and expand the card\n",
                    "description": "<p>Disable and expand the card</p>\n",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "ngAfterContentChecked",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 99,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 64,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "saveHeaders",
                    "args": [
                        {
                            "name": "map",
                            "type": "Record<string | string>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 137,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWait for header KVP , then trigger emitter if current response is valid\n",
                    "description": "<p>Wait for header KVP , then trigger emitter if current response is valid</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 3824,
                                "end": 3827,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "map"
                            },
                            "type": "Record<string | string>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 3818,
                                "end": 3823,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>Response KVP</p>\n"
                        }
                    ]
                },
                {
                    "name": "updateStatusCodeDescription",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 86,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nUpdates the status code's description (e.g. \"OK\" for 200)\n",
                    "description": "<p>Updates the status code&#39;s description (e.g. &quot;OK&quot; for 200)</p>\n",
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  OnInit,\n  Input,\n  Output,\n  EventEmitter,\n  ChangeDetectorRef,\n  AfterContentChecked\n} from '@angular/core';\nimport * as HttpStatus from 'http-status-codes';\nimport { Response } from '../../../models/mock-definition/scenario/response.model';\nimport { ValidJsonService } from 'src/app/services/valid-json/valid-json.service';\nimport { NGXLogger } from 'ngx-logger';\nimport { ResponseType } from 'src/app/models/mock-definition/scenario/response.type';\nimport { FormGroup, FormControl } from '@angular/forms';\n\n@Component({\n  selector: 'app-add-response',\n  templateUrl: './add-response.component.html',\n  styleUrls: ['./add-response.component.scss']\n})\nexport class AddResponseComponent implements OnInit, AfterContentChecked {\n  @Output() responseOutput: EventEmitter<Response>;\n  @Output() isValid: EventEmitter<boolean>;\n  @Input() responseFormGroup: FormGroup;\n\n  headers: Record<string, string> = {};\n\n  /**\n   * The error message for the body response\n   */\n  bodyErrorMessage: string;\n\n  /**\n   *  The status message for the corresponding code\n   */\n  statusMessage: string;\n\n  /**\n   * The titles for the kvp edit component\n   */\n  titleForKvp: string;\n  titleForKvpAdded: string;\n\n  isCardDisabled: boolean;\n  panelExpanded: boolean;\n  shouldSave: boolean;\n\n  shadowType: FormControl = new FormControl();\n\n  constructor(\n    private jsonService: ValidJsonService,\n    private logger: NGXLogger,\n    private cdRef: ChangeDetectorRef\n  ) {\n    this.responseOutput = new EventEmitter<Response>();\n    this.isValid = new EventEmitter<boolean>();\n    this.titleForKvp = 'Add New Header Rule';\n    this.titleForKvpAdded = 'Added Header Rules';\n    this.bodyErrorMessage = 'Body Content not in Valid JSON Format';\n    this.statusMessage = 'Enter a Status Code';\n  }\n\n  ngOnInit() {\n    this.updateStatusCodeDescription();\n\n    this.shadowType.setValue(this.responseFormGroup.controls.type.value === ResponseType.TEMPLATED);\n\n    this.responseFormGroup.controls.status.valueChanges.subscribe(() => {\n      this.updateStatusCodeDescription();\n    });\n\n    this.responseFormGroup.controls.body.valueChanges.subscribe(() => {\n      const newBody = this.responseFormGroup.controls.body.value;\n      if (newBody.length > 0 && this.jsonService.isValidJSON(newBody)) {\n        this.responseFormGroup.controls.body.setErrors(null);\n      } else {\n        this.responseFormGroup.controls.body.setErrors({invalidJson: 'Body is not valid JSON'});\n      }\n    });\n  }\n\n  /**\n   * Updates the status code's description (e.g. \"OK\" for 200)\n   */\n  private updateStatusCodeDescription() {\n    const newStatus = this.responseFormGroup.controls.status.value;\n    if (newStatus) {\n      try {\n        this.statusMessage = HttpStatus.getStatusText(Number(newStatus));\n        this.responseFormGroup.controls.status.setErrors(null);\n      } catch (Error) {\n        this.statusMessage = 'Enter a Status Code';\n        this.responseFormGroup.controls.status.setErrors({ invalidStatusCode: 'Status code not valid' });\n      }\n    }\n  }\n\n  ngAfterContentChecked(): void {\n    this.checkStatus();\n    this.cdRef.detectChanges();\n  }\n\n  /**\n   * If shouldSave is true, validate the response and emit to the parent as well as the isValid boolean\n   */\n  @Input()\n  set saveStatus(save: boolean) {\n    this.shouldSave = save;\n  }\n\n  @Input()\n  set response(newResponse: Response) {\n    if (newResponse) {\n      this.headers = newResponse.headers;\n    }\n  }\n\n  /**\n   * Gets the status code\n   */\n  get statusCode(): number {\n    return this.responseFormGroup.controls.status.value;\n  }\n\n  /**\n   * Sets the status code\n   */\n  set statusCode(newStatus: number) {\n    this.responseFormGroup.controls.status.setValue(newStatus);\n  }\n\n  /**\n   * Wait for header KVP , then trigger emitter if current response is valid\n   * @param map Response KVP\n   */\n  saveHeaders(map: Record<string, string>) {\n    const type = this.shadowType.value ? ResponseType.TEMPLATED : ResponseType.CUSTOM;\n    this.responseFormGroup.controls.type.setValue(type);\n\n    if (this.responseFormGroup.valid) {\n        const responseToEmit = {\n          headers: map,\n          body: this.responseFormGroup.controls.body.value,\n          status: +this.responseFormGroup.controls.status.value\n        } as Response;\n        this.logger.debug(\n          'AddResponseComponent:saveHeaders: Response has been emitted',\n          responseToEmit\n        );\n        this.responseOutput.emit(responseToEmit);\n    } else {\n      this.disableCard();\n    }\n  }\n\n  /**\n   * Check if current response is valid or not.\n   * If not valid, call disable card; otherwise, enable expansion\n   */\n  private checkStatus() {\n    if (this.responseFormGroup.valid) {\n      this.isCardDisabled = false;\n    } else {\n      this.disableCard();\n    }\n  }\n\n  /**\n   * Disable and expand the card\n   */\n  private disableCard() {\n    this.logger.debug(\n      'AddResponseComponent:disableCard: Disable and expand card'\n    );\n    this.isCardDisabled = true;\n    this.panelExpanded = true;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "%subtitle-text {\n  color: rgba(0, 0, 0, 0.539261);\n}\n.response-code {\n  display: flex;\n  flex-direction: row;\n}\n\n.response-dropdown {\n  min-width: 40vw;\n}\n\n.status-code {\n  @extend %subtitle-text;\n  display: flex;\n  flex-direction: column;\n}\n\n.status-code-field {\n  width: 6em;\n  color: rgba(0, 0, 0);\n}\n\n.status-message {\n  @extend %subtitle-text;\n  margin-left: 15em;\n  display: flex;\n  flex-direction: column;\n}\n\n.status-message-output {\n  color: rgba(0, 0, 0);\n  margin-top: 1em;\n}\n\n.response-body {\n  display: flex;\n  flex-direction: column;\n}\n\n.body-title {\n  @extend %subtitle-text;\n  padding-bottom: 1em;\n}\n\n.response-type {\n  @extend %subtitle-text;\n  padding-top: 1em;\n  padding-bottom: 1em;\n}\n\n#responseType {\n  padding-bottom: 1em;\n  width: 7em;\n}\n\n::ng-deep mat-expansion-panel {\n  padding: 16px;\n}\n\n::ng-deep mat-panel-description {\n  font-size: 0.85em;\n}\n\n::ng-deep .right-aligned-header .mat-content {\n  display: flex;\n  flex-direction: column;\n}\n\n.divider-padding {\n  margin-bottom: 1em;\n}",
                    "styleUrl": "./add-response.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "jsonService",
                        "type": "ValidJsonService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "logger",
                        "type": "NGXLogger",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cdRef",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 49,
                "jsdoctags": [
                    {
                        "name": "jsonService",
                        "type": "ValidJsonService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "logger",
                        "type": "NGXLogger",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cdRef",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "AfterContentChecked"
            ],
            "accessors": {
                "saveStatus": {
                    "name": "saveStatus",
                    "setSignature": {
                        "name": "saveStatus",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "save",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 108,
                        "rawdescription": "If shouldSave is true, validate the response and emit to the parent as well as the isValid boolean",
                        "description": "<p>If shouldSave is true, validate the response and emit to the parent as well as the isValid boolean</p>\n",
                        "jsdoctags": [
                            {
                                "name": "save",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "response": {
                    "name": "response",
                    "setSignature": {
                        "name": "response",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "newResponse",
                                "type": "Response",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 113,
                        "jsdoctags": [
                            {
                                "name": "newResponse",
                                "type": "Response",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "statusCode": {
                    "name": "statusCode",
                    "setSignature": {
                        "name": "statusCode",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "newStatus",
                                "type": "number",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 129,
                        "rawdescription": "Sets the status code",
                        "description": "<p>Sets the status code</p>\n",
                        "jsdoctags": [
                            {
                                "name": "newStatus",
                                "type": "number",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "statusCode",
                        "type": "number",
                        "returnType": "number",
                        "line": 122,
                        "rawdescription": "Gets the status code",
                        "description": "<p>Gets the status code</p>\n"
                    }
                }
            },
            "templateData": "<mat-accordion>\n  <mat-expansion-panel\n    class=\"response-dropdown\"\n    [disabled]=\"this.isCardDisabled\"\n    [expanded]=\"this.panelExpanded\"\n  >\n    <mat-expansion-panel-header class=\"right-aligned-header\">\n      <mat-panel-title>\n        Response\n      </mat-panel-title>\n      <mat-panel-description\n        >Response Header, Response Body, and Status Code</mat-panel-description\n      >\n    </mat-expansion-panel-header>\n     <div class=\"response-type\">Response Type</div>\n      <mat-checkbox [formControl]=\"shadowType\" id=\"shadowType\">\n        Templated\n      </mat-checkbox>\n      <form [formGroup]=\"this.responseFormGroup\">\n      <mat-divider class=\"divider-padding\"></mat-divider>\n      <div class=\"response-code\">\n        <div class=\"status-code\">\n          Status Code\n          <mat-form-field class=\"status-code-field\">\n            <input matInput class=\"status-code-input\" formControlName=\"status\" />\n          </mat-form-field>\n        </div>\n        <div class=\"status-message\">\n          Status Message\n          <div class=\"status-message-output\">\n            {{ statusMessage }}\n          </div>\n        </div>\n      </div>\n      <div class=\"error-message\" *ngIf=\"!!this.responseFormGroup.controls.status.errors\">\n        Invalid Status Code\n      </div>\n    <app-kvp-edit\n      [addKvpTitle]=\"titleForKvp\"\n      [listKvpTitle]=\"titleForKvpAdded\"\n      [isCaseSensitive]=\"false\"\n      [Save]=\"this.shouldSave\"\n      [kvp]=\"this.headers\"\n      (savedKvpEmitter)=\"saveHeaders($event)\"\n    ></app-kvp-edit>\n    <div class=\"response-body\">\n      <mat-form-field>\n        <div class=\"body-title\">Body</div>\n        <textarea matInput rows=\"10\" formControlName=\"body\"></textarea>\n      </mat-form-field>\n      <div class=\"error-message\" *ngIf=\"!!this.responseFormGroup.controls.body.errors\">\n        Body is not valid JSON\n      </div>\n    </div>\n  </form>\n  </mat-expansion-panel>\n</mat-accordion>\n"
        },
        {
            "name": "AppComponent",
            "id": "component-AppComponent-cdde1db6dc08f6dcbb28389e4f55a337",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".header {\n  background-color: #e0e0e0;\n  width: 100vw;\n  height: 7.529vh;\n  box-shadow: 0px 4px 4px rgba(0, 0, 0, 0.24), 0px 0px 4px rgba(0, 0, 0, 0.12);\n\n  h5 {\n    margin: 0;\n    font-weight: 500;\n    font-size: 1.5em;\n    line-height: 23px;\n    margin-left: 1.5em;\n  }\n}\n\n.content {\n  width: 100vw;\n  height: auto;\n  min-height: 100vh-7.529vh;\n}\n",
                    "styleUrl": "./app.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<div>\n  <div class=\"header row center-vt\">\n    <h5><a [routerLink]=\"['/']\"><img src=\"assets/Orbital_Logo.svg\" height=\"50%\" width=\"50%\" /></a></h5>\n  </div>\n  <div class=\"content row center-hr\">\n    <router-outlet></router-outlet>\n  </div>\n</div>\n"
        },
        {
            "name": "BodyAddRuleComponent",
            "id": "component-BodyAddRuleComponent-a0e033e79e85092f0b9082d92139dc43",
            "file": "src/app/components/scenario-editor/add-body-rule-edit/body-add-rule/body-add-rule.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-body-add-rule",
            "styleUrls": [
                "./body-add-rule.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./body-add-rule.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "bodyRuleAddedIsDuplicated",
                    "defaultValue": "new EventEmitter<boolean>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "any"
                }
            ],
            "outputsClass": [
                {
                    "name": "bodyRuleAddedEventEmitter",
                    "defaultValue": "new EventEmitter<BodyRule>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "bodyAddRuleFormGroup",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "bodyRuleInEdit",
                    "defaultValue": "defaultBodyRule",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "ruleIsDuplicated",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "rules",
                    "defaultValue": "[\n    { value: RuleType.JSONPATH, viewValue: 'JSON: Path' },\n    { value: RuleType.JSONSCHEMA, viewValue: 'JSON: Schema' },\n    { value: RuleType.JSONCONTAINS, viewValue: 'JSON: Contains' },\n    { value: RuleType.JSONEQUALITY, viewValue: 'JSON: Equality' },\n    { value: RuleType.TEXTCONTAINS, viewValue: 'Text: Contains' },\n    { value: RuleType.TEXTENDSWITH, viewValue: 'Text: Ends With' },\n    { value: RuleType.TEXTEQUALS, viewValue: 'Text: Equals' },\n    { value: RuleType.TEXTSTARTSWITH, viewValue: 'Text: Starts With' }\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        143
                    ]
                },
                {
                    "name": "subscriptions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription[]",
                    "optional": false,
                    "description": "<p>Stores the subscriptions that will be destroyed during OnDestroy</p>\n",
                    "line": 17,
                    "rawdescription": "\n\nStores the subscriptions that will be destroyed during OnDestroy\n",
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "addBodyRule",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 85,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nControls the logic for emitting a new addBodyRule event\n",
                    "description": "<p>Controls the logic for emitting a new addBodyRule event</p>\n"
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 94,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nImplementation for NG On Destroy\n",
                    "description": "<p>Implementation for NG On Destroy</p>\n"
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, EventEmitter, Output, OnDestroy, Input } from '@angular/core';\nimport { RuleType } from 'src/app/models/mock-definition/scenario/rule.type';\nimport { FormGroup, AbstractControl } from '@angular/forms';\nimport { Subscription } from 'rxjs';\nimport { BodyRule, defaultBodyRule } from 'src/app/models/mock-definition/scenario/body-rule.model';\nimport { AddBodyRuleBuilder } from '../add-body-rule-builder/add-body-rule.builder';\n\n@Component({\n  selector: 'app-body-add-rule',\n  templateUrl: './body-add-rule.component.html',\n  styleUrls: ['./body-add-rule.component.scss']\n})\nexport class BodyAddRuleComponent implements OnInit, OnDestroy {\n  /**\n   * Stores the subscriptions that will be destroyed during OnDestroy\n   */\n  private subscriptions: Subscription[] = [];\n  private bodyRuleInEdit = defaultBodyRule;\n  private ruleIsDuplicated = false;\n\n  @Input() bodyRuleAddedIsDuplicated = new EventEmitter<boolean>();\n  @Output() bodyRuleAddedEventEmitter = new EventEmitter<BodyRule>();\n\n  readonly rules = [\n    { value: RuleType.JSONPATH, viewValue: 'JSON: Path' },\n    { value: RuleType.JSONSCHEMA, viewValue: 'JSON: Schema' },\n    { value: RuleType.JSONCONTAINS, viewValue: 'JSON: Contains' },\n    { value: RuleType.JSONEQUALITY, viewValue: 'JSON: Equality' },\n    { value: RuleType.TEXTCONTAINS, viewValue: 'Text: Contains' },\n    { value: RuleType.TEXTENDSWITH, viewValue: 'Text: Ends With' },\n    { value: RuleType.TEXTEQUALS, viewValue: 'Text: Equals' },\n    { value: RuleType.TEXTSTARTSWITH, viewValue: 'Text: Starts With' }\n  ];\n\n  bodyAddRuleFormGroup: FormGroup;\n\n  constructor(private addBodyRuleBuilder: AddBodyRuleBuilder) {}\n  ngOnInit() {\n    const bodyDuplicatedSubscription = this.bodyRuleAddedIsDuplicated.subscribe(\n      isDuplicated => (this.ruleIsDuplicated = isDuplicated)\n    );\n\n    this.bodyAddRuleFormGroup = this.addBodyRuleBuilder.createNewBodyRuleForm();\n    this.bodyAddRuleFormGroup.controls.rule.setValue('');\n    this.bodyRuleInEdit.rule = this.bodyAddRuleFormGroup.controls.rule.value;\n    this.bodyRuleInEdit.type = this.bodyAddRuleFormGroup.controls.type.value;\n\n    const ruleSubscription = this.bodyAddRuleFormGroup.get('rule').valueChanges.subscribe(rule => {\n      this.ruleIsDuplicated = false;\n      this.bodyRuleInEdit.rule = rule;\n    });\n\n    const typeSubscription = this.bodyAddRuleFormGroup.get('type').valueChanges.subscribe(type => {\n      this.ruleIsDuplicated = false;\n      this.bodyRuleInEdit.type = type;\n    });\n\n    this.subscriptions.push(ruleSubscription, typeSubscription, bodyDuplicatedSubscription);\n  }\n\n  /**\n   *\n   * Gets the boolean indicating if the rule to be added is duplicated.\n   */\n  get isRuleDuplicated(): boolean {\n    return this.ruleIsDuplicated;\n  }\n  /**\n   * Gets the form control for the 'rule'\n   */\n  get rule(): AbstractControl {\n    return this.bodyAddRuleFormGroup.get('rule');\n  }\n\n  /**\n   * Gets the form control for the 'type'\n   */\n  get type(): AbstractControl {\n    return this.bodyAddRuleFormGroup.get('type');\n  }\n\n  /**\n   * Controls the logic for emitting a new addBodyRule event\n   */\n  addBodyRule(): void {\n    if (this.bodyAddRuleFormGroup.valid) {\n      this.bodyRuleAddedEventEmitter.emit(this.bodyRuleInEdit);\n    }\n  }\n\n  /**\n   * Implementation for NG On Destroy\n   */\n  ngOnDestroy(): void {\n    this.subscriptions.forEach(subscription => {\n      subscription.unsubscribe();\n    });\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".body-add {\n  display: flex;\n  justify-content: space-between;\n  align-items: top;\n}\n\n.add-button {\n  margin-right: 1.3em;\n}\n\n.body-value {\n  width: 100%;\n  padding-left: 3em;\n  padding-right: 3em;\n}\n\n.error-message {\n  padding-left: 1.6em;\n}\n\n.row {\n  display: flex;\n  justify-content: space-between;\n  width: 100%;\n  align-items: top;\n}\n\n#bodyaddrule {\n  height: 12em;\n  width: 100%;\n}\n",
                    "styleUrl": "./body-add-rule.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "addBodyRuleBuilder",
                        "type": "AddBodyRuleBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 35,
                "jsdoctags": [
                    {
                        "name": "addBodyRuleBuilder",
                        "type": "AddBodyRuleBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "accessors": {
                "isRuleDuplicated": {
                    "name": "isRuleDuplicated",
                    "getSignature": {
                        "name": "isRuleDuplicated",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 65,
                        "rawdescription": "\nGets the boolean indicating if the rule to be added is duplicated.",
                        "description": "<p>Gets the boolean indicating if the rule to be added is duplicated.</p>\n"
                    }
                },
                "rule": {
                    "name": "rule",
                    "getSignature": {
                        "name": "rule",
                        "type": "",
                        "returnType": "AbstractControl",
                        "line": 71,
                        "rawdescription": "Gets the form control for the 'rule'",
                        "description": "<p>Gets the form control for the &#39;rule&#39;</p>\n"
                    }
                },
                "type": {
                    "name": "type",
                    "getSignature": {
                        "name": "type",
                        "type": "",
                        "returnType": "AbstractControl",
                        "line": 78,
                        "rawdescription": "Gets the form control for the 'type'",
                        "description": "<p>Gets the form control for the &#39;type&#39;</p>\n"
                    }
                }
            },
            "templateData": "<mat-card class=\"body-add-card\">\n  <mat-card-content>\n    <form class=\"body-add\" [formGroup]=\"bodyAddRuleFormGroup\">\n      <div class=\"row\">\n        <mat-form-field class=\"body-type\">\n          <mat-label>Select Rule</mat-label>\n          <mat-select formControlName=\"type\" name=\"rules\">\n            <mat-option *ngFor=\"let r of rules\" [value]=\"r.value\">\n              {{ r.viewValue }}\n            </mat-option>\n          </mat-select>\n        </mat-form-field>\n        <mat-form-field class=\"body-value\">\n          <mat-label>Value</mat-label>\n          <textarea matInput id=\"bodyaddrule\" formControlName=\"rule\"></textarea>\n        </mat-form-field>\n        <button mat-mini-fab class=\"add-button\" color=\"primary\" (click)=\"addBodyRule()\">\n          <mat-icon>add</mat-icon>\n        </button>\n      </div>\n    </form>\n\n    <div *ngIf=\"rule.invalid && (rule.dirty || rule.touched)\">\n      <mat-error *ngIf=\"rule.errors.required\">\n        Body rule is required\n      </mat-error>\n      <mat-error *ngIf=\"rule.errors.invalidJson\">\n        Body rule must be valid JSON\n      </mat-error>\n    </div>\n\n    <div *ngIf=\"type.invalid && (type.dirty || type.touched)\">\n      <mat-error *ngIf=\"type.errors.required\">\n        Body rule type is required\n      </mat-error>\n    </div>\n    <div *ngIf=\"this.isRuleDuplicated\">\n      <mat-error>\n        Rule already exists\n      </mat-error>\n    </div>\n  </mat-card-content>\n</mat-card>\n"
        },
        {
            "name": "BodyEditRuleComponent",
            "id": "component-BodyEditRuleComponent-4c5fad6c0d357e65381613bd584ca9fa",
            "file": "src/app/components/scenario-editor/add-body-rule-edit/body-edit-rule.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-body-edit-rule",
            "styleUrls": [
                "./body-edit-rule.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./body-edit-rule.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "bodyMatchRuleFormArray",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "FormArray"
                }
            ],
            "outputsClass": [
                {
                    "name": "bodyRuleIsDuplicated",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "EventEmitter<boolean>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "subscriptions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription[]",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "addBodyEditRuleHandler",
                    "args": [
                        {
                            "name": "bodyRule",
                            "type": "BodyRule",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThis method listens to the event emitter from the child component and adds the body rule into the list\n",
                    "description": "<p>This method listens to the event emitter from the child component and adds the body rule into the list</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1630,
                                "end": 1638,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "bodyRule"
                            },
                            "type": "BodyRule",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1624,
                                "end": 1629,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>The body rule being taken in from the child component to be added</p>\n"
                        }
                    ]
                },
                {
                    "name": "checkForDuplicates",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 83,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n\nDouble check to confirm there are no duplicates in the list of existing body rules\n",
                    "description": "<p>Double check to confirm there are no duplicates in the list of existing body rules</p>\n",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "deleteBodyEditRuleHandler",
                    "args": [
                        {
                            "name": "indexPosition",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThis method listens to the event emitter from the child component and deletes the body rule from the list\n",
                    "description": "<p>This method listens to the event emitter from the child component and deletes the body rule from the list</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2400,
                                "end": 2413,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "indexPosition"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2394,
                                "end": 2399,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>The body rule being taken in from the child component to be deleted</p>\n"
                        }
                    ]
                },
                {
                    "name": "isBodyRuleDuplicate",
                    "args": [
                        {
                            "name": "bodyRuleToAdd",
                            "type": "BodyRule",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nChecks if the body rule is inside the current form array\n",
                    "description": "<p>Checks if the body rule is inside the current form array</p>\n",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2767,
                                "end": 2780,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "bodyRuleToAdd"
                            },
                            "type": "BodyRule",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2761,
                                "end": 2766,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>the body rule to check against the existing list</p>\n"
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 112,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nImplementation for NG On Destroy\n",
                    "description": "<p>Implementation for NG On Destroy</p>\n"
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, OnDestroy, Output, EventEmitter, Input } from '@angular/core';\nimport { NGXLogger } from 'ngx-logger';\nimport { Subscription } from 'rxjs';\nimport { FormArray, FormGroup } from '@angular/forms';\nimport { AddBodyRuleBuilder } from './add-body-rule-builder/add-body-rule.builder';\nimport { RuleType } from 'src/app/models/mock-definition/scenario/rule.type';\nimport { BodyRule } from 'src/app/models/mock-definition/scenario/body-rule.model';\nimport { ValidJsonService } from 'src/app/services/valid-json/valid-json.service';\n\n@Component({\n  selector: 'app-body-edit-rule',\n  templateUrl: './body-edit-rule.component.html',\n  styleUrls: ['./body-edit-rule.component.scss']\n})\nexport class BodyEditRuleComponent implements OnInit, OnDestroy {\n  private subscriptions: Subscription[] = [];\n\n  @Output() bodyRuleIsDuplicated: EventEmitter<boolean>;\n  @Input() bodyMatchRuleFormArray: FormArray;\n  constructor(private logger: NGXLogger, private formbuilder: AddBodyRuleBuilder, private validJsonService: ValidJsonService) {\n    this.bodyRuleIsDuplicated = new EventEmitter<boolean>();\n    this.bodyRuleIsDuplicated.emit(false);\n  }\n\n  ngOnInit(): void {\n    const bodyMatchRuleFormArraySubscription = this.bodyMatchRuleFormArray.valueChanges.subscribe(() => {\n      this.logger.debug('BodyEditRuleComponent checking for duplicate rules : ', this.bodyMatchRuleFormArray);\n      this.checkForDuplicates();\n    });\n    this.subscriptions.push(bodyMatchRuleFormArraySubscription);\n  }\n\n  /**\n   * This method listens to the event emitter from the child component and adds the body rule into the list\n   * @param bodyRule The body rule being taken in from the child component to be added\n   */\n  addBodyEditRuleHandler(bodyRule: BodyRule) {\n    const ruleFound = this.isBodyRuleDuplicate(bodyRule);\n    if (!ruleFound && this.bodyMatchRuleFormArray.valid) {\n      this.bodyRuleIsDuplicated.emit(false);\n      const index = this.bodyMatchRuleFormArray.length;\n      const newBodyRuleControl = this.formbuilder.createBodyRuleForm(bodyRule);\n      this.bodyMatchRuleFormArray.insert(index, newBodyRuleControl);\n      this.logger.debug('BodyEditRuleComponent new rule added : ', bodyRule);\n    } else {\n      this.bodyRuleIsDuplicated.emit(true);\n    }\n  }\n\n  /**\n   * This method listens to the event emitter from the child component and deletes the body rule from the list\n   * @param indexPosition The body rule being taken in from the child component to be deleted\n   */\n  deleteBodyEditRuleHandler(indexPosition: number) {\n    this.bodyMatchRuleFormArray.removeAt(indexPosition);\n    this.logger.debug('Delete rule Rule from body list at index: ', indexPosition);\n  }\n\n  /**\n   * Checks if the body rule is inside the current form array\n   * @param bodyRuleToAdd the body rule to check against the existing list\n   */\n  private isBodyRuleDuplicate(bodyRuleToAdd: BodyRule): boolean {\n    interface BodyRuleFormGroup {\n      rule: string;\n      type: number;\n    }\n\n    return this.bodyMatchRuleFormArray.controls\n      .map(group => {\n        return (group as FormGroup).getRawValue() as BodyRuleFormGroup;\n      })\n      .some(bodyFormGroup => {\n        return bodyFormGroup.rule === (typeof(bodyRuleToAdd.rule) === 'object' ? JSON.stringify(bodyRuleToAdd.rule) : bodyRuleToAdd.rule)\n            && bodyFormGroup.type === bodyRuleToAdd.type;\n      });\n  }\n\n  /**\n   *\n   * Double check to confirm there are no duplicates in the list of existing body rules\n   */\n  private checkForDuplicates(): void {\n    this.bodyMatchRuleFormArray.setErrors(null);\n    this.bodyMatchRuleFormArray.markAsUntouched();\n    interface BodyRuleFormGroup {\n      rule: string;\n      type: RuleType;\n    }\n    const bodyRules = this.bodyMatchRuleFormArray.controls.map(group => {\n      return (group as FormGroup).getRawValue() as BodyRuleFormGroup;\n    });\n    bodyRules.forEach((bodyToCheck, indexToCheck) => {\n      bodyRules.forEach((bodyToCheckAgainst, indexToCheckAgainst) => {\n        const foundDuplicate =\n          bodyToCheck.rule === bodyToCheckAgainst.rule &&\n          bodyToCheck.type === bodyToCheckAgainst.type &&\n          indexToCheck !== indexToCheckAgainst;\n        if (foundDuplicate) {\n          (this.bodyMatchRuleFormArray.at(indexToCheck) as FormGroup).get('rule').markAsTouched();\n          (this.bodyMatchRuleFormArray.at(indexToCheck) as FormGroup).get('type').markAsTouched();\n          (this.bodyMatchRuleFormArray.at(indexToCheckAgainst) as FormGroup).get('rule').markAsTouched();\n          (this.bodyMatchRuleFormArray.at(indexToCheckAgainst) as FormGroup).get('type').markAsTouched();\n          this.bodyMatchRuleFormArray.setErrors({ duplicated: true });\n        }\n      });\n    });\n  }\n  /**\n   * Implementation for NG On Destroy\n   */\n  ngOnDestroy(): void {\n    this.subscriptions.forEach(subscription => {\n      subscription.unsubscribe();\n    });\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "mat-expansion-panel {\n  box-shadow: none !important;\n  border: 0 !important;\n}\n\np.description {\n  font-family: Roboto;\n  font-style: normal;\n  font-weight: normal;\n  font-size: 1em;\n  color: rgba(0, 0, 0, 0.539261);\n}\n\n.divider-padding {\n  margin-top: 1em;\n}\n\n.body-edit-rule {\n  display: flex;\n  flex-direction: column;\n}\n\n.add-rule {\n  padding-bottom: 1em;\n}\n",
                    "styleUrl": "./body-edit-rule.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "logger",
                        "type": "NGXLogger",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "formbuilder",
                        "type": "AddBodyRuleBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "validJsonService",
                        "type": "ValidJsonService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 19,
                "jsdoctags": [
                    {
                        "name": "logger",
                        "type": "NGXLogger",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "formbuilder",
                        "type": "AddBodyRuleBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "validJsonService",
                        "type": "ValidJsonService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<p class=\"description\">Add New Body Match Rule</p>\n\n<div class=\"body-edit-rule\">\n  <mat-divider class=\"divider-padding\"></mat-divider>\n  <app-body-add-rule\n    class=\"add-rule\"\n    (bodyRuleAddedEventEmitter)=\"addBodyEditRuleHandler($event)\"\n    [bodyRuleAddedIsDuplicated]=\"this.bodyRuleIsDuplicated\"\n  ></app-body-add-rule>\n</div>\n\n<ng-template [ngIf]=\"this.bodyMatchRuleFormArray.controls.length\" [ngIfElse]=\"noRulesAdded\">\n  <div *ngFor=\"let bodyruleform of bodyMatchRuleFormArray.controls; let i = index\">\n    <app-body-list-item-rule-type\n      [bodyEditRuleFormGroup]=\"bodyruleform\"\n      (bodyRuleRemovedEventEmitter)=\"deleteBodyEditRuleHandler(i)\"\n    ></app-body-list-item-rule-type>\n  </div>\n</ng-template>\n\n<ng-template #noRulesAdded>\n  No body rules added\n</ng-template>\n"
        },
        {
            "name": "BodyListItemRuleTypeComponent",
            "id": "component-BodyListItemRuleTypeComponent-e28ac2d1b18d69bb8024adcc4b76f483",
            "file": "src/app/components/scenario-editor/add-body-rule-edit/body-list-item-rule-type/body-list-item-rule-type.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-body-list-item-rule-type",
            "styleUrls": [
                "./body-list-item-rule-type.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./body-list-item-rule-type.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "bodyEditRuleFormGroup",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "FormGroup"
                }
            ],
            "outputsClass": [
                {
                    "name": "bodyRuleRemovedEventEmitter",
                    "defaultValue": "new EventEmitter<BodyRule>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe body rule to be deleted by the parent\n",
                    "description": "<p>The body rule to be deleted by the parent</p>\n",
                    "line": 27,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "rules",
                    "defaultValue": "[\n    { value: RuleType.JSONPATH, viewValue: 'JSON: Path' },\n    { value: RuleType.JSONCONTAINS, viewValue: 'JSON: Contains' },\n    { value: RuleType.JSONEQUALITY, viewValue: 'JSON: Equality' },\n    { value: RuleType.TEXTCONTAINS, viewValue: 'Text: Contains' },\n    { value: RuleType.TEXTENDSWITH, viewValue: 'Text: Ends With' },\n    { value: RuleType.TEXTEQUALS, viewValue: 'Text: Equals' },\n    { value: RuleType.TEXTSTARTSWITH, viewValue: 'Text: Starts With' }\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        143
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onRemove",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nEmits a removes event with the body rule for the parent to remove\n",
                    "description": "<p>Emits a removes event with the body rule for the parent to remove</p>\n"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Output, EventEmitter, Input} from '@angular/core';\nimport { RuleType } from '../../../../models/mock-definition/scenario/rule.type';\nimport { FormGroup, AbstractControl } from '@angular/forms';\nimport { BodyRule } from 'src/app/models/mock-definition/scenario/body-rule.model';\n\n@Component({\n  selector: 'app-body-list-item-rule-type',\n  templateUrl: './body-list-item-rule-type.component.html',\n  styleUrls: ['./body-list-item-rule-type.component.scss']\n})\nexport class BodyListItemRuleTypeComponent implements OnInit {\n\n  readonly rules = [\n    { value: RuleType.JSONPATH, viewValue: 'JSON: Path' },\n    { value: RuleType.JSONCONTAINS, viewValue: 'JSON: Contains' },\n    { value: RuleType.JSONEQUALITY, viewValue: 'JSON: Equality' },\n    { value: RuleType.TEXTCONTAINS, viewValue: 'Text: Contains' },\n    { value: RuleType.TEXTENDSWITH, viewValue: 'Text: Ends With' },\n    { value: RuleType.TEXTEQUALS, viewValue: 'Text: Equals' },\n    { value: RuleType.TEXTSTARTSWITH, viewValue: 'Text: Starts With' }\n  ];\n\n  @Input() bodyEditRuleFormGroup: FormGroup;\n  /**\n   * The body rule to be deleted by the parent\n   */\n  @Output() bodyRuleRemovedEventEmitter = new EventEmitter<BodyRule>();\n\n  ngOnInit() {}\n\n  /**\n   * Gets the form control for the 'rule'\n   */\n  get rule(): AbstractControl {\n    return this.bodyEditRuleFormGroup.get('rule');\n  }\n\n  /**\n   * Gets the value from the current body rule type\n   */\n\n  get type(): AbstractControl {\n    return this.bodyEditRuleFormGroup.get('type');\n  }\n\n  /**\n   * Emits a removes event with the body rule for the parent to remove\n   */\n  onRemove() {\n    const removeRule = {\n      rule: { bodyrule: this.rule.value },\n      type: this.type.value\n    } as BodyRule;\n    this.bodyRuleRemovedEventEmitter.emit(removeRule);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".row {\n  display: flex;\n  justify-content: space-between;\n  width: 100%;\n}\n\n.mat-card {\n  padding: 0.75em;\n  min-width: 35vw;\n  margin-bottom: 1em;\n}\n\n.body-value {\n  flex: 1;\n  padding-right: 3vw;\n  padding-left: 3vw;\n  margin-top: -5em;\n}\n\n.delete-button {\n  background: none;\n  border: 0;\n}\n\n.delete-button-container {\n  display: flex;\n  padding-right: 1em;\n}\n\n.rule-type {\n  margin-right: 3.25em;\n}\n\n.error-message {\n  padding-left: 1.5em;\n  padding-top: 1em;\n}\n\n#bodyaddrule {\n  height: 12em;\n}\n",
                    "styleUrl": "./body-list-item-rule-type.component.scss"
                }
            ],
            "stylesData": "",
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "rule": {
                    "name": "rule",
                    "getSignature": {
                        "name": "rule",
                        "type": "",
                        "returnType": "AbstractControl",
                        "line": 34,
                        "rawdescription": "Gets the form control for the 'rule'",
                        "description": "<p>Gets the form control for the &#39;rule&#39;</p>\n"
                    }
                },
                "type": {
                    "name": "type",
                    "getSignature": {
                        "name": "type",
                        "type": "",
                        "returnType": "AbstractControl",
                        "line": 42,
                        "rawdescription": "Gets the value from the current body rule type",
                        "description": "<p>Gets the value from the current body rule type</p>\n"
                    }
                }
            },
            "templateData": "<mat-card class=\"body-add-card\">\n  <mat-card-content>\n    <form class=\"body-added-item\" [formGroup]=\"bodyEditRuleFormGroup\">\n      <div class=\"row\">\n        <mat-form-field class=\"body-type\">\n          <mat-label>Select Rule</mat-label>\n          <mat-select formControlName=\"type\">\n            <mat-option *ngFor=\"let rule of rules\" [value]=\"rule.value\">\n              {{ rule.viewValue }}\n            </mat-option>\n          </mat-select>\n        </mat-form-field>\n\n        <mat-form-field class=\"body-value\">\n          <input matInput id=\"bodyaddrule\" formControlName=\"rule\" />\n        </mat-form-field>\n\n        <div class=\"delete-button-container\">\n          <button class=\"delete-button\" (click)=\"onRemove()\">\n            <mat-icon>close</mat-icon>\n          </button>\n        </div>\n      </div>\n    </form>\n\n    <div *ngIf=\"type.invalid && type.dirty\">\n      <mat-error *ngIf=\"type.errors.required\">\n        Body rule type is required\n      </mat-error>\n    </div>\n\n    <div *ngIf=\"rule.invalid && rule.dirty\">\n      <mat-error *ngIf=\"rule.errors.required\">\n        Body rule is required\n      </mat-error>\n      <mat-error *ngIf=\"rule.errors.invalidJson\">\n        Body rule must be valid JSON\n      </mat-error>\n    </div>\n    <div *ngIf=\"rule.touched && type.touched\">\n      <mat-error>\n        Rule is duplicated\n      </mat-error>\n    </div>\n  </mat-card-content>\n</mat-card>\n"
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-642c6c4e474cd5a0ac760dfda26b2fc9",
            "file": "src/stories/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-button",
            "styleUrls": [
                "./button.css"
            ],
            "styles": [],
            "template": "<button   type=\"button\"\n   (click)=\"onClick.emit($event)\"\n   [ngClass]=\"classes\"\n   [ngStyle]=\"{ 'background-color': backgroundColor }\"\n >\n   {{ label }}\n </button>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "What background color to use",
                    "description": "<p>What background color to use</p>\n",
                    "line": 26,
                    "type": "string"
                },
                {
                    "name": "label",
                    "defaultValue": "'Button'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 711,
                            "end": 724,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 322,
                            "tagName": {
                                "pos": 712,
                                "end": 720,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "required"
                            },
                            "comment": ""
                        }
                    ],
                    "rawdescription": "Button contents",
                    "description": "<p>Button contents</p>\n",
                    "line": 40,
                    "type": "string"
                },
                {
                    "name": "primary",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "Is this the principal call to action on the page?",
                    "description": "<p>Is this the principal call to action on the page?</p>\n",
                    "line": 20,
                    "type": "boolean"
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "How large should the button be?",
                    "description": "<p>How large should the button be?</p>\n",
                    "line": 32,
                    "type": "\"small\" | \"medium\" | \"large\""
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOptional click handler\n",
                    "description": "<p>Optional click handler</p>\n",
                    "line": 46,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-button',\n  template: ` <button\n    type=\"button\"\n    (click)=\"onClick.emit($event)\"\n    [ngClass]=\"classes\"\n    [ngStyle]=\"{ 'background-color': backgroundColor }\"\n  >\n    {{ label }}\n  </button>`,\n  styleUrls: ['./button.css'],\n})\nexport default class ButtonComponent {\n  /**\n   * Is this the principal call to action on the page?\n   */\n  @Input()\n  primary = false;\n\n  /**\n   * What background color to use\n   */\n  @Input()\n  backgroundColor?: string;\n\n  /**\n   * How large should the button be?\n   */\n  @Input()\n  size: 'small' | 'medium' | 'large' = 'medium';\n\n  /**\n   * Button contents\n   *\n   * @required\n   */\n  @Input()\n  label = 'Button';\n\n  /**\n   * Optional click handler\n   */\n  @Output()\n  onClick = new EventEmitter<Event>();\n\n  public get classes(): string[] {\n    const mode = this.primary ? 'storybook-button--primary' : 'storybook-button--secondary';\n\n    return ['storybook-button', `storybook-button--${this.size}`, mode];\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-button {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-weight: 700;\n  border: 0;\n  border-radius: 3em;\n  cursor: pointer;\n  display: inline-block;\n  line-height: 1;\n}\n.storybook-button--primary {\n  color: white;\n  background-color: #1ea7fd;\n}\n.storybook-button--secondary {\n  color: #333;\n  background-color: transparent;\n  box-shadow: rgba(0, 0, 0, 0.15) 0px 0px 0px 1px inset;\n}\n.storybook-button--small {\n  font-size: 12px;\n  padding: 10px 16px;\n}\n.storybook-button--medium {\n  font-size: 14px;\n  padding: 11px 20px;\n}\n.storybook-button--large {\n  font-size: 16px;\n  padding: 12px 24px;\n}\n",
                    "styleUrl": "./button.css"
                }
            ],
            "stylesData": "",
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 48
                    }
                }
            }
        },
        {
            "name": "CreateEditMockViewComponent",
            "id": "component-CreateEditMockViewComponent-1e3b8b56fc94b3cc73d465ac14f9149c",
            "file": "src/app/components/create-new-mock-view/create-new-mock-view.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-create-new-mock-view",
            "styleUrls": [
                "./create-new-mock-view.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./create-new-mock-view.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "errorMessageToEmitFromCreate",
                    "defaultValue": "{} as Record<string, string[]>",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "formGroup",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "openApiFile",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "createMock",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ncreateMock is a function that is responsible for storing the new MockDefinition\nin the designer store and navigating to the mock editor if the form is valid. If\nthe form is invalid the function does nothing.\n",
                    "description": "<p>createMock is a function that is responsible for storing the new MockDefinition\nin the designer store and navigating to the mock editor if the form is valid. If\nthe form is invalid the function does nothing.</p>\n"
                },
                {
                    "name": "formToMockDefinition",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<MockDefinition>",
                    "typeParameters": [],
                    "line": 98,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nformToMockDefinition method is responsible for creating a new MockDefinition from the\nform values. If the form is invalid then the function will return null, otherwise it uses\nthe form values to create and return a new MockDefinition\n",
                    "description": "<p>formToMockDefinition method is responsible for creating a new MockDefinition from the\nform values. If the form is invalid then the function will return null, otherwise it uses\nthe form values to create and return a new MockDefinition</p>\n"
                },
                {
                    "name": "goBack",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 80,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGoes back to the previous location in the app\n",
                    "description": "<p>Goes back to the previous location in the app</p>\n"
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setOpenApiFile",
                    "args": [
                        {
                            "name": "openApiFileString",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "openApiFileString",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "validateTitle",
                    "args": [
                        {
                            "name": "control",
                            "type": "AbstractControl",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "literal type | null",
                    "typeParameters": [],
                    "line": 84,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "control",
                            "type": "AbstractControl",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Output, EventEmitter } from '@angular/core';\nimport { Location } from '@angular/common';\nimport { FormGroup, FormControl, AbstractControl } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { MockDefinition } from 'src/app/models/mock-definition/mock-definition.model';\nimport { DesignerStore } from 'src/app/store/designer-store';\nimport { NGXLogger } from 'ngx-logger';\nimport { OpenApiSpecService } from 'src/app/services/openapispecservice/open-api-spec.service';\nimport { Observable, EMPTY } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { MockDefinitionService } from 'src/app/services/mock-definition/mock-definition.service';\nimport { recordAdd } from 'src/app/models/record';\n\n@Component({\n  selector: 'app-create-new-mock-view',\n  templateUrl: './create-new-mock-view.component.html',\n  styleUrls: ['./create-new-mock-view.component.scss']\n})\nexport class CreateEditMockViewComponent implements OnInit {\n  formGroup: FormGroup;\n  private openApiFile: string;\n  errorMessageToEmitFromCreate = {} as Record<string, string[]>;\n  constructor(\n    private router: Router,\n    private location: Location,\n    private openapiservice: OpenApiSpecService,\n    private mockdefinitionService: MockDefinitionService,\n    private store: DesignerStore,\n    private logger: NGXLogger\n  ) {\n    this.formGroup = new FormGroup({\n      title: new FormControl('', this.validateTitle),\n      description: new FormControl('')\n    });\n  }\n\n  ngOnInit() {}\n\n  /**\n   * createMock is a function that is responsible for storing the new MockDefinition\n   * in the designer store and navigating to the mock editor if the form is valid. If\n   * the form is invalid the function does nothing.\n   */\n  createMock() {\n    const observable = this.formToMockDefinition();\n\n    if (observable === EMPTY) {\n      this.logger.debug('Form is invalid');\n      return;\n    }\n    observable.subscribe(\n      value => {\n        if (!!value) {\n          this.logger.debug('MockDefinition created from form ', value);\n          this.store.appendMockDefinition(value);\n          this.store.mockDefinition = value;\n          this.router.navigateByUrl('/endpoint-view');\n        } else {\n          this.logger.log(value);\n        }\n      },\n      error => {\n        this.logger.error('openapi file provided is invalid');\n        this.logger.error(error);\n        this.errorMessageToEmitFromCreate = recordAdd(\n          this.errorMessageToEmitFromCreate,\n          'The provided OpenApi file has the following errors ',\n          error\n        );\n      }\n    );\n  }\n\n  setOpenApiFile(openApiFileString: string) {\n    this.openApiFile = openApiFileString;\n  }\n  /**\n   * Goes back to the previous location in the app\n   */\n  goBack() {\n    this.location.back();\n  }\n\n  validateTitle(control: AbstractControl): { [key: string]: any } | null {\n    if (control.value.length > 0 && control.value.trim().length === 0) {\n      return { key: 'Title cannot contain only whitespace' };\n    }\n    if (control.value.length <= 0) {\n      return { key: 'Must enter a title' };\n    }\n  }\n\n  /**\n   * formToMockDefinition method is responsible for creating a new MockDefinition from the\n   * form values. If the form is invalid then the function will return null, otherwise it uses\n   * the form values to create and return a new MockDefinition\n   */\n  formToMockDefinition(): Observable<MockDefinition> {\n    if (this.formGroup.invalid) {\n      this.logger.error('Form is invalid');\n      return EMPTY;\n    }\n\n    const obser = this.openapiservice.readOpenApiSpec(this.openApiFile).pipe(\n      map(openapi => {\n        const defaultScenariosPerEndpoint = this.mockdefinitionService.getDefaultScenarios(openapi.paths);\n        return {\n          metadata: {\n            title: this.formGroup.value.title,\n            description: this.formGroup.value.description\n          },\n          openApi: openapi,\n          scenarios: defaultScenariosPerEndpoint\n        } as MockDefinition;\n      })\n    );\n    return obser;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".create-mock-form {\n  min-width: 47.109vw;\n  max-width: 603px;\n  height: auto;\n  min-height: 60.824vh;\n  margin: 6.824vh auto;\n  align-items: stretch;\n\nmat-hint {\n    color: red !important;\n }\n\n  form {\n    align-items: stretch;\n\n    h3 {\n      font-weight: 500;\n      font-size: 1.5em;\n      line-height: 23px;\n      text-align: center;\n    }\n\n    .titleInput {\n      margin-bottom: 2em;\n    }\n\n    .buttons-div {\n      justify-content: space-between;\n      justify-self: flex-end;\n      align-items: flex-end;\n      margin: 2em 0;\n      button {\n        width: 10.234vw;\n        max-width: 131px;\n      }\n    }\n  }\n}\n",
                    "styleUrl": "./create-new-mock-view.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "location",
                        "type": "Location",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "openapiservice",
                        "type": "OpenApiSpecService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "mockdefinitionService",
                        "type": "MockDefinitionService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "store",
                        "type": "DesignerStore",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "logger",
                        "type": "NGXLogger",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 22,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "location",
                        "type": "Location",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "openapiservice",
                        "type": "OpenApiSpecService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "mockdefinitionService",
                        "type": "MockDefinitionService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "DesignerStore",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "logger",
                        "type": "NGXLogger",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<mat-card class=\"create-mock-form row center-hr\">\n  <form class=\"column\">\n    <h3 class=\"capitalize\">Create New Mock</h3>\n    <app-text-input\n      class=\"titleInput capitalize\"\n      title=\"Title - Required\"\n      maxLength=\"200\"\n      [control]=\"formGroup.controls['title']\"\n    ></app-text-input>\n    <app-text-input\n      class=\"flex-grow capitalize\"\n      title=\"Description\"\n      maxLength=\"1000\"\n      multiLine=\"true\"\n      [control]=\"formGroup.controls['description']\"\n    ></app-text-input>\n    <app-tool-tip message=\"Find out more about OpenAPI Specification 2.0: http://bit.ly/swagger-v2\"\n      ><app-file-input\n        class=\"column\"\n        [multiple]=\"false\"\n        type=\"file\"\n        (fileContentEmit)=\"setOpenApiFile($event)\"\n        label=\"Select OpenAPI File - Required\"\n        accept=\".yml,.yaml, .json\"\n        [errorMessage]=\"errorMessageToEmitFromCreate\"\n      >\n      </app-file-input\n    ></app-tool-tip>\n\n    <div class=\"row buttons-div\">\n      <button mat-raised-button color=\"primary\" (click)=\"goBack()\">\n        Back\n      </button>\n      <button mat-raised-button color=\"primary\" [disabled]=\"formGroup.invalid\" (click)=\"createMock()\">\n        Next\n      </button>\n    </div>\n  </form>\n</mat-card>\n"
        },
        {
            "name": "DeleteFromServerViewComponent",
            "id": "component-DeleteFromServerViewComponent-8f63d3c21bbe87f1436e66a2ae8707e2",
            "file": "src/app/components/delete-from-server-view/delete-from-server-view.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-delete-from-server-view",
            "styleUrls": [
                "./delete-from-server-view.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./delete-from-server-view.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "errorsRestRequest",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "object"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "body",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 61
                },
                {
                    "name": "concatToURI",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 63
                },
                {
                    "name": "controlsMockDefinitionToString",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 74
                },
                {
                    "name": "deleteInProgress",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 71
                },
                {
                    "name": "emptyListMessageServerBox",
                    "defaultValue": "'No Mockdefinition(s) '",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 54,
                    "modifierKind": [
                        143
                    ]
                },
                {
                    "name": "errorMessage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 70
                },
                {
                    "name": "formArray",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormArray",
                    "optional": false,
                    "description": "",
                    "line": 58
                },
                {
                    "name": "inputControl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormControl",
                    "optional": false,
                    "description": "",
                    "line": 65
                },
                {
                    "name": "mockDefinitions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MockDefinition[]",
                    "optional": false,
                    "description": "",
                    "line": 57
                },
                {
                    "name": "options",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 60
                },
                {
                    "name": "requestInProgress",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 66
                },
                {
                    "name": "requestObserver",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observer<MockDefinition[]>",
                    "optional": false,
                    "description": "",
                    "line": 59
                },
                {
                    "name": "statusMessage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 69
                },
                {
                    "name": "title",
                    "defaultValue": "'Server URI'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 67
                },
                {
                    "name": "triggerOpenConfirmBox",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 72
                },
                {
                    "name": "urlMaxLength",
                    "defaultValue": "2048",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 53,
                    "modifierKind": [
                        124,
                        143
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "clearForm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 182,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nClears all Mockdefinitions from the form\n",
                    "description": "<p>Clears all Mockdefinitions from the form</p>\n",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "clearRightHandSide",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 170,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nMoves all Mockdefinitions to the left-hand side of the form; clears right-hand side\n",
                    "description": "<p>Moves all Mockdefinitions to the left-hand side of the form; clears right-hand side</p>\n",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "getSpinnerId",
                    "args": [],
                    "optional": false,
                    "returnType": "\"show-spinner\" | \"hide-spinner\"",
                    "typeParameters": [],
                    "line": 87,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 76,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onBack",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 163,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nReturns to the previous location\n",
                    "description": "<p>Returns to the previous location</p>\n"
                },
                {
                    "name": "onConfirmDialogAction",
                    "args": [
                        {
                            "name": "choice",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 198,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nPerforms the server Mockdefinition deletion if the user confirms\n",
                    "description": "<p>Performs the server Mockdefinition deletion if the user confirms</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 6459,
                                "end": 6465,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "choice"
                            },
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 6453,
                                "end": 6458,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>The boolean value of the user&#39;s choice for the popup</p>\n"
                        }
                    ]
                },
                {
                    "name": "onListOutput",
                    "args": [
                        {
                            "name": "list",
                            "type": "FormControl[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 140,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSets the Mockdefinitions property equal to the list of MockDefinitions derived from the\nFormControl values.\none list to the other.\n",
                    "description": "<p>Sets the Mockdefinitions property equal to the list of MockDefinitions derived from the\nFormControl values.\none list to the other.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 4544,
                                "end": 4548,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "list"
                            },
                            "type": "FormControl[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 4538,
                                "end": 4543,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>The list of FormControls given by the shuttle list when the user moves items from\none list to the other.</p>\n"
                        }
                    ]
                },
                {
                    "name": "onResponse",
                    "args": [
                        {
                            "name": "response",
                            "type": "MockDefinition[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 149,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIf the response returned is not an error or domexceptions it sets the controls\nvalues to the response body. The control is then responsible for validation.\n",
                    "description": "<p>If the response returned is not an error or domexceptions it sets the controls\nvalues to the response body. The control is then responsible for validation.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 4955,
                                "end": 4963,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "response"
                            },
                            "type": "MockDefinition[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 4949,
                                "end": 4954,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>HttpResponse received by the input</p>\n"
                        }
                    ]
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 106,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe function called on submit; deletes the Mockdefinitions when pressed.\n",
                    "description": "<p>The function called on submit; deletes the Mockdefinitions when pressed.</p>\n"
                },
                {
                    "name": "sendRequest",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 91,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "sendRequestDisabled",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 83,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "triggerOpenConfirmationBox",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 190,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOpens the confirmation box when attempting to delete Mockdefinitions from the server\n",
                    "description": "<p>Opens the confirmation box when attempting to delete Mockdefinitions from the server</p>\n",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Location } from '@angular/common';\nimport { Component, Input, OnInit } from '@angular/core';\nimport { AbstractControl, FormArray, FormControl, Validators } from '@angular/forms';\nimport { NGXLogger } from 'ngx-logger';\nimport { Observer } from 'rxjs';\nimport { MockDefinition } from 'src/app/models/mock-definition/mock-definition.model';\nimport { OrbitalAdminService } from 'src/app/services/orbital-admin/orbital-admin.service';\nimport { finalize } from 'rxjs/operators';\nimport { NotificationService } from 'src/app/services/notification-service/notification.service';\n\n@Component({\n  selector: 'app-delete-from-server-view',\n  templateUrl: './delete-from-server-view.component.html',\n  styleUrls: ['./delete-from-server-view.component.scss']\n})\nexport class DeleteFromServerViewComponent implements OnInit {\n\n  @Input() set errorsRestRequest(errors: object) {\n    if (!!this.inputControl) {\n      this.inputControl.setErrors(errors);\n    }\n  }\n\n  constructor(\n    private location: Location,\n    private logger: NGXLogger,\n    private orbitalService: OrbitalAdminService,\n    private notificationService: NotificationService\n  ) {\n    this.formArray = new FormArray([]);\n\n    this.requestObserver = {\n      next: event => {\n        this.onResponse(event);\n        this.statusMessage = '';\n      },\n      error: () => {\n        this.errorMessage = 'Mock(s) could not be viewed because of an error';\n        this.notificationService.open('Mock(s) could not be viewed because of an error');\n        this.requestInProgress = false;\n        this.clearForm();\n      },\n      complete: () => (this.requestInProgress = false)\n    };\n  }\n\n  /**\n   * Getter function that returns true if no Mock Definitions have been selected for\n   */\n  get disabled(): boolean {\n    return this.mockDefinitions.length === 0 || this.requestInProgress || this.deleteInProgress;\n  }\n  static readonly urlMaxLength = 2048;\n  readonly emptyListMessageServerBox = 'No Mockdefinition(s) ';\n\n\n  mockDefinitions: MockDefinition[] = [];\n  formArray: FormArray;\n  requestObserver: Observer<MockDefinition[]>;\n  options: object = {};\n  body?: string = null;\n\n  concatToURI = '';\n\n  inputControl: FormControl;\n  requestInProgress = false;\n  title = 'Server URI';\n\n  statusMessage: string;\n  errorMessage: string;\n  deleteInProgress: boolean;\n  triggerOpenConfirmBox: boolean;\n\n  controlsMockDefinitionToString = (control: AbstractControl) => (control.value as MockDefinition).metadata.title;\n\n  ngOnInit() {\n    this.inputControl = new FormControl(\n      '',\n      Validators.compose([Validators.maxLength(DeleteFromServerViewComponent.urlMaxLength)])\n    );\n  }\n\n  sendRequestDisabled() {\n    return this.inputControl.value.length === 0 || this.requestInProgress || this.deleteInProgress;\n  }\n\n  getSpinnerId() {\n    return this.requestInProgress ? 'show-spinner' : 'hide-spinner';\n  }\n\n  sendRequest() {\n    this.statusMessage = '';\n    this.errorMessage = '';\n    this.inputControl.markAsDirty();\n    if (this.sendRequestDisabled) {\n      this.requestInProgress = true;\n      this.errorsRestRequest = null;\n\n      this.orbitalService.getAll(`${this.inputControl.value}${this.concatToURI}`).subscribe(this.requestObserver);\n    }\n  }\n\n  /**\n   * The function called on submit; deletes the Mockdefinitions when pressed.\n   */\n  onSubmit() {\n    this.deleteInProgress = true;\n    this.orbitalService.deleteMockDefinitions(`${this.inputControl.value}${this.concatToURI}`,\n      this.mockDefinitions.map(mockDefinition => mockDefinition.metadata.title))\n      .pipe(\n        finalize(() => {\n          this.deleteInProgress = false;\n        })\n      )\n      .subscribe({\n        next: deleteMockStatus => {\n          if (deleteMockStatus.every(mockDeletedSuccessfully => mockDeletedSuccessfully)) {\n            this.logger.debug('Received response from export to server promise resolution');\n            this.statusMessage = 'Mock(s) successfully deleted';\n            this.clearRightHandSide();\n          } else {\n            this.errorMessage = 'Mock(s) could not be deleted because of an error';\n            this.logger.debug('Mock deletion statuses', deleteMockStatus);\n          }\n        },\n        error: error => {\n          this.logger.error('Mock(s) could not be deleted because of an error', error);\n          this.notificationService.open('Mock(s) could not be deleted because of an error');\n        }\n      }\n    );\n  }\n\n  /**\n   * Sets the Mockdefinitions property equal to the list of MockDefinitions derived from the\n   * FormControl values.\n   * @param list The list of FormControls given by the shuttle list when the user moves items from\n   * one list to the other.\n   */\n  onListOutput(list: FormControl[]) {\n    this.mockDefinitions = list.map(control => control.value);\n  }\n\n  /**\n   * If the response returned is not an error or domexceptions it sets the controls\n   * values to the response body. The control is then responsible for validation.\n   * @param response HttpResponse received by the input\n   */\n  onResponse(response: MockDefinition[]) {\n    this.logger.debug('Received http response', response);\n\n    if (!!response) {\n      response.forEach(m => (m.openApi.tags = m.openApi.tags.filter(t => t.name !== 'openapi')));\n      this.formArray = new FormArray(response.map(mockDef => new FormControl(mockDef, null)));\n\n      this.logger.debug('DeleteFromServerViewComponent FormArray value:', this.formArray);\n    }\n  }\n\n  /**\n   * Returns to the previous location\n   */\n  onBack() {\n    this.location.back();\n  }\n\n  /**\n   * Moves all Mockdefinitions to the left-hand side of the form; clears right-hand side\n   */\n  private clearRightHandSide() {\n    const chosenMocks = this.formArray.controls\n      .filter(mock => !this.mockDefinitions.map(rightHandMock => rightHandMock.metadata.title)\n      .includes((mock.value as MockDefinition).metadata.title))\n      .map(aMock => aMock.value);\n    this.formArray = new FormArray(chosenMocks.map(mockDef => new FormControl(mockDef, null)));\n    this.mockDefinitions = [];\n  }\n\n  /**\n   * Clears all Mockdefinitions from the form\n   */\n  private clearForm() {\n    this.formArray = new FormArray([]);\n    this.mockDefinitions = [];\n  }\n\n  /**\n   * Opens the confirmation box when attempting to delete Mockdefinitions from the server\n   */\n  public triggerOpenConfirmationBox() {\n    this.triggerOpenConfirmBox = true;\n  }\n\n  /**\n   * Performs the server Mockdefinition deletion if the user confirms\n   * @param choice The boolean value of the user's choice for the popup\n   */\n  public onConfirmDialogAction(choice: boolean) {\n    this.triggerOpenConfirmBox = false;\n    if (choice) {\n      this.onSubmit();\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "mat-card#container {\n  min-width: 70vw;\n  min-height: 70vh;\n  margin: 6.824vh auto;\n\n  mat-card-title,\n  mat-card-subtitle {\n    align-self: center;\n    color: #000;\n    padding-top: 0.6em;\n  }\n\n  .button-div {\n    justify-content: space-between;\n    padding: 0 4em;\n    button {\n      padding: 0 2.5em;\n    }\n  }\n\n  .div-body {\n    margin: 0 2em;\n    overflow: visible;\n\n    app-shuttle-list {\n      height: 100%;\n      padding: 2em 4em;\n      max-height: calc(85% - 4em);\n      justify-content: flex-start;\n      align-self: stretch;\n\n      ::ng-deep > *:first-child {\n        flex-grow: 1;\n      }\n    }\n  }\n}\n\n.list-item {\n  width: 100%;\n  margin: 1em 0 !important;\n  h5 {\n    font-weight: 400;\n    font-size: 1.2em;\n    margin: 0;\n  }\n}\n\n.container {\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  mat-select {\n    min-width: 4.5em;\n    padding-bottom: 0.32em;\n    margin-right: 0.3em;\n  }\n  app-text-input {\n    flex: 0 !important;\n    text-transform: capitalize;\n  }\n\n  div#submit-buttons {\n    display: flex;\n    flex-direction: row;\n    margin-left: 1em;\n    mat-spinner {\n      margin-left: 10px;\n      flex-direction: center;\n\n      & #show-spinner {\n        display: visible !important;\n      }\n\n      &#hide-spinner {\n        display: none;\n      }\n    }\n  }\n}\n\n.error-message-delete {\n  margin-top: -13px;\n}\n\n.btn-delete {\n  width: 5vw;\n  height: 5vh;\n  min-width: 7em;\n}\n\n.overlay {\n  position: fixed;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 100vw;\n  height: 100vh;\n  top: 0;\n  left: 0;\n  z-index: 1;\n  background-color: rgba(0, 0, 0, 0.5);\n}\n\n.status-message {\n  color: grey;\n  font-size: 0.7em;\n}\n\n.error-message {\n  color: red;\n  font-size: 0.7em;\n}",
                    "styleUrl": "./delete-from-server-view.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "location",
                        "type": "Location",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "logger",
                        "type": "NGXLogger",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "orbitalService",
                        "type": "OrbitalAdminService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "notificationService",
                        "type": "NotificationService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 22,
                "jsdoctags": [
                    {
                        "name": "location",
                        "type": "Location",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "logger",
                        "type": "NGXLogger",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "orbitalService",
                        "type": "OrbitalAdminService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "notificationService",
                        "type": "NotificationService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "errorsRestRequest": {
                    "name": "errorsRestRequest",
                    "setSignature": {
                        "name": "errorsRestRequest",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "errors",
                                "type": "object",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 18,
                        "jsdoctags": [
                            {
                                "name": "errors",
                                "type": "object",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "disabled": {
                    "name": "disabled",
                    "getSignature": {
                        "name": "disabled",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 50,
                        "rawdescription": "Getter function that returns true if no Mock Definitions have been selected for",
                        "description": "<p>Getter function that returns true if no Mock Definitions have been selected for</p>\n"
                    }
                }
            },
            "templateData": "<mat-card class=\"column\" id=\"container\">\n  <mat-card-title class=\"capitalize\">Delete from Server</mat-card-title>\n  <mat-card-subtitle\n    >Delete existing Mockdefinition(s) below</mat-card-subtitle\n  >\n  <div class=\"column center-hr flex-grow div-body\">\n    <app-tool-tip\n      message=\"Enter the Server URI that your Mockdefinition(s) are hosted on\"\n    >\n\n    <form>\n      <div class=\"container\">\n        <div class=\"uri-field\">\n          <app-text-input\n            [title]=\"title\"\n            maxLength=\"200\"\n            [control]=\"inputControl\"\n          ></app-text-input>\n          <mat-hint class=\"status-message\" *ngIf=\"!!statusMessage?.length\">\n            {{statusMessage}}\n          </mat-hint>\n          <mat-hint class=\"error-message\" *ngIf=\"!!errorMessage?.length\">\n            {{errorMessage}}\n          </mat-hint>\n        </div>\n\n        <div id=\"submit-buttons\">\n          <button\n            mat-raised-button\n            color=\"primary\"\n            (click)=\"sendRequest()\"\n            [disabled]=\"sendRequestDisabled()\"\n            class=\"btn-upload\"\n          >\n            Submit</button\n          ><mat-spinner diameter=\"25\" [id]=\"getSpinnerId()\"></mat-spinner>\n\n        </div>\n        <div class=\"overlay\" *ngIf=\"triggerOpenConfirmBox\">\n          <div>\n            <mat-card>\n              <app-dialog-box\n                titleText=\"Confirm Mockdefinition Deletion\"\n                confirmButtonText=\"Confirm\"\n                cancelButtonText=\"Cancel\"\n                bodyText=\"Are you sure you want to delete these Mockdefinitions from the server?\"\n                (choiceBoolean)=\"onConfirmDialogAction($event)\"\n              ></app-dialog-box>\n            </mat-card>\n          </div>\n        </div>\n      </div>\n    </form>\n    </app-tool-tip>\n    <app-shuttle-list\n      class=\"column flex-grow\"\n      [list]=\"formArray.controls\"\n      [itemToStringFn]=\"controlsMockDefinitionToString\"\n      [emptyListMessage]=\"emptyListMessageServerBox\"\n      leftTitle=\"Mockdefinition(s) from Server\"\n      rightTitle=\"Mockdefinition(s) To Delete\"\n      (outputList)=\"onListOutput($event)\"\n    ></app-shuttle-list>\n  </div>\n  <div class=\"row button-div\">\n    <button mat-raised-button color=\"primary\" (click)=\"onBack()\">\n      Back\n    </button>\n    <button\n      mat-raised-button\n      color=\"primary\"\n      [disabled]=\"disabled\"\n      (click)=\"triggerOpenConfirmationBox()\"\n    >\n      Delete\n    </button>\n  </div>\n</mat-card>"
        },
        {
            "name": "DialogBoxComponent",
            "id": "component-DialogBoxComponent-3ea0b55edd829d8e6022cbae95536d8f",
            "file": "src/app/components/orbital-common/dialog-box/dialog-box.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-dialog-box",
            "styleUrls": [
                "./dialog-box.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./dialog-box.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "bodyText",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "string"
                },
                {
                    "name": "cancelButtonText",
                    "defaultValue": "'Cancel'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "string"
                },
                {
                    "name": "confirmButtonText",
                    "defaultValue": "'Confirm'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "string"
                },
                {
                    "name": "titleText",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "string"
                }
            ],
            "outputsClass": [
                {
                    "name": "choiceBoolean",
                    "defaultValue": "new EventEmitter<boolean>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "EventEmitter<boolean>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onCancel",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nEmits false to parent when the user wishes the delete a scenario\n",
                    "description": "<p>Emits false to parent when the user wishes the delete a scenario</p>\n"
                },
                {
                    "name": "onConfirm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nEmits true to parent when the user wishes the delete a scenario\n",
                    "description": "<p>Emits true to parent when the user wishes the delete a scenario</p>\n"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input, EventEmitter, Output } from '@angular/core';\n\n@Component({\n  selector: 'app-dialog-box',\n  templateUrl: './dialog-box.component.html',\n  styleUrls: ['./dialog-box.component.scss']\n})\nexport class DialogBoxComponent implements OnInit {\n  @Input() titleText: string;\n  @Input() bodyText: string;\n  @Input() confirmButtonText = 'Confirm';\n  @Input() cancelButtonText = 'Cancel';\n\n  @Output() choiceBoolean: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  constructor() {}\n\n  /**\n   * Emits true to parent when the user wishes the delete a scenario\n   */\n  onConfirm() {\n    this.choiceBoolean.emit(true);\n  }\n\n  /**\n   * Emits false to parent when the user wishes the delete a scenario\n   */\n  onCancel() {\n    this.choiceBoolean.emit(false);\n  }\n\n  ngOnInit() {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".dialog-content {\n  p {\n    text-align: center;\n    padding: 0.8em;\n    color: rgba(0, 0, 0, 0.541327);\n  }\n}\n\n.dialog-title {\n  text-align: center;\n}\n\n.dialog-actions {\n  display: flex;\n  justify-content: space-between;\n\n  .confirm-button {\n    color: #ff0000;\n  }\n\n  .cancel-button {\n    color: #009688;\n  }\n}\n",
                    "styleUrl": "./dialog-box.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 14
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<h3 mat-dialog-title class=\"dialog-title\">{{ titleText }}</h3>\n<div mat-dialog-content class=\"dialog-content\">\n  <p [innerHTML]=\"bodyText\"></p>\n  <div mat-dialog-actions class=\"dialog-actions\">\n    <button mat-button class=\"cancel-button\" (click)=\"onCancel()\">\n      {{ cancelButtonText }}\n    </button>\n    <button mat-button class=\"confirm-button\" (click)=\"onConfirm()\">\n      {{ confirmButtonText }}\n    </button>\n  </div>\n</div>\n"
        },
        {
            "name": "DownloadMockdefinitionsComponent",
            "id": "component-DownloadMockdefinitionsComponent-540a632fd08a1fcdb07c3fbfe6215577",
            "file": "src/app/components/download-mockdefinitions/download-mockdefinitions.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-download-mockdefinitions",
            "styleUrls": [
                "./download-mockdefinitions.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./download-mockdefinitions.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "emptyListMessage",
                    "defaultValue": "'List is empty'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "isMockSelected",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "list",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "noSearchResultsMessage",
                    "defaultValue": "'No search results found'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "outputList",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EventEmitter<any[]>",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "selected",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "optional": false,
                    "description": "",
                    "line": 21
                }
            ],
            "methodsClass": [
                {
                    "name": "downloadMocks",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 62,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDownloads multiple mock files from the designer\n",
                    "description": "<p>Downloads multiple mock files from the designer</p>\n"
                },
                {
                    "name": "goBack",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGoes back to the previous location in the app\n",
                    "description": "<p>Goes back to the previous location in the app</p>\n"
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCompletes event emitter\n",
                    "description": "<p>Completes event emitter</p>\n"
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSelect",
                    "args": [
                        {
                            "name": "items",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSets the selected list to the items passed into it\n",
                    "description": "<p>Sets the selected list to the items passed into it</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1327,
                                "end": 1332,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "items"
                            },
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1321,
                                "end": 1326,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>The list of items to set as selected from the left list</p>\n"
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, EventEmitter, OnDestroy } from '@angular/core';\nimport { Location } from '@angular/common';\nimport { AbstractControl, FormControl } from '@angular/forms';\nimport { DesignerStore } from 'src/app/store/designer-store';\nimport { MockDefinition } from 'src/app/models/mock-definition/mock-definition.model';\nimport { saveAs } from 'file-saver';\nimport { recordMap } from 'src/app/models/record';\n\n@Component({\n  selector: 'app-download-mockdefinitions',\n  templateUrl: './download-mockdefinitions.component.html',\n  styleUrls: ['./download-mockdefinitions.component.scss']\n})\nexport class DownloadMockdefinitionsComponent implements OnInit, OnDestroy {\n  outputList: EventEmitter<any[]>;\n\n  emptyListMessage = 'List is empty';\n  noSearchResultsMessage = 'No search results found';\n\n  list: any[] = [];\n  selected: any[] = [];\n  isMockSelected = false;\n\n  constructor(private location: Location, private store: DesignerStore) {\n    this.outputList = new EventEmitter<any[]>();\n  }\n\n  ngOnInit() {\n    this.store.state$.subscribe(state => {\n      this.list = recordMap(state.mockDefinitions, md => new FormControl(md));\n    });\n  }\n\n\n\n  /**\n   * Completes event emitter\n   */\n  ngOnDestroy() {\n    this.outputList.complete();\n  }\n\n  /**\n   * Sets the selected list to the items passed into it\n   * @param items The list of items to set as selected from the left list\n   */\n  onSelect(items: any[]): void {\n    this.selected = [...items];\n    this.isMockSelected = this.selected.length !== 0;\n  }\n\n  /**\n   * Goes back to the previous location in the app\n   */\n  goBack() {\n    this.location.back();\n  }\n\n  /**\n   * Downloads multiple mock files from the designer\n   */\n  downloadMocks() {\n    this.selected.forEach(mockDefinition => {\n      const blob = new Blob([JSON.stringify(mockDefinition.value)], { type: 'text/plain;charset=utf-8' });\n      saveAs(blob, mockDefinition.value.metadata.title + '.json');\n    });\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".container {\n  display: flex;\n  flex-direction: row;\n\n  .selectionList {\n    flex-grow: 1;\n    display: flex;\n    flex-direction: column;\n\n    .list-label {\n      align-self: center;\n      margin-bottom: 1em;\n      color: rgba(0, 0, 0, 0.539261);\n      font-size: 0.9em;\n      font-weight: 500;\n    }\n\n    .list-card {\n      flex-grow: 1;\n      box-shadow: 0px 19px 38px rgba(0, 0, 0, 0.3),\n        0px 15px 12px rgba(0, 0, 0, 0.22);\n      border-radius: 0.1em;\n    }\n  }\n\n  .button-div {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    margin: 0 1em;\n\n    button {\n      margin: 1em 0;\n    }\n  }\n}\n\n.export-to-server {\n  width: 37.3vw;\n  height: auto;\n  margin-top: 2em;\n}\n\n.list-item {\n  width: 100%;\n  margin: 1em 0 !important;\n  h5 {\n    font-weight: 400;\n    font-size: 1.2em;\n    margin: 0;\n  }\n}\n\nspan.center {\n  text-align: center;\n}\n\n.buttons-div {\n  justify-content: space-between;\n  justify-self: flex-end;\n  align-items: flex-end;\n  margin: 2em 0;\n  button {\n    width: 10.234vw;\n    max-width: 131px;\n  }\n}\n\nbutton.multiline {\n  line-height: 1.4em;\n}\n\np.subtitle {\n  font-size: 0.9em;\n}\n",
                    "styleUrl": "./download-mockdefinitions.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "location",
                        "type": "Location",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "store",
                        "type": "DesignerStore",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 22,
                "jsdoctags": [
                    {
                        "name": "location",
                        "type": "Location",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "DesignerStore",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<mat-card class=\"export-to-server mat-elevation-z15\">\n  <span class=\"center\">\n    <mat-card-title>Download Mockdefinitions</mat-card-title>\n    <mat-card-subtitle\n      >Download Mockdefinition(s) locally to your machine</mat-card-subtitle\n    >\n    <p class=\"subtitle\">Mockdefinition(s) on Designer</p>\n  </span>\n  <div class=\"container\">\n    <div class=\"selectionList\">\n\n      <app-shuttle-sub-list\n        class=\"list\"\n        [list]=\"list\"\n        [emptyListMessage]=\"emptyListMessage\"\n        [noSearchResultsMessage]=\"noSearchResultsMessage\"\n        (itemSelected)=\"onSelect($event)\"\n      ></app-shuttle-sub-list>\n    </div>\n  </div>\n\n  <div class=\"row buttons-div\">\n    <button mat-raised-button color=\"primary\" (click)=\"goBack()\">\n      Back\n    </button>\n    <button\n      mat-raised-button\n      color=\"primary\"\n      [disabled]=\"!this.isMockSelected\"\n      class=\"multiline\"\n      (click)=\"downloadMocks()\"\n    >\n      Download<br />Selected\n    </button>\n  </div>\n</mat-card>\n\n<ng-template #listItemTemplate let-control=\"item\">\n  <div class=\"list-item\">\n    <h5 class=\"capitalize\">{{ control.value?.metadata?.title }}</h5>\n    <mat-divider></mat-divider>\n  </div>\n</ng-template>\n"
        },
        {
            "name": "EndpointListComponent",
            "id": "component-EndpointListComponent-92703efc3265edabaef6e3a5d5883051",
            "file": "src/app/components/endpoint-view/endpoint-list/endpoint-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-endpoint-list",
            "styleUrls": [
                "./endpoint-list.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./endpoint-list.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "endpoints",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "Endpoint[]"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input } from '@angular/core';\nimport { DesignerStore } from 'src/app/store/designer-store';\nimport { Endpoint } from 'src/app/models/endpoint.model';\nimport { Scenario } from 'src/app/models/mock-definition/scenario/scenario.model';\n\n@Component({\n  selector: 'app-endpoint-list',\n  templateUrl: './endpoint-list.component.html',\n  styleUrls: ['./endpoint-list.component.scss']\n})\nexport class EndpointListComponent implements OnInit {\n  @Input() endpoints: Endpoint[] = [];\n\n  constructor(private designerStore: DesignerStore) {}\n\n  /**\n   * Retrieves the list of scenarios from the store\n   */\n  get scenarios(): Scenario[] {\n    return this.designerStore.state.mockDefinition.scenarios;\n  }\n\n  ngOnInit() {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".endpointlistcontainer {\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  overflow-y: scroll;\n  overflow-x: hidden;\n  padding-bottom: 1.5vw;\n\n  mat-list-item {\n    margin-top: 0.6em;\n    width: 100%;\n    height: auto;\n  }\n\n  app-endpoint-list-item {\n    width: 100%;\n  }\n}\n",
                    "styleUrl": "./endpoint-list.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "designerStore",
                        "type": "DesignerStore",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "designerStore",
                        "type": "DesignerStore",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "scenarios": {
                    "name": "scenarios",
                    "getSignature": {
                        "name": "scenarios",
                        "type": "[]",
                        "returnType": "Scenario[]",
                        "line": 19,
                        "rawdescription": "Retrieves the list of scenarios from the store",
                        "description": "<p>Retrieves the list of scenarios from the store</p>\n"
                    }
                }
            },
            "templateData": "<mat-list class=\"endpointlistcontainer\">\n    <mat-list-item *ngFor=\"let endpoint of endpoints\">\n        <app-endpoint-list-item [endpoint] = 'endpoint' [scenarioCount] = '(scenarios | getEndpointScenarios: endpoint).length'></app-endpoint-list-item>\n    </mat-list-item>    \n</mat-list>"
        },
        {
            "name": "EndpointListItemComponent",
            "id": "component-EndpointListItemComponent-71746f7755086840b4a5388e5e3a03e3",
            "file": "src/app/components/endpoint-view/endpoint-list-item/endpoint-list-item.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-endpoint-list-item",
            "styleUrls": [
                "./endpoint-list-item.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./endpoint-list-item.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "endpoint",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "Endpoint"
                },
                {
                    "name": "scenarioCount",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "number"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "selectEndpoint",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nReturns a list of scenarios for the clicked endpoint\n",
                    "description": "<p>Returns a list of scenarios for the clicked endpoint</p>\n"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input } from '@angular/core';\nimport { Endpoint } from 'src/app/models/endpoint.model';\nimport { DesignerStore } from 'src/app/store/designer-store';\nimport { NGXLogger } from 'ngx-logger';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-endpoint-list-item',\n  templateUrl: './endpoint-list-item.component.html',\n  styleUrls: ['./endpoint-list-item.component.scss']\n})\nexport class EndpointListItemComponent implements OnInit {\n  @Input() endpoint: Endpoint;\n  @Input() scenarioCount: number;\n\n  constructor(\n    private store: DesignerStore,\n    private logger: NGXLogger,\n    private router: Router\n  ) {}\n\n  ngOnInit() {}\n\n  /**\n   * Returns a list of scenarios for the clicked endpoint\n   */\n\n  selectEndpoint() {\n    this.store.selectedEndpoint = this.endpoint;\n    this.router.navigateByUrl('/scenario-view');\n    this.logger.debug('Endpoint selected: ', this.store.state.selectedEndpoint);\n  }\n\n  /**\n   * Gets the endpoint's description\n   */\n  get endpointDescription(): string {\n    return !this.endpoint || !this.endpoint.spec.description\n      ? 'No description'\n      : this.endpoint.spec.description;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".endpointlistitemcontainer {\n  padding: 0em;\n  display: flex;\n  flex-direction: row;\n  width: 100%;\n\n  mat-card-content {\n    margin-left: 5%;\n    padding: 1%;\n    flex: 1;\n  }\n\n  .verb-text {\n    font-weight: bold;\n    text-align: center;\n    vertical-align: 50%;\n    font-size: 0.75em;\n    margin-bottom: 0;\n  }\n\n  .subtitle {\n    display: flex;\n    flex-direction: row;\n    justify-content: space-between;\n    min-width: 80%;\n    max-width: 80%;\n  }\n\n  .verb-header {\n    min-width: 12%;\n  }\n}\n::ng-deep .mat-card-header-text {\n  margin: auto !important;\n}\n",
                    "styleUrl": "./endpoint-list-item.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "DesignerStore",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "logger",
                        "type": "NGXLogger",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "DesignerStore",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "logger",
                        "type": "NGXLogger",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "endpointDescription": {
                    "name": "endpointDescription",
                    "getSignature": {
                        "name": "endpointDescription",
                        "type": "string",
                        "returnType": "string",
                        "line": 37,
                        "rawdescription": "Gets the endpoint's description",
                        "description": "<p>Gets the endpoint&#39;s description</p>\n"
                    }
                }
            },
            "templateData": "<mat-card *ngIf=\"!!endpoint\" class=\"endpointlistitemcontainer mincardheight\">\n  <mat-card-header\n    class=\"verb-header\"\n    [style.background-color]=\"endpoint.verb | getVerbColor\"\n  >\n    <mat-card-title class=\"verb-text\">{{\n      endpoint.verb | getVerbString\n    }}</mat-card-title>\n  </mat-card-header>\n  <mat-card-content (click)=\"selectEndpoint()\">\n    <mat-card-title> {{ endpoint.path }} </mat-card-title>\n    <mat-card-subtitle>\n      <div class=\"subtitle\">\n        <div>{{ endpointDescription }}</div>\n        <div>{{ scenarioCount }} Scenarios</div>\n      </div>\n    </mat-card-subtitle>\n  </mat-card-content>\n</mat-card>\n"
        },
        {
            "name": "EndpointViewComponent",
            "id": "component-EndpointViewComponent-6b5fc1c460b19276a32fef81f4456364",
            "file": "src/app/components/endpoint-view/endpoint-view.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-endpoint-view",
            "styleUrls": [
                "./endpoint-view.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./endpoint-view.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "endpointList",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Endpoint[]",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "filteredList",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Endpoint[]",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "isExportedMessage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "mockDefinition",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MockDefinition",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "methodsClass": [
                {
                    "name": "endpointToString",
                    "args": [
                        {
                            "name": "endpoint",
                            "type": "Endpoint",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThis function takes an endpoint object and return its path as a string\n",
                    "description": "<p>This function takes an endpoint object and return its path as a string</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 970,
                                "end": 978,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "endpoint"
                            },
                            "type": "Endpoint",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 964,
                                "end": 969,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>The endpoint to be converted to string</p>\n"
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setFilteredList",
                    "args": [
                        {
                            "name": "endpoints",
                            "type": "Endpoint[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThis function takes a list of endpoints and updates it to the new list of filtered endpoints\n",
                    "description": "<p>This function takes a list of endpoints and updates it to the new list of filtered endpoints</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1219,
                                "end": 1228,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "endpoints"
                            },
                            "type": "Endpoint[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1213,
                                "end": 1218,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>The list of endpoints</p>\n"
                        }
                    ]
                },
                {
                    "name": "showNotFound",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe function checks if there's matched scenario(s) found when searching.\nSearch is done by the search bar component.\n",
                    "description": "<p>The function checks if there&#39;s matched scenario(s) found when searching.\nSearch is done by the search bar component.</p>\n"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { DesignerStore } from 'src/app/store/designer-store';\nimport { MockDefinition } from 'src/app/models/mock-definition/mock-definition.model';\nimport { Endpoint } from 'src/app/models/endpoint.model';\nimport { HttpRequest } from '@angular/common/http';\n\n@Component({\n  selector: 'app-endpoint-view',\n  templateUrl: './endpoint-view.component.html',\n  styleUrls: ['./endpoint-view.component.scss']\n})\nexport class EndpointViewComponent implements OnInit {\n  mockDefinition: MockDefinition;\n  endpointList: Endpoint[] = [];\n  filteredList: Endpoint[] = [];\n\n\n  isExportedMessage: string;\n\n  constructor(private store: DesignerStore) {\n    this.store.state$.subscribe(state => {\n      this.mockDefinition = state.mockDefinition;\n      this.endpointList = [...state.endpoints];\n    });\n    this.isExportedMessage = '';\n  }\n  /**\n   * This function takes an endpoint object and return its path as a string\n   * @param endpoint The endpoint to be converted to string\n   */\n  endpointToString(endpoint: Endpoint): string {\n    return endpoint.path;\n  }\n  /**\n   * This function takes a list of endpoints and updates it to the new list of filtered endpoints\n   * @param endpoints The list of endpoints\n   */\n  setFilteredList(endpoints: Endpoint[]) {\n    this.filteredList = endpoints;\n  }\n\n  /**\n   * The function checks if there's matched scenario(s) found when searching.\n   * Search is done by the search bar component.\n   */\n  showNotFound() {\n    return this.filteredList.length === 0;\n  }\n\n  ngOnInit() {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".container.endpointview {\n  width: 95vw !important;\n  min-height: 85vh !important;\n  margin-top: 2vh;\n  -webkit-box-shadow: 0px 1px 12px 3px rgba(153, 148, 153, 1);\n  -moz-box-shadow: 0px 1px 12px 3px rgba(153, 148, 153, 1);\n  box-shadow: 0px 1px 12px 3px rgba(153, 148, 153, 1);\n}\n\n.endpoint {\n  width: 100vw !important;\n}\n\napp-overview-header {\n  width: 100%;\n  height: 19%;\n  display: flex;\n  flex-direction: column;\n}\n\napp-endpoint-list {\n  max-width: 96%;\n  display: flex;\n  flex-direction: column;\n  margin-left: 2%;\n}\n\n.server-post {\n  display: flex;\n  justify-content: left;\n  padding-top: 2em;\n  padding-left: 10em;\n}\n\n.uri-field {\n  width: 50vw;\n  padding-right: 1em;\n}\n\ndiv.endpoint {\n  width: 100%;\n}\n\np#notFoundMessage {\n  font-size: 1.4em;\n  color: rgba(0, 0, 0, 0.541327);\n  font-family: Roboto;\n  padding: 0 2em 0.5em 2em;\n  display: flex;\n  justify-content: center;\n}\n",
                    "styleUrl": "./endpoint-view.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "DesignerStore",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 18,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "DesignerStore",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"fullscreen column center-hr\">\n  <div class=\"container endpointview\">\n    <div class=\"row\">\n      <div class=\"sidebar\">\n        <app-side-bar></app-side-bar>\n      </div>\n      <div class=\"endpoint\">\n        <div>\n          <app-overview-header [header]=\"headerContent\"></app-overview-header>\n        </div>\n        <div class=\"column\">\n          <app-search-bar\n            class=\"column flex-grow\"\n            [list]=\"endpointList\"\n            (filteredList)=\"setFilteredList($event)\"\n            [itemToStringFn]=\"endpointToString\"\n          >\n          </app-search-bar>\n          <p id=\"notFoundMessage\" *ngIf=\"showNotFound()\">\n            No Result(s) Found\n          </p>\n          <app-endpoint-list\n            class=\"row flex-grow\"\n            [endpoints]=\"filteredList\"\n          ></app-endpoint-list>\n        </div>\n      </div>\n    </div>\n  </div>\n\n  <ng-template #headerContent>\n    <div class=\"title\">\n      <h3>{{ !!mockDefinition ? mockDefinition.metadata.title : null }}</h3>\n    </div>\n    <p>{{ !!mockDefinition ? mockDefinition.metadata.description : null }}</p>\n  </ng-template>\n</div>\n"
        },
        {
            "name": "ExportToServerViewComponent",
            "id": "component-ExportToServerViewComponent-e03892bd8ab678f524455acb2bba5165",
            "file": "src/app/components/export-to-server-view/export-to-server-view.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-export-to-server-view",
            "styleUrls": [
                "./export-to-server-view.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./export-to-server-view.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "controlsMockDefinitionToString",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "emptyListMessageServerBox",
                    "defaultValue": "'No Mockdefinitions'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        143
                    ]
                },
                {
                    "name": "exportErrors",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "exportStatusMessage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "inputControl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormControl",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "isUploadingMocks",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "leftHandSideMocks",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormArray",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "rightHandSideMocks",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MockDefinition[]",
                    "optional": false,
                    "description": "",
                    "line": 20
                }
            ],
            "methodsClass": [
                {
                    "name": "exportMocksFromForm",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<boolean[]>",
                    "typeParameters": [],
                    "line": 89,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nExports the mocks from the form, and returns a list of observables representing the state\nof the export\n",
                    "description": "<p>Exports the mocks from the form, and returns a list of observables representing the state\nof the export</p>\n"
                },
                {
                    "name": "getSpinnerId",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 121,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onBack",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 117,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nReturns to the previous location\n",
                    "description": "<p>Returns to the previous location</p>\n"
                },
                {
                    "name": "onListOutput",
                    "args": [
                        {
                            "name": "list",
                            "type": "FormControl[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 103,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSets the mockDefinitions property equal to the list of Mockdefinitions derived from the\nFormControl values.\none list to the other.\n",
                    "description": "<p>Sets the mockDefinitions property equal to the list of Mockdefinitions derived from the\nFormControl values.\none list to the other.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 3502,
                                "end": 3506,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "list"
                            },
                            "type": "FormControl[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 3496,
                                "end": 3501,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>The list of FormControls given by the shuttle list when the user moves items from\none list to the other.</p>\n"
                        }
                    ]
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe function called on submit. Submits the mock definitions to the server.\n",
                    "description": "<p>The function called on submit. Submits the mock definitions to the server.</p>\n",
                    "modifierKind": [
                        130
                    ]
                },
                {
                    "name": "resetForm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nMoves all Mockdefinitions to the left-hand side of the form; clears right-hand side\n",
                    "description": "<p>Moves all Mockdefinitions to the left-hand side of the form; clears right-hand side</p>\n",
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { Location } from '@angular/common';\nimport { FormControl, FormArray, AbstractControl } from '@angular/forms';\nimport { MockDefinition } from 'src/app/models/mock-definition/mock-definition.model';\nimport { DesignerStore } from 'src/app/store/designer-store';\nimport { NGXLogger } from 'ngx-logger';\nimport { ExportMockdefinitionService } from 'src/app/services/export-mockdefinition/export-mockdefinition.service';\nimport { Observable } from 'rxjs/internal/Observable';\nimport { finalize } from 'rxjs/operators';\nimport { every } from 'lodash';\nimport { OrbitalAdminService } from '../../services/orbital-admin/orbital-admin.service';\n\n@Component({\n  selector: 'app-export-to-server-view',\n  templateUrl: './export-to-server-view.component.html',\n  styleUrls: ['./export-to-server-view.component.scss']\n})\nexport class ExportToServerViewComponent implements OnInit {\n  readonly emptyListMessageServerBox = 'No Mockdefinitions';\n  rightHandSideMocks: MockDefinition[] = [];\n  leftHandSideMocks: FormArray;\n  inputControl: FormControl;\n  exportStatusMessage: string;\n  isUploadingMocks: boolean;\n  exportErrors: string;\n\n  controlsMockDefinitionToString = (control: AbstractControl) => (control.value as MockDefinition).metadata.title;\n\n  constructor(\n    private location: Location,\n    private store: DesignerStore,\n    private logger: NGXLogger,\n    private mockService: ExportMockdefinitionService,\n    private service: OrbitalAdminService\n  ) {}\n\n  ngOnInit() {\n    this.inputControl = new FormControl('');\n\n    this.resetForm();\n  }\n\n  /**\n   * Moves all Mockdefinitions to the left-hand side of the form; clears right-hand side\n   */\n  private resetForm() {\n    const keys = Object.keys(this.store.state.mockDefinitions);\n    const controls = keys.map(k => new FormControl(this.store.state.mockDefinitions[k]));\n    this.leftHandSideMocks = new FormArray(controls);\n    this.rightHandSideMocks = [];\n  }\n\n  /**\n   * The function called on submit. Submits the mock definitions to the server.\n   */\n  async onSubmit() {\n    this.isUploadingMocks = true;\n    this.exportErrors = '';\n    this.exportStatusMessage = '';\n    this.logger.debug('URL contents before uploading', this.inputControl.value);\n\n    return this.exportMocksFromForm()\n      .pipe(\n        finalize(() => {\n          this.isUploadingMocks = false;\n          this.resetForm();\n        })\n      )\n      .subscribe(\n        uploadMockStatus => {\n          if (every(uploadMockStatus)) {\n            this.logger.debug('Received response from export to server promise resolution');\n            this.exportStatusMessage = 'File(s) successfully exported';\n            this.mockService.urlCache = this.inputControl.value;\n          } else {\n            this.exportErrors = 'File(s) could not be exported because of an error';\n          }\n        },\n        () => {\n          this.exportErrors = 'File(s) could not be exported because of an error';\n        }\n      );\n  }\n\n  /**\n   * Exports the mocks from the form, and returns a list of observables representing the state\n   * of the export\n   */\n  exportMocksFromForm(): Observable<boolean[]> {\n    this.logger.debug('Mockdefinitions to export', this.rightHandSideMocks);\n    return this.service.exportMockDefinitions(\n      this.inputControl.value,\n      this.rightHandSideMocks\n    );\n  }\n\n  /**\n   * Sets the mockDefinitions property equal to the list of Mockdefinitions derived from the\n   * FormControl values.\n   * @param list The list of FormControls given by the shuttle list when the user moves items from\n   * one list to the other.\n   */\n  onListOutput(list: FormControl[]) {\n    this.rightHandSideMocks = list.map(control => control.value);\n  }\n\n  /**\n   * Getter function that returns true if no Mock Definitions have been selected for\n   */\n  get disabled(): boolean {\n    return this.rightHandSideMocks.length === 0 || this.isUploadingMocks;\n  }\n\n  /**\n   * Returns to the previous location\n   */\n  onBack() {\n    this.location.back();\n  }\n\n  getSpinnerId() {\n    return 'hide-spinner';\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "mat-card {\n  min-width: 70vw;\n  min-height: 70vh;\n  margin: 6.824vh auto;\n\n  mat-card-title,\n  mat-card-subtitle {\n    align-self: center;\n    color: #000;\n    padding-top: 0.6em;\n  }\n\n  .button-div {\n    justify-content: space-between;\n    padding: 0 4em;\n    button {\n      padding: 0 2.5em;\n    }\n  }\n\n  .div-body {\n    margin: 0 2em;\n    overflow: visible;\n\n    app-shuttle-list {\n      height: 100%;\n      padding: 2em 4em;\n      max-height: calc(85% - 4em);\n      justify-content: flex-start;\n      align-self: stretch;\n\n      ::ng-deep > *:first-child {\n        flex-grow: 1;\n      }\n    }\n  }\n}\n\n.list-item {\n  width: 100%;\n  margin: 1em 0 !important;\n  h5 {\n    font-weight: 400;\n    font-size: 1.2em;\n    margin: 0;\n  }\n}\n.container {\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  mat-select {\n    min-width: 4.5em;\n    padding-bottom: 0.32em;\n    margin-right: 0.3em;\n  }\n  app-text-input {\n    flex: 0 !important;\n    text-transform: capitalize;\n  }\n\n  div#submit-buttons {\n    display: flex;\n    flex-direction: row;\n    margin-left: 1em;\n    mat-spinner {\n      margin-left: 10px;\n      flex-direction: center;\n\n      & #show-spinner {\n        display: visible !important;\n      }\n\n      &#hide-spinner {\n        display: none;\n      }\n    }\n  }\n}\n\n.error-message {\n  color: red;\n}\n\n.status-message {\n  font-size: 0.8em;\n}",
                    "styleUrl": "./export-to-server-view.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "location",
                        "type": "Location",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "store",
                        "type": "DesignerStore",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "logger",
                        "type": "NGXLogger",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "mockService",
                        "type": "ExportMockdefinitionService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "service",
                        "type": "OrbitalAdminService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 27,
                "jsdoctags": [
                    {
                        "name": "location",
                        "type": "Location",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "DesignerStore",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "logger",
                        "type": "NGXLogger",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "mockService",
                        "type": "ExportMockdefinitionService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "service",
                        "type": "OrbitalAdminService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "disabled": {
                    "name": "disabled",
                    "getSignature": {
                        "name": "disabled",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 110,
                        "rawdescription": "Getter function that returns true if no Mock Definitions have been selected for",
                        "description": "<p>Getter function that returns true if no Mock Definitions have been selected for</p>\n"
                    }
                }
            },
            "templateData": "<mat-card class=\"column\">\n    <mat-card-title class=\"capitalize\">Export to Server</mat-card-title>\n    <mat-card-subtitle\n      >Export local Mockdefinition file(s) to a server</mat-card-subtitle\n    >\n    <div class=\"column center-hr flex-grow div-body\">\n      <app-tool-tip\n        message=\"Enter the Server URI that your Mockdefinition files should be exported to\"\n      >\n      <div class=\"container\">\n          <app-text-input\n            title=\"Server URI\"\n            maxLength=\"200\"\n            [control]=\"inputControl\"\n          ></app-text-input>\n          <div *ngIf=\"disabled\" id=\"submit-buttons\">\n            <mat-spinner diameter=\"25\" [id]=\"getSpinnerId()\"></mat-spinner>\n          </div>\n        </div>\n      </app-tool-tip>\n      <div *ngIf=\"!!exportStatusMessage?.length\" class=\"status-message\">{{ exportStatusMessage }}</div>\n      <div *ngIf=\"!!exportErrors?.length\" class=\"error-message\">{{ exportErrors }}</div>\n      <app-shuttle-list\n        class=\"column flex-grow\"\n        [list]=\"leftHandSideMocks.controls\"\n        [itemToStringFn]=\"controlsMockDefinitionToString\"\n        [emptyListMessage]=\"emptyListMessageServerBox\"\n        leftTitle=\"Local Files\"\n        rightTitle=\"Files Selected to Export\"\n        (outputList)=\"onListOutput($event)\"\n      ></app-shuttle-list>\n    </div>\n    <div class=\"row button-div\">\n      <button mat-raised-button color=\"primary\" (click)=\"onBack()\">\n        Back\n      </button>\n      <button\n        mat-raised-button\n        color=\"primary\"\n        [disabled]=\"disabled\"\n        (click)=\"onSubmit()\"\n      >\n        Upload\n      </button>\n    </div>\n  </mat-card>\n\n  <ng-template #listItemTemplate let-control=\"item\">\n    <div class=\"list-item\">\n      <h5 class=\"capitalize\">{{ control.value?.metadata?.title }}</h5>\n      <mat-divider></mat-divider>\n    </div>\n  </ng-template>\n"
        },
        {
            "name": "FileInputComponent",
            "id": "component-FileInputComponent-be395700a9d4f43f2364b8c51863254b",
            "file": "src/app/components/orbital-common/file-input/file-input.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-file-input",
            "styleUrls": [
                "./file-input.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./file-input.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "accept",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "string"
                },
                {
                    "name": "errorMessage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 58,
                    "type": ""
                },
                {
                    "name": "label",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "string"
                },
                {
                    "name": "multiple",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "boolean"
                }
            ],
            "outputsClass": [
                {
                    "name": "clearContentEmit",
                    "defaultValue": "new EventEmitter<boolean>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "EventEmitter"
                },
                {
                    "name": "fileContentEmit",
                    "defaultValue": "new EventEmitter<string>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "EventEmitter"
                },
                {
                    "name": "fileNameEmit",
                    "defaultValue": "new EventEmitter<string>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "currentFileName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "errormessages",
                    "defaultValue": "{} as Record<string, string[]>",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "fileContent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "fileName",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "methodsClass": [
                {
                    "name": "emitClearContent",
                    "args": [
                        {
                            "name": "x",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nEmits a value to Import From File to clear the form\n\n",
                    "description": "<p>Emits a value to Import From File to clear the form</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1770,
                                "end": 1771,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "x"
                            },
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1764,
                                "end": 1769,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>emitted value</p>\n"
                        }
                    ]
                },
                {
                    "name": "emitFileContent",
                    "args": [
                        {
                            "name": "files",
                            "type": "File[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nEmits the contents of the files as strings\n",
                    "description": "<p>Emits the contents of the files as strings</p>\n",
                    "jsdoctags": [
                        {
                            "name": "files",
                            "type": "File[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\nimport { NGXLogger } from 'ngx-logger';\nimport { ReadFileService } from 'src/app/services/read-file/read-file.service';\nimport { map } from 'rxjs/operators';\nimport { recordAdd, recordFirstOrDefaultKey, recordFirstOrDefault } from 'src/app/models/record';\n\n@Component({\n  selector: 'app-file-input',\n  templateUrl: './file-input.component.html',\n  styleUrls: ['./file-input.component.scss']\n})\nexport class FileInputComponent implements OnInit {\n  constructor(private logger: NGXLogger, private readfileparser: ReadFileService) {}\n  fileName: string[] = [];\n  currentFileName: string;\n  fileContent: string;\n  @Input() label = '';\n  @Input() accept = '';\n  @Input() multiple = true;\n  private errormessages = {} as Record<string, string[]>;\n  @Output() fileContentEmit = new EventEmitter<string>();\n  @Output() fileNameEmit = new EventEmitter<string>();\n  @Output() clearContentEmit = new EventEmitter<boolean>();\n\n  /**\n   * Emits the contents of the files as strings\n   */\n  emitFileContent(files: File[]) {\n    this.fileName = [];\n    for (const file of files) {\n      this.readfileparser\n        .read(file)\n        .pipe(map(fileReadresult => fileReadresult))\n        .subscribe(\n          fileReadresult => {\n            this.fileName.push(file.name);\n            this.currentFileName = file.name;\n            this.fileContent = fileReadresult;\n            this.fileNameEmit.emit(this.currentFileName);\n            this.fileContentEmit.emit(this.fileContent);\n          },\n          err => recordAdd(this.errormessages, file.name, err)\n        );\n    }\n    this.logger.log('File Contents emitted');\n  }\n\n  /**\n   * Emits a value to Import From File to clear the form\n   *\n   * @param x emitted value\n   */\n  emitClearContent(x: boolean) {\n    this.clearContentEmit.emit(x);\n  }\n\n  @Input()\n  set errorMessage(errorMessage: Record<string, string[]>) {\n    this.errormessages = errorMessage;\n  }\n\n  get errorMessages() {\n    return this.errormessages;\n  }\n\n  ngOnInit() {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "mat-form-field {\n  display: flex;\n  flex-direction: column;\n  flex: 1;\n  align-items: stretch;\n\n  div {\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n    .div-file-name {\n      flex: 1;\n      color: rgba(0, 0, 0, 0.38);\n      align-items: center;\n      overflow: hidden;\n    }\n  }\n}\n.noDots {\n  list-style-type:none;\n  list-style-image:none;\n}",
                    "styleUrl": "./file-input.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "logger",
                        "type": "NGXLogger",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "readfileparser",
                        "type": "ReadFileService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "logger",
                        "type": "NGXLogger",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "readfileparser",
                        "type": "ReadFileService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "errorMessage": {
                    "name": "errorMessage",
                    "setSignature": {
                        "name": "errorMessage",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "errorMessage",
                                "type": "Record<string | string[]>",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 58,
                        "jsdoctags": [
                            {
                                "name": "errorMessage",
                                "type": "Record<string | string[]>",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "errorMessages": {
                    "name": "errorMessages",
                    "getSignature": {
                        "name": "errorMessages",
                        "type": "",
                        "returnType": "",
                        "line": 62
                    }
                }
            },
            "templateData": "<mat-form-field floatLabel=\"always\">\n  <mat-label>{{ label }}</mat-label>\n  <div>\n    <div class=\"div-file-name\">\n      <ul class=\"noDots\">\n        <li *ngFor=\"let names of fileName\">\n          {{ names }}\n        </li>\n      </ul>\n    </div>\n    <button\n      mat-raised-button\n      color=\"primary\"\n      type=\"button\"\n      (click)=\"fileInput.click()\"\n      (click)=\"emitClearContent(true)\"\n    >\n      Choose File{{ this.multiple ? \"(s)\" : \"\" }}\n    </button>\n  </div>\n\n  <input\n    #fileInput\n    [multiple]=\"this.multiple\"\n    type=\"file\"\n    (change)=\"emitFileContent($event.target.files)\"\n    style=\"display:none;\"\n    [accept]=\"accept\"\n    onclick=\"this.value=null;\"\n  />\n  <input matInput style=\"display:none;\" />\n</mat-form-field>\n\n<div *ngFor=\"let message of this.errorMessages | keyvalue\">\n  <p class=\"error-message\">{{ message.key }} :</p>\n  <li class=\"error-message\" *ngFor=\"let v of message.value\">\n    {{ v }}\n  </li>\n</div>\n\n"
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-246e2a69dc126a3bd76c6328dd3b93e2",
            "file": "src/stories/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-header",
            "styleUrls": [
                "./header.css"
            ],
            "styles": [],
            "template": "<header>    <div class=\"wrapper\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <storybook-button\n          *ngIf=\"user\"\n          size=\"small\"\n          (onClick)=\"onLogout.emit($event)\"\n          label=\"Log out\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          (onClick)=\"onLogin.emit($event)\"\n          label=\"Log in\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          primary\n          size=\"small\"\n          (onClick)=\"onCreateAccount.emit($event)\"\n          label=\"Sign up\"\n        ></storybook-button>\n      </div>\n    </div>\n  </header>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 53,
                    "type": ""
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 62,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 56,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 59,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-header',\n  template: `<header>\n    <div class=\"wrapper\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <storybook-button\n          *ngIf=\"user\"\n          size=\"small\"\n          (onClick)=\"onLogout.emit($event)\"\n          label=\"Log out\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          (onClick)=\"onLogin.emit($event)\"\n          label=\"Log in\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          primary\n          size=\"small\"\n          (onClick)=\"onCreateAccount.emit($event)\"\n          label=\"Sign up\"\n        ></storybook-button>\n      </div>\n    </div>\n  </header>`,\n  styleUrls: ['./header.css'],\n})\nexport default class HeaderComponent {\n  @Input()\n  user: unknown = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".wrapper {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\n  padding: 15px 20px;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n}\n\nsvg {\n  display: inline-block;\n  vertical-align: top;\n}\n\nh1 {\n  font-weight: 900;\n  font-size: 20px;\n  line-height: 1;\n  margin: 6px 0 6px 10px;\n  display: inline-block;\n  vertical-align: top;\n}\n\nbutton + button {\n  margin-left: 10px;\n}\n",
                    "styleUrl": "./header.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "HomeViewComponent",
            "id": "component-HomeViewComponent-e2446c6d663250456cb0c19a8ec2f981",
            "file": "src/app/components/home-view/home-view.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-home-view",
            "styleUrls": [
                "./home-view.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./home-view.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "navigateTo",
                    "args": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-home-view',\n  templateUrl: './home-view.component.html',\n  styleUrls: ['./home-view.component.scss']\n})\nexport class HomeViewComponent implements OnInit {\n\n  constructor(private router: Router) { }\n\n  ngOnInit() {\n  }\n\n  navigateTo(url: string) {\n    this.router.navigateByUrl(url);\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".logo {\n  padding: 1rem 0;\n  h1 {\n    font-size: 4.5em;\n    font-weight: 500;\n  }\n}\n\n.card {\n  width: 75.234vw;\n  max-width: 963px;\n  box-shadow: 0px 19px 38px rgba(0, 0, 0, 0.3),\n    0px 15px 12px rgba(0, 0, 0, 0.22);\n  margin-top: 2rem;\n}\n\n.line {\n  border-right: 1.2px solid rgba(0, 0, 0, 0.24);\n}\n\n.tile-content {\n  flex: 1;\n  justify-content: flex-start;\n  height: 100%;\n\n  h2 {\n    margin-bottom: 2vh;\n    font-size: 1.5em;\n    font-weight: 500;\n  }\n  button {\n    margin-bottom: 2vh;\n    font-size: 1em;\n    font-weight: 500;\n    min-width: 10.938vw;\n    max-width: 175.5px;\n  }\n}\n\n.buttons {\n  flex: 1;\n}\n",
                    "styleUrl": "./home-view.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"fullscreen column center-hr\">\n  <div class=\"logo\">\n    <h1>\n      <img src=\"assets/Orbital_Logo.svg\" height=\"100%\" width=\"100%\"/>\n    </h1>\n  </div>\n  <mat-card class=\"card\">\n    <mat-grid-list cols=\"2\" rowHeight=\"217\">\n      <mat-grid-tile colspan=\"1\" rowspan=\"0.5\">\n        <div class=\"column center tile-content line\">\n          <h2 class=\"capitalize\">New from OpenAPI Definition</h2>\n          <div class=\"column center buttons\">\n            <button\n              mat-raised-button\n              class=\"capitalize\"\n              color=\"primary\"\n              (click)=\"navigateTo('/create-new-mock')\"\n            >\n              Create New Mock\n            </button>\n          </div>\n        </div>\n      </mat-grid-tile>\n      <mat-grid-tile colspan=\"1\">\n        <div class=\"column center tile-content\">\n          <h2 class=\"capitalize\">Import an Existing Mockdefinition</h2>\n          <div class=\"column center buttons\">\n            <button\n              mat-raised-button\n              color=\"primary\"\n              (click)=\"navigateTo('/import-from-file')\"\n            >\n              From File(s)\n            </button>\n            <button\n              mat-raised-button\n              class=\"capitalize\"\n              color=\"primary\"\n              (click)=\"navigateTo('/import-from-server')\"\n            >\n              From Server\n            </button>\n          </div>\n        </div>\n      </mat-grid-tile>\n    </mat-grid-list>\n  </mat-card>\n</div>\n"
        },
        {
            "name": "ImportFromFileViewComponent",
            "id": "component-ImportFromFileViewComponent-45ae092788e1d4ec83893e008d19d282",
            "file": "src/app/components/import-from-file-view/import-from-file-view.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-import-from-file-view",
            "styleUrls": [
                "./import-from-file-view.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./import-from-file-view.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "buttonDisabled",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "errorMessageToEmitFromCreate",
                    "defaultValue": "{} as Record<string, string[]>",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "mockdefinitionInvalid",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "mockDefinitionNameString",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "mockDefinitionString",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "mockdefinitionValid",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "tempName",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "validFileFlag",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                }
            ],
            "methodsClass": [
                {
                    "name": "checkEmit",
                    "args": [
                        {
                            "name": "x",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 96,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThis function checks if the emitted value is valid and that\nelements in the mockDefinitionNameString exist, then clears\nthe collections for the next use of the form.\n\n",
                    "description": "<p>This function checks if the emitted value is valid and that\nelements in the mockDefinitionNameString exist, then clears\nthe collections for the next use of the form.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 3254,
                                "end": 3255,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "x"
                            },
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 3248,
                                "end": 3253,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>emitted value</p>\n"
                        }
                    ]
                },
                {
                    "name": "clearArrays",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 138,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nClears the local arrays\n",
                    "description": "<p>Clears the local arrays</p>\n"
                },
                {
                    "name": "createMock",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 108,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ncreateMock is a function that is responsible for storing the new MockDefinition\nin the designer store and navigating to the mock editor if the form is valid. If\nthe form is invalid the function does nothing.\n",
                    "description": "<p>createMock is a function that is responsible for storing the new MockDefinition\nin the designer store and navigating to the mock editor if the form is valid. If\nthe form is invalid the function does nothing.</p>\n"
                },
                {
                    "name": "goBack",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 131,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGoes back to the previous location in the app\n",
                    "description": "<p>Goes back to the previous location in the app</p>\n"
                },
                {
                    "name": "isValid",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 145,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setMockDefinition",
                    "args": [
                        {
                            "name": "fileStringFromFileInput",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 73,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSets the string representation of the file's content from the input-file component.\n\n",
                    "description": "<p>Sets the string representation of the file&#39;s content from the input-file component.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2417,
                                "end": 2440,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "fileStringFromFileInput"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2411,
                                "end": 2416,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>string representation of the file&#39;s content</p>\n"
                        }
                    ]
                },
                {
                    "name": "setMockDefinitionName",
                    "args": [
                        {
                            "name": "fileStringName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 84,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSets the file name in the component. This value is emitted from the input-file component.\n\n",
                    "description": "<p>Sets the file name in the component. This value is emitted from the input-file component.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2841,
                                "end": 2855,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "fileStringName"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2835,
                                "end": 2840,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>string representation of the file&#39;s name</p>\n"
                        }
                    ]
                },
                {
                    "name": "validateMock",
                    "args": [
                        {
                            "name": "mockDefinitionString",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nValidates the Mockdefinition and returns a boolean validation status\n",
                    "description": "<p>Validates the Mockdefinition and returns a boolean validation status</p>\n",
                    "modifierKind": [
                        130
                    ],
                    "jsdoctags": [
                        {
                            "name": "mockDefinitionString",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Output, EventEmitter } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { Location } from '@angular/common';\nimport { NGXLogger } from 'ngx-logger';\nimport { MockDefinitionService } from 'src/app/services/mock-definition/mock-definition.service';\nimport { map } from 'rxjs/operators';\nimport { recordAdd } from 'src/app/models/record';\n\n@Component({\n  selector: 'app-import-from-file-view',\n  templateUrl: './import-from-file-view.component.html',\n  styleUrls: ['./import-from-file-view.component.scss']\n})\nexport class ImportFromFileViewComponent implements OnInit {\n  private mockDefinitionString: string[] = [];\n  mockdefinitionValid: string[] = [];\n  mockdefinitionInvalid: string[] = [];\n  mockDefinitionNameString: string[] = [];\n  errorMessageToEmitFromCreate = {} as Record<string, string[]>;\n  validFileFlag = true;\n  buttonDisabled = true;\n  tempName = '';\n\n  constructor(\n    private router: Router,\n    private location: Location,\n    private mockDefinitionService: MockDefinitionService,\n    private logger: NGXLogger\n  ) {}\n\n  isValid() {\n    return this.validFileFlag;\n  }\n\n  /**\n   * Validates the Mockdefinition and returns a boolean validation status\n   */\n  async validateMock(mockDefinitionString: string, index: number) {\n    this.logger.log('validateMock ' + mockDefinitionString);\n    this.mockDefinitionService.validateMockDefinition(mockDefinitionString).subscribe(\n      value => {\n        if (value) {\n          this.logger.log('mock definition file selected is valid');\n          this.validFileFlag = true;\n          this.mockdefinitionValid.push(this.tempName);\n          if (this.mockdefinitionInvalid.length > 0) {\n            this.buttonDisabled = true;\n            this.validFileFlag = false;\n          } else {\n            this.buttonDisabled = false;\n          }\n        }\n      },\n      error => {\n        this.logger.error('mock definition is invalid and was not saved to the store');\n        this.errorMessageToEmitFromCreate = recordAdd(\n          this.errorMessageToEmitFromCreate,\n          this.mockDefinitionNameString[index],\n          [error.message]\n        );\n        this.validFileFlag = false;\n        this.buttonDisabled = true;\n        this.mockdefinitionInvalid.push(this.tempName);\n      }\n    );\n  }\n\n  /**\n   * Sets the string representation of the file's content from the input-file component.\n   *\n   * @param fileStringFromFileInput string representation of the file's content\n   */\n  setMockDefinition(fileStringFromFileInput: string) {\n    this.mockDefinitionString.push(fileStringFromFileInput);\n    const index = this.mockDefinitionString.length - 1;\n    this.validateMock(fileStringFromFileInput, index);\n  }\n\n  /**\n   * Sets the file name in the component. This value is emitted from the input-file component.\n   *\n   * @param fileStringName string representation of the file's name\n   */\n  setMockDefinitionName(fileStringName: string) {\n    this.mockDefinitionNameString.push(fileStringName);\n    this.tempName = fileStringName;\n  }\n\n  /**\n   * This function checks if the emitted value is valid and that\n   * elements in the mockDefinitionNameString exist, then clears\n   * the collections for the next use of the form.\n   *\n   * @param x emitted value\n   */\n  checkEmit(x: boolean) {\n    if (this.mockDefinitionNameString.length > 0 && x) {\n      this.errorMessageToEmitFromCreate = {} as Record<string, string[]>;\n      this.clearArrays();\n    }\n  }\n\n  /**\n   * createMock is a function that is responsible for storing the new MockDefinition\n   * in the designer store and navigating to the mock editor if the form is valid. If\n   * the form is invalid the function does nothing.\n   */\n  createMock() {\n    this.mockDefinitionString.forEach((mock, index) => {\n      this.mockDefinitionService\n        .AddMockDefinitionToStore(mock)\n        .pipe(map(value => value))\n        .subscribe(\n          value => {\n            if (value) {\n              this.logger.log('mock definition was saved to the store');\n              this.router.navigateByUrl('endpoint-view');\n            }\n          },\n          error => {\n            this.logger.error('mock definition is invalid and was not saved to the store');\n            recordAdd(this.errorMessageToEmitFromCreate, this.mockDefinitionNameString[index], [error.message]);\n          }\n        );\n    });\n  }\n\n  /**\n   * Goes back to the previous location in the app\n   */\n  goBack() {\n    this.location.back();\n  }\n\n  /**\n   * Clears the local arrays\n   */\n  clearArrays() {\n    this.mockDefinitionNameString = [];\n    this.mockDefinitionString = [];\n    this.mockdefinitionInvalid = [];\n    this.mockdefinitionValid = [];\n  }\n\n  ngOnInit() {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".buttons-div {\n  justify-content: space-between;\n  justify-self: flex-end;\n  align-items: flex-end;\n  margin: 2em 0;\n  margin-top: 50px;\n  padding: 10px;\n  button {\n    width: 10.234vw;\n    max-width: 131px;\n  }\n}\n\n.error-message {\n  color: red;\n}\n\n.import-from-file-container {\n  margin-top: 100px;\n  mat-card-title,\n  mat-card-subtitle {\n    text-align: center;\n  }\n}\n\n// hide the last divider in the list so it doesn't divide the end with no items\nmat-card div:last-child mat-divider {\n  display: none;\n}\n\n.noDots {\n  list-style-type:none;\n  list-style-image:none;\n}\n\n.flexColumn {\n  display: flex;\n  flex-direction: column;\n}\n\n.expand {\n  height: 100%;\n  width: 30.3vw;\n  margin-top: 20px;\n}\n\n.card {\n  height: 100%;\n}\n\n.errorStyle {\n  color: red;\n}",
                    "styleUrl": "./import-from-file-view.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "location",
                        "type": "Location",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "mockDefinitionService",
                        "type": "MockDefinitionService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "logger",
                        "type": "NGXLogger",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 22,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "location",
                        "type": "Location",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "mockDefinitionService",
                        "type": "MockDefinitionService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "logger",
                        "type": "NGXLogger",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<mat-card class=\"mat-elevation-z20 import-from-file-container flexColumn\">\n  <mat-card-title>Import From File(s)</mat-card-title>\n  <mat-card-subtitle>Import existing Mockdefinition file(s) below</mat-card-subtitle>\n  <app-file-input \n  class=\"capitalize\" \n  (fileContentEmit)=\"setMockDefinition($event)\"\n  (fileNameEmit)=\"setMockDefinitionName($event)\" \n  (clearContentEmit)=\"checkEmit(true)\" \n  label=\"Select Files - Required\"\n  accept=\".json\" \n  [errorMessage]=\"errorMessageToEmitFromCreate\">\n  </app-file-input>\n    <mat-card>\n      <mat-card-subtitle>\n        <h3>Imported Mockdefinition(s)</h3>\n      </mat-card-subtitle>\n            <mat-card-content class=\"expand\">\n              <mat-list dense>\n                \n                <mat-list-item *ngFor=\"let mocks of mockdefinitionValid\">\n                  <h3>{{ mocks | titlecase }}</h3>\n                  <mat-icon matListIcon color=\"primary\">check_circle_outline</mat-icon>\n                </mat-list-item>\n                <mat-list-item *ngFor=\"let mocks of mockdefinitionInvalid\">\n                  <h3>{{ mocks | titlecase }}</h3>\n                  <mat-icon matListIcon color=\"warn\">cancel</mat-icon>\n                </mat-list-item>\n\n              <p class=\"errorStyle\" *ngIf=\"!isValid()\">Valid File(s) Required</p>\n            </mat-list>\n            </mat-card-content>\n   </mat-card>\n<mat-card-footer>\n  <div class=\"row buttons-div\">\n    <button mat-raised-button color=\"primary\" (click)=\"goBack()\">\n      Back\n    </button>\n    <button mat-raised-button color=\"primary\" [disabled]=\"buttonDisabled\" (click)=\"createMock()\">\n      Next\n    </button>\n  </div>\n</mat-card-footer>\n</mat-card>"
        },
        {
            "name": "ImportFromServerViewComponent",
            "id": "component-ImportFromServerViewComponent-14fe405e2dfadeea28c824f79b70d9aa",
            "file": "src/app/components/import-from-server-view/import-from-server-view.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-import-from-server-view",
            "styleUrls": [
                "./import-from-server-view.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./import-from-server-view.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "errorsRestRequest",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 37,
                    "type": "object"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "body",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "concatToURI",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "controlsMockDefinitionToString",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "emptyListMessageServerBox",
                    "defaultValue": "'No Mockdefinition(s) '",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        143
                    ]
                },
                {
                    "name": "errors",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "formArray",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormArray",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "inputControl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormControl",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "mockDefinitions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MockDefinition[]",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "options",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "requestInProgress",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "requestObserver",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observer<MockDefinition[]>",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "title",
                    "defaultValue": "'Server URI'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "urlMaxLength",
                    "defaultValue": "2048",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        124,
                        143
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "getSpinnerId",
                    "args": [],
                    "optional": false,
                    "returnType": "\"show-spinner\" | \"hide-spinner\"",
                    "typeParameters": [],
                    "line": 77,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onBack",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 138,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nReturns to the previous location\n",
                    "description": "<p>Returns to the previous location</p>\n"
                },
                {
                    "name": "onListOutput",
                    "args": [
                        {
                            "name": "list",
                            "type": "FormControl[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 108,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSets the Mockdefinitions property equal to the list of MockDefinitions derived from the\nFormControl values.\none list to the other.\n",
                    "description": "<p>Sets the Mockdefinitions property equal to the list of MockDefinitions derived from the\nFormControl values.\none list to the other.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 3159,
                                "end": 3163,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "list"
                            },
                            "type": "FormControl[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 3153,
                                "end": 3158,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>The list of FormControls given by the shuttle list when the user moves items from\none list to the other.</p>\n"
                        }
                    ]
                },
                {
                    "name": "onResponse",
                    "args": [
                        {
                            "name": "response",
                            "type": "MockDefinition[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 124,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIf the response returned is not an error or domexceptions it sets the controls\nvalues to the response body. The control is then responsible for validation.\n",
                    "description": "<p>If the response returned is not an error or domexceptions it sets the controls\nvalues to the response body. The control is then responsible for validation.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 3746,
                                "end": 3754,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "response"
                            },
                            "type": "MockDefinition[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 3740,
                                "end": 3745,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>HttpResponse received by the input</p>\n"
                        }
                    ]
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 94,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe function called on submit. Sets the Mockdefinitions in the DesignerStore\n",
                    "description": "<p>The function called on submit. Sets the Mockdefinitions in the DesignerStore</p>\n"
                },
                {
                    "name": "sendRequest",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 81,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "sendRequestDisabled",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 73,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Location } from '@angular/common';\nimport { Component, Input, OnInit } from '@angular/core';\nimport { AbstractControl, FormArray, FormControl, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { NGXLogger } from 'ngx-logger';\nimport { Observer } from 'rxjs';\nimport { MockDefinition } from 'src/app/models/mock-definition/mock-definition.model';\nimport { OrbitalAdminService } from 'src/app/services/orbital-admin/orbital-admin.service';\nimport { DesignerStore } from 'src/app/store/designer-store';\n\n@Component({\n  selector: 'app-import-from-server-view',\n  templateUrl: './import-from-server-view.component.html',\n  styleUrls: ['./import-from-server-view.component.scss']\n})\nexport class ImportFromServerViewComponent implements OnInit {\n  static readonly urlMaxLength = 2048;\n  readonly emptyListMessageServerBox = 'No Mockdefinition(s) ';\n\n\n  mockDefinitions: MockDefinition[] = [];\n  formArray: FormArray;\n  requestObserver: Observer<MockDefinition[]>;\n  options: object = {};\n  body?: string = null;\n\n  concatToURI = '';\n\n  inputControl: FormControl;\n  requestInProgress = false;\n  title = 'Server URI';\n\n  errors: string;\n\n  controlsMockDefinitionToString = (control: AbstractControl) => (control.value as MockDefinition).metadata.title;\n\n  @Input() set errorsRestRequest(errors: object) {\n    if (!!this.inputControl) {\n      this.inputControl.setErrors(errors);\n    }\n  }\n\n  constructor(\n    private location: Location,\n    private logger: NGXLogger,\n    private designerStore: DesignerStore,\n    private router: Router,\n    private orbitalService: OrbitalAdminService\n  ) {\n    this.formArray = new FormArray([]);\n\n    this.requestObserver = {\n      next: event => {\n        this.onResponse(event);\n        this.errors = '';\n      },\n      error: () => {\n        this.errors = 'File(s) could not be imported because of an error';\n        this.requestInProgress = false;\n        this.formArray = new FormArray([]);\n      },\n      complete: () => (this.requestInProgress = false)\n    };\n  }\n\n  ngOnInit() {\n    this.inputControl = new FormControl(\n      '',\n      Validators.compose([Validators.maxLength(ImportFromServerViewComponent.urlMaxLength)])\n    );\n  }\n\n  sendRequestDisabled() {\n    return this.inputControl.value.length === 0 || this.requestInProgress;\n  }\n\n  getSpinnerId() {\n    return this.requestInProgress ? 'show-spinner' : 'hide-spinner';\n  }\n\n  sendRequest() {\n    this.inputControl.markAsDirty();\n    if (this.sendRequestDisabled) {\n      this.requestInProgress = true;\n      this.errorsRestRequest = null;\n\n      this.orbitalService.getAll(`${this.inputControl.value}${this.concatToURI}`).subscribe(this.requestObserver);\n    }\n  }\n\n  /**\n   * The function called on submit. Sets the Mockdefinitions in the DesignerStore\n   */\n  onSubmit() {\n    for (const mock of this.mockDefinitions) {\n      this.designerStore.appendMockDefinition(mock);\n      this.designerStore.mockDefinition = mock;\n    }\n    this.router.navigateByUrl('/endpoint-view');\n  }\n\n  /**\n   * Sets the Mockdefinitions property equal to the list of MockDefinitions derived from the\n   * FormControl values.\n   * @param list The list of FormControls given by the shuttle list when the user moves items from\n   * one list to the other.\n   */\n  onListOutput(list: FormControl[]) {\n    this.mockDefinitions = list.map(control => control.value);\n  }\n\n  /**\n   * Getter function that returns true if no Mock Definitions have been selected for\n   */\n  get disabled(): boolean {\n    return this.mockDefinitions.length === 0;\n  }\n\n  /**\n   * If the response returned is not an error or domexceptions it sets the controls\n   * values to the response body. The control is then responsible for validation.\n   * @param response HttpResponse received by the input\n   */\n  onResponse(response: MockDefinition[]) {\n    this.logger.debug('Received http response', response);\n\n    if (!!response) {\n      response.forEach(m => (m.openApi.tags = m.openApi.tags.filter(t => t.name !== 'openapi')));\n      this.formArray = new FormArray(response.map(mockDef => new FormControl(mockDef, null)));\n\n      this.logger.debug('ImportFormServerViewComponent FormArray value:', this.formArray);\n    }\n  }\n\n  /**\n   * Returns to the previous location\n   */\n  onBack() {\n    this.location.back();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "mat-card {\n  min-width: 70vw;\n  min-height: 70vh;\n  margin: 6.824vh auto;\n\n  mat-card-title,\n  mat-card-subtitle {\n    align-self: center;\n    color: #000;\n    padding-top: 0.6em;\n  }\n\n  .button-div {\n    justify-content: space-between;\n    padding: 0 4em;\n    button {\n      padding: 0 2.5em;\n    }\n  }\n\n  .div-body {\n    margin: 0 2em;\n    overflow: visible;\n\n    app-shuttle-list {\n      height: 100%;\n      padding: 2em 4em;\n      max-height: calc(85% - 4em);\n      justify-content: flex-start;\n      align-self: stretch;\n\n      ::ng-deep > *:first-child {\n        flex-grow: 1;\n      }\n    }\n  }\n}\n\n.list-item {\n  width: 100%;\n  margin: 1em 0 !important;\n  h5 {\n    font-weight: 400;\n    font-size: 1.2em;\n    margin: 0;\n  }\n}\n\n.container {\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  mat-select {\n    min-width: 4.5em;\n    padding-bottom: 0.32em;\n    margin-right: 0.3em;\n  }\n  app-text-input {\n    flex: 0 !important;\n    text-transform: capitalize;\n  }\n\n  div#submit-buttons {\n    display: flex;\n    flex-direction: row;\n    margin-left: 1em;\n    mat-spinner {\n      margin-left: 10px;\n      flex-direction: center;\n\n      & #show-spinner {\n        display: visible !important;\n      }\n\n      &#hide-spinner {\n        display: none;\n      }\n    }\n  }\n}\n\n.error-message-import {\n  margin-top: -13px;\n}\n\n.btn-upload {\n  width: 5vw;\n  height: 5vh;\n  min-width: 7em;\n}\n",
                    "styleUrl": "./import-from-server-view.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "location",
                        "type": "Location",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "logger",
                        "type": "NGXLogger",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "designerStore",
                        "type": "DesignerStore",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "orbitalService",
                        "type": "OrbitalAdminService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 41,
                "jsdoctags": [
                    {
                        "name": "location",
                        "type": "Location",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "logger",
                        "type": "NGXLogger",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "designerStore",
                        "type": "DesignerStore",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "orbitalService",
                        "type": "OrbitalAdminService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "errorsRestRequest": {
                    "name": "errorsRestRequest",
                    "setSignature": {
                        "name": "errorsRestRequest",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "errors",
                                "type": "object",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 37,
                        "jsdoctags": [
                            {
                                "name": "errors",
                                "type": "object",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "disabled": {
                    "name": "disabled",
                    "getSignature": {
                        "name": "disabled",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 115,
                        "rawdescription": "Getter function that returns true if no Mock Definitions have been selected for",
                        "description": "<p>Getter function that returns true if no Mock Definitions have been selected for</p>\n"
                    }
                }
            },
            "templateData": "<mat-card class=\"column\">\n  <mat-card-title class=\"capitalize\">Import from Server</mat-card-title>\n  <mat-card-subtitle\n    >Import existing Mockdefinition(s) below</mat-card-subtitle\n  >\n  <div class=\"column center-hr flex-grow div-body\">\n    <app-tool-tip\n      message=\"Enter the Server URI that your Mockdefinition(s) are hosted on\"\n    >\n\n    <form>\n      <div class=\"container\">\n        <div class=\"uri-field\">\n          <app-text-input\n            [title]=\"title\"\n            maxLength=\"200\"\n            [control]=\"inputControl\"\n          ></app-text-input>\n          <mat-hint class=\"error-message-import error-message\">{{errors}}</mat-hint>\n        </div>\n\n        <div id=\"submit-buttons\">\n          <button\n            mat-raised-button\n            color=\"primary\"\n            (click)=\"sendRequest()\"\n            [disabled]=\"sendRequestDisabled()\"\n            class=\"btn-upload\"\n          >\n            Submit</button\n          ><mat-spinner diameter=\"25\" [id]=\"getSpinnerId()\"></mat-spinner>\n\n        </div>\n\n      </div>\n    </form>\n    </app-tool-tip>\n    <app-shuttle-list\n      class=\"column flex-grow\"\n      [list]=\"formArray.controls\"\n      [itemToStringFn]=\"controlsMockDefinitionToString\"\n      [emptyListMessage]=\"emptyListMessageServerBox\"\n      leftTitle=\"Mockdefinition(s) from Server\"\n      rightTitle=\"Mockdefinition(s) To Import\"\n      (outputList)=\"onListOutput($event)\"\n    ></app-shuttle-list>\n  </div>\n  <div class=\"row button-div\">\n    <button mat-raised-button color=\"primary\" (click)=\"onBack()\">\n      Back\n    </button>\n    <button\n      mat-raised-button\n      color=\"primary\"\n      [disabled]=\"disabled\"\n      (click)=\"onSubmit()\"\n    >\n      Next\n    </button>\n  </div>\n</mat-card>\n"
        },
        {
            "name": "KvpAddComponent",
            "id": "component-KvpAddComponent-b1731af9bb000fa875a1c2fc4ad45dec",
            "file": "src/app/components/orbital-common/kvp-edit/kvp-add/kvp-add.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-kvp-add",
            "styleUrls": [
                "./kvp-add.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./kvp-add.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "kvp",
                    "defaultValue": "new EventEmitter<KeyValue<string, string>>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "errorMessage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "isValid",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "key",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "methodsClass": [
                {
                    "name": "isEmpty",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nReturns true if either the key or the value fields are empty and false otherwise\n",
                    "description": "<p>Returns true if either the key or the value fields are empty and false otherwise</p>\n"
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onAdd",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nChecks to see if the kvp inputs are empty and has no duplicates already in the kvp and adds them to the kvp\n",
                    "description": "<p>Checks to see if the kvp inputs are empty and has no duplicates already in the kvp and adds them to the kvp</p>\n"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Output, EventEmitter } from '@angular/core';\nimport { KeyValue } from '@angular/common';\nimport { NGXLogger } from 'ngx-logger';\n\n@Component({\n  selector: 'app-kvp-add',\n  templateUrl: './kvp-add.component.html',\n  styleUrls: ['./kvp-add.component.scss']\n})\nexport class KvpAddComponent implements OnInit {\n  // The kvp to be outputted to parent\n  @Output() kvp = new EventEmitter<KeyValue<string, string>>();\n\n  // The key and value properties that were bound to the template\n  key: string;\n  value: string;\n  isValid: boolean;\n  errorMessage: string;\n\n  constructor(private logger: NGXLogger) {}\n\n  ngOnInit() {\n    this.key = '';\n    this.value = '';\n    this.isValid = true;\n    this.errorMessage = '';\n  }\n\n  /**\n   * Checks to see if the kvp inputs are empty and has no duplicates already in the kvp and adds them to the kvp\n   */\n  onAdd() {\n    if (!this.isEmpty()) {\n      const kvpAdd: KeyValue<string, string> = {\n        key: this.key.trim(),\n        value: this.value\n      };\n\n      this.kvp.emit(kvpAdd);\n      this.isValid = true;\n      this.key = '';\n      this.value = '';\n      this.logger.debug('KvpAddComponent:onAdd: KVP emitted to parent', kvpAdd);\n    } else {\n      this.isValid = false;\n    }\n  }\n\n  /**\n   * Returns true if either the key or the value fields are empty and false otherwise\n   */\n  isEmpty(): boolean {\n    if (this.key.trim().length === 0 || this.value.length === 0) {\n      this.errorMessage = 'Empty Field(s) Found: Please Enter All Values';\n      this.logger.debug('Empty Field(s) Found: Please Enter All Values');\n      return true;\n    } else {\n      return false;\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".kvp-add {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n\n.add-button {\n  margin-right: 1.3em;\n}\n\n.kvp-value {\n  padding-right: 5em;\n}\n\n.kvp-key {\n  padding-left: 1.3em;\n  padding-right: 5em;\n  width: 12%;\n}\n\n.error-message {\n  padding-left: 1.6em;\n}\n",
                    "styleUrl": "./kvp-add.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "logger",
                        "type": "NGXLogger",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 18,
                "jsdoctags": [
                    {
                        "name": "logger",
                        "type": "NGXLogger",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<mat-card class=\"kvp-add-card\">\n  <form class=\"kvp-add\">\n    <mat-form-field class=\"kvp-key\">\n      <input matInput placeholder=\"Key\" [(ngModel)]=\"key\" name=\"key-input\" />\n    </mat-form-field>\n    <mat-form-field class=\"kvp-value\">\n      <input\n        matInput\n        placeholder=\"Value\"\n        [(ngModel)]=\"value\"\n        name=\"value-input\"\n      />\n    </mat-form-field>\n\n    <button mat-mini-fab class=\"add-button\" color=\"primary\" (click)=\"onAdd()\">\n      <mat-icon>add</mat-icon>\n    </button>\n  </form>\n  <div class=\"error-message\" *ngIf=\"!this.isValid\">\n    {{ this.errorMessage }}\n  </div>\n</mat-card>\n"
        },
        {
            "name": "KvpAddRuleComponent",
            "id": "component-KvpAddRuleComponent-5e2f88b7ae5b45283bd2f721945d4362",
            "file": "src/app/components/scenario-editor/kvp-edit-rule/kvp-add-rule/kvp-add-rule.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-kvp-add-rule",
            "styleUrls": [
                "./kvp-add-rule.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./kvp-add-rule.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "kvpAddedError",
                    "defaultValue": "new EventEmitter<boolean>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "any"
                }
            ],
            "outputsClass": [
                {
                    "name": "kvp",
                    "defaultValue": "new EventEmitter<KeyValuePairRule>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "errorMessage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "isValid",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "kvpAddRuleFormGroup",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "kvpRuleInEdit",
                    "defaultValue": "{\n    rule: {} as Record<string, string>,\n    type: RuleType.NONE\n  } as KeyValuePairRule",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "ruleIsDuplicated",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "rules",
                    "defaultValue": "[\n    { value: RuleType.REGEX, viewValue: 'Matches Regex' },\n    { value: RuleType.TEXTSTARTSWITH, viewValue: 'Starts With' },\n    { value: RuleType.TEXTENDSWITH, viewValue: 'Ends With' },\n    { value: RuleType.TEXTCONTAINS, viewValue: 'Contains' },\n    { value: RuleType.TEXTEQUALS, viewValue: 'Equals' }\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        143
                    ]
                },
                {
                    "name": "subscriptions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription[]",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "isKeyEmpty",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 105,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nReturns true if the key field is empty and false otherwise\n",
                    "description": "<p>Returns true if the key field is empty and false otherwise</p>\n"
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onAdd",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 77,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nChecks to see if the kvp key is not empty and adds it if it is not empty\n",
                    "description": "<p>Checks to see if the kvp key is not empty and adds it if it is not empty</p>\n"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Output, EventEmitter, Input } from '@angular/core';\nimport { NGXLogger } from 'ngx-logger';\nimport { RuleType } from '../../../../models/mock-definition/scenario/rule.type';\nimport { KeyValuePairRule } from '../../../../models/mock-definition/scenario/key-value-pair-rule.model';\nimport { FormGroup, FormControl, Validators, AbstractControl } from '@angular/forms';\nimport { Subscription } from 'rxjs';\nimport { recordUpdateKeyName } from 'src/app/models/record';\n\n@Component({\n  selector: 'app-kvp-add-rule',\n  templateUrl: './kvp-add-rule.component.html',\n  styleUrls: ['./kvp-add-rule.component.scss']\n})\nexport class KvpAddRuleComponent implements OnInit {\n  private subscriptions: Subscription[] = [];\n  @Input() kvpAddedError = new EventEmitter<boolean>();\n  // The kvp to be outputted to parent\n  @Output() kvp = new EventEmitter<KeyValuePairRule>();\n\n  private kvpRuleInEdit = {\n    rule: {} as Record<string, string>,\n    type: RuleType.NONE\n  } as KeyValuePairRule;\n  isValid: boolean;\n  errorMessage: string;\n  ruleIsDuplicated: boolean;\n\n  kvpAddRuleFormGroup: FormGroup;\n  readonly rules = [\n    { value: RuleType.REGEX, viewValue: 'Matches Regex' },\n    { value: RuleType.TEXTSTARTSWITH, viewValue: 'Starts With' },\n    { value: RuleType.TEXTENDSWITH, viewValue: 'Ends With' },\n    { value: RuleType.TEXTCONTAINS, viewValue: 'Contains' },\n    { value: RuleType.TEXTEQUALS, viewValue: 'Equals' }\n  ];\n\n  constructor(private logger: NGXLogger) {}\n\n  ngOnInit() {\n    this.kvpAddRuleFormGroup = new FormGroup({\n      ruleKey: new FormControl('', [Validators.required, Validators.maxLength(200)]),\n      ruleValue: new FormControl('', [Validators.required, Validators.maxLength(3000)]),\n      type: new FormControl(RuleType.NONE, [Validators.required])\n    });\n    const ruleDuplicatedSubscription = this.kvpAddedError.subscribe(\n      isDuplicated => (this.ruleIsDuplicated = isDuplicated)\n    );\n    const keySubscription = this.kvpAddRuleFormGroup.get('ruleKey').valueChanges.subscribe(newKey => {\n      this.ruleIsDuplicated = false;\n      const oldKey = this.kvpAddRuleFormGroup.value['ruleKey'];\n      if (oldKey) {\n        recordUpdateKeyName(this.kvpRuleInEdit.rule, oldKey, newKey);\n      } else {\n        this.kvpRuleInEdit.rule[newKey] = this.kvpAddRuleFormGroup.get('ruleValue').value;\n      }\n    });\n    const valueSubscription = this.kvpAddRuleFormGroup.get('ruleValue').valueChanges.subscribe(value => {\n      this.ruleIsDuplicated = false;\n      this.kvpRuleInEdit.rule[this.ruleKey.value] = value;\n    });\n    const ruleSubscription = this.kvpAddRuleFormGroup.get('type').valueChanges.subscribe(type => {\n      this.ruleIsDuplicated = false;\n      if (!this.ruleValue && this.ruleType.value === RuleType.REGEX) {\n        this.errorMessage = 'A Regex Value Must be Entered';\n      } else if (this.ruleType.value === undefined || this.ruleType.value === RuleType.NONE) {\n        this.errorMessage = 'Empty Compare Type: Please Select a valid compare type';\n        this.logger.debug('Empty Compare Type: Please Select a valid compare type');\n      }\n      this.kvpRuleInEdit.type = type;\n    });\n    this.subscriptions.push(keySubscription, valueSubscription, ruleSubscription, ruleDuplicatedSubscription);\n  }\n\n  /**\n   * Checks to see if the kvp key is not empty and adds it if it is not empty\n   */\n  onAdd() {\n    if (!this.isKeyEmpty() && this.kvpAddRuleFormGroup.valid) {\n      this.kvp.emit(this.kvpRuleInEdit);\n      this.logger.debug('KvpAddComponent:onAdd: KVP emitted to parent', this.kvpRuleInEdit);\n      this.isValid = true;\n    } else {\n      this.isValid = false;\n    }\n  }\n\n  /**\n   * Gets the form control for the 'key'\n   */\n  get ruleKey(): AbstractControl {\n    return this.kvpAddRuleFormGroup.get('ruleKey');\n  }\n\n  get ruleValue(): AbstractControl {\n    return this.kvpAddRuleFormGroup.get('ruleValue');\n  }\n\n  get ruleType(): AbstractControl {\n    return this.kvpAddRuleFormGroup.get('type');\n  }\n\n  /**\n   * Returns true if the key field is empty and false otherwise\n   */\n  isKeyEmpty(): boolean {\n    if (this.ruleKey.value.trim().length === 0) {\n      this.errorMessage = 'Empty Key Field Found: Please Enter Value';\n      this.logger.debug('Empty Key Field Found: Please Enter Value');\n      return true;\n    }\n\n    return false;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".kvp-add {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n\n.add-button {\n  margin-right: 1.3em;\n}\n\n.kvp-value {\n  width: 25em;\n}\n\n.kvp-key {\n  padding-left: 1.3em;\n  width: 12%;\n}\n\n.error-message {\n  padding-left: 1.6em;\n}\n\n.row {\n  align-items: center;\n  width: 100%;\n  justify-content: space-between;\n}\n",
                    "styleUrl": "./kvp-add-rule.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "logger",
                        "type": "NGXLogger",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 35,
                "jsdoctags": [
                    {
                        "name": "logger",
                        "type": "NGXLogger",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "ruleKey": {
                    "name": "ruleKey",
                    "getSignature": {
                        "name": "ruleKey",
                        "type": "",
                        "returnType": "AbstractControl",
                        "line": 90,
                        "rawdescription": "Gets the form control for the 'key'",
                        "description": "<p>Gets the form control for the &#39;key&#39;</p>\n"
                    }
                },
                "ruleValue": {
                    "name": "ruleValue",
                    "getSignature": {
                        "name": "ruleValue",
                        "type": "",
                        "returnType": "AbstractControl",
                        "line": 94
                    }
                },
                "ruleType": {
                    "name": "ruleType",
                    "getSignature": {
                        "name": "ruleType",
                        "type": "",
                        "returnType": "AbstractControl",
                        "line": 98
                    }
                }
            },
            "templateData": "<mat-card class=\"kvp-add-card\">\n  <mat-card-content>\n    <form class=\"kvp-add\" [formGroup]=\"kvpAddRuleFormGroup\">\n      <div class=\"row\">\n        <mat-form-field class=\"kvp-key\">\n          <input matInput placeholder=\"Key\" formControlName=\"ruleKey\" name=\"key-input\" />\n          <mat-hint> {{ ruleKey.value?.length || 0 }}/200</mat-hint>\n        </mat-form-field>\n        <mat-form-field class=\"kvp-value\">\n          <input matInput placeholder=\"Value\" formControlName=\"ruleValue\" name=\"value-input\" />\n          <mat-hint> {{ ruleValue.value?.length || 0 }}/3000</mat-hint>\n        </mat-form-field>\n        <mat-form-field class=\"kvp-type\">\n          <mat-label>Select Rule</mat-label>\n          <mat-select formControlName=\"type\" name=\"rule-type\" required>\n            <div *ngFor=\"let rule of rules\">\n              <mat-option [value]=\"rule.value\">\n                {{ rule.viewValue }}\n              </mat-option>\n            </div>\n          </mat-select>\n        </mat-form-field>\n        <button mat-mini-fab class=\"add-button\" color=\"primary\" (click)=\"onAdd()\">\n          <mat-icon>add</mat-icon>\n        </button>\n      </div>\n    </form>\n    <div class=\"error-message\" *ngIf=\"!this.isValid\">\n      {{ this.errorMessage }}\n    </div>\n    <div class=\"error-message\" *ngIf=\"this.ruleIsDuplicated\">\n      <mat-error>Rule already exists</mat-error>\n    </div>\n  </mat-card-content>\n</mat-card>\n"
        },
        {
            "name": "KvpEditComponent",
            "id": "component-KvpEditComponent-8cfba0dca3bac411c43725d7736bc2a2",
            "file": "src/app/components/orbital-common/kvp-edit/kvp-edit.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-kvp-edit",
            "styleUrls": [
                "./kvp-edit.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./kvp-edit.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "addKvpTitle",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "The add and list tiles to be added in the template",
                    "description": "<p>The add and list tiles to be added in the template</p>\n",
                    "line": 15,
                    "type": "string"
                },
                {
                    "name": "isCaseSensitive",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "boolean"
                },
                {
                    "name": "kvp",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "The existing KVP record",
                    "description": "<p>The existing KVP record</p>\n",
                    "line": 51,
                    "type": ""
                },
                {
                    "name": "listKvpTitle",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "string"
                },
                {
                    "name": "Save",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "This setter calls the emitter for the savedkvp if shouldSave is true",
                    "description": "<p>This setter calls the emitter for the savedkvp if shouldSave is true</p>\n",
                    "line": 40,
                    "type": "boolean"
                }
            ],
            "outputsClass": [
                {
                    "name": "savedKvpEmitter",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe event emitter for the savedKvp\n",
                    "description": "<p>The event emitter for the savedKvp</p>\n",
                    "line": 27
                }
            ],
            "propertiesClass": [
                {
                    "name": "savedKvp",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Record<string | string>",
                    "optional": false,
                    "description": "<p>The new kvp list with the new kvp added in</p>\n",
                    "line": 22,
                    "rawdescription": "\n\nThe new kvp list with the new kvp added in\n"
                }
            ],
            "methodsClass": [
                {
                    "name": "addKvp",
                    "args": [
                        {
                            "name": "kvpToAdd",
                            "type": "KeyValue<string | string>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThis method listens to the event emitter from the child component and adds the KeyValue pair into the list\n",
                    "description": "<p>This method listens to the event emitter from the child component and adds the KeyValue pair into the list</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1487,
                                "end": 1495,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "kvpToAdd"
                            },
                            "type": "KeyValue<string | string>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1481,
                                "end": 1486,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>The key-value pair to add</p>\n"
                        }
                    ]
                },
                {
                    "name": "deleteKvp",
                    "args": [
                        {
                            "name": "kvpToDelete",
                            "type": "KeyValue<string | string>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 76,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThis method listens to the event emitter from the child component and deletes the KeyValue pair from the list\n",
                    "description": "<p>This method listens to the event emitter from the child component and deletes the KeyValue pair from the list</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2115,
                                "end": 2126,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "kvpToDelete"
                            },
                            "type": "KeyValue<string | string>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2109,
                                "end": 2114,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>The key-value pair to delete</p>\n"
                        }
                    ]
                },
                {
                    "name": "hasValuesAdded",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 83,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\nimport { KeyValue } from '@angular/common';\nimport { NGXLogger } from 'ngx-logger';\nimport { recordDelete, recordAdd } from 'src/app/models/record';\n\n@Component({\n  selector: 'app-kvp-edit',\n  templateUrl: './kvp-edit.component.html',\n  styleUrls: ['./kvp-edit.component.scss']\n})\nexport class KvpEditComponent implements OnInit {\n  /**\n   * The add and list tiles to be added in the template\n   */\n  @Input() addKvpTitle: string;\n  @Input() listKvpTitle: string;\n  @Input() isCaseSensitive: boolean;\n\n  /**\n   * The new kvp list with the new kvp added in\n   */\n  savedKvp: Record<string, string>;\n\n  /**\n   * The event emitter for the savedKvp\n   */\n  @Output() savedKvpEmitter;\n\n  constructor(private logger: NGXLogger) {\n    this.savedKvp = {};\n    this.savedKvpEmitter = new EventEmitter<Record<string, string>>();\n  }\n\n  ngOnInit() { }\n\n  /**\n   * This setter calls the emitter for the savedkvp if shouldSave is true\n   */\n  @Input()\n  set Save(shouldSave: boolean) {\n    if (shouldSave) {\n      this.savedKvpEmitter.emit(this.savedKvp);\n      this.logger.debug('KVP has been saved', this.savedKvp);\n    }\n  }\n\n  /**\n   * The existing KVP record\n   */\n  @Input()\n  set kvp(savedKvp: Record<string, string>) {\n    if (savedKvp) {\n      this.savedKvp = savedKvp;\n    }\n  }\n\n  /**\n   * This method listens to the event emitter from the child component and adds the KeyValue pair into the list\n   * @param kvpToAdd The key-value pair to add\n   */\n  addKvp(kvpToAdd: KeyValue<string, string>) {\n    if (!!kvpToAdd && !!kvpToAdd.key && !!kvpToAdd.value) {\n      if (this.isCaseSensitive) {\n        recordAdd(this.savedKvp, kvpToAdd.key, kvpToAdd.value);\n        this.logger.debug('Adding a case sensitive KVP', kvpToAdd);\n      } else {\n        recordAdd(this.savedKvp, kvpToAdd.key.toLowerCase(), kvpToAdd.value);\n        this.logger.debug('Adding a case insensitive KVP', kvpToAdd);\n      }\n    }\n  }\n  /**\n   * This method listens to the event emitter from the child component and deletes the KeyValue pair from the list\n   * @param kvpToDelete The key-value pair to delete\n   */\n  deleteKvp(kvpToDelete: KeyValue<string, string>) {\n    if (!!kvpToDelete && !!kvpToDelete.key) {\n      recordDelete(this.savedKvp, kvpToDelete.key);\n      this.logger.debug('Delete Header Rule', kvpToDelete);\n    }\n  }\n\n  hasValuesAdded() {\n    const keys = Object.keys(this.savedKvp);\n    return keys.length > 0;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "mat-expansion-panel {\n  box-shadow: none !important;\n  border: 0 !important;\n}\n\np.description {\n  font-family: Roboto;\n  font-style: normal;\n  font-weight: normal;\n  font-size: 1em;\n  color: rgba(0, 0, 0, 0.539261);\n}\n\n.divider-padding {\n  margin-top: 1em;\n}\n",
                    "styleUrl": "./kvp-edit.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "logger",
                        "type": "NGXLogger",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 27,
                "jsdoctags": [
                    {
                        "name": "logger",
                        "type": "NGXLogger",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "Save": {
                    "name": "Save",
                    "setSignature": {
                        "name": "Save",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "shouldSave",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 40,
                        "rawdescription": "This setter calls the emitter for the savedkvp if shouldSave is true",
                        "description": "<p>This setter calls the emitter for the savedkvp if shouldSave is true</p>\n",
                        "jsdoctags": [
                            {
                                "name": "shouldSave",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "kvp": {
                    "name": "kvp",
                    "setSignature": {
                        "name": "kvp",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "savedKvp",
                                "type": "Record<string | string>",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 51,
                        "rawdescription": "The existing KVP record",
                        "description": "<p>The existing KVP record</p>\n",
                        "jsdoctags": [
                            {
                                "name": "savedKvp",
                                "type": "Record<string | string>",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            },
            "templateData": "<p class=\"description\">{{ addKvpTitle }}</p>\n<app-kvp-add (kvp)=\"addKvp($event)\"></app-kvp-add>\n\n<mat-divider class=\"divider-padding\"></mat-divider>\n<div>\n  <p class=\"description\">{{ listKvpTitle }}</p>\n</div>\n<div *ngIf=\"!hasValuesAdded()\">\n  No rules Added\n</div>\n<div *ngFor=\"let kv of savedKvp | keyvalue\">\n  <app-kvp-list-item\n    [kvp]=\"kv\"\n    (removeKvp)=\"deleteKvp($event)\"\n  ></app-kvp-list-item>\n</div>\n"
        },
        {
            "name": "KvpEditRuleComponent",
            "id": "component-KvpEditRuleComponent-548870311454e8d22ad92681f63570dc",
            "file": "src/app/components/scenario-editor/kvp-edit-rule/kvp-edit-rule.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-kvp-edit-rule",
            "styleUrls": [
                "./kvp-edit-rule.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./kvp-edit-rule.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "addKvpTitle",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "The add and list tiles to be added in the template",
                    "description": "<p>The add and list tiles to be added in the template</p>\n",
                    "line": 19,
                    "type": "string"
                },
                {
                    "name": "matchRuleFormArray",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "FormArray"
                }
            ],
            "outputsClass": [
                {
                    "name": "kvpIsDuplicated",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "EventEmitter<boolean>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "subscriptions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription[]",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "addKvp",
                    "args": [
                        {
                            "name": "kvpToAdd",
                            "type": "KeyValuePairRule",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThis method listens to the event emitter from the child component and adds the KeyValue pair into the list\n",
                    "description": "<p>This method listens to the event emitter from the child component and adds the KeyValue pair into the list</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2005,
                                "end": 2013,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "kvpToAdd"
                            },
                            "type": "KeyValuePairRule",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1999,
                                "end": 2004,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>The key-value pair to add to the list</p>\n"
                        }
                    ]
                },
                {
                    "name": "checkForDuplicates",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 92,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n\nDouble check to confirm there are no duplicates in the list of existing rules\n",
                    "description": "<p>Double check to confirm there are no duplicates in the list of existing rules</p>\n",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "deleteKvpFromRule",
                    "args": [
                        {
                            "name": "indexPosition",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThis method listens to the event emitter from the child component and deletes the KeyValue pair from the list\n",
                    "description": "<p>This method listens to the event emitter from the child component and deletes the KeyValue pair from the list</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1602,
                                "end": 1615,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "indexPosition"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1596,
                                "end": 1601,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>The KeyValue pair rule being taken in from the child component to be deleted</p>\n"
                        }
                    ]
                },
                {
                    "name": "isRuleDuplicate",
                    "args": [
                        {
                            "name": "kvpToAdd",
                            "type": "KeyValuePairRule",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 68,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nchecks if the keyvaluepairrule is inside the current form array\n\n",
                    "description": "<p>checks if the keyvaluepairrule is inside the current form array</p>\n",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "kvpToAdd",
                            "type": "KeyValuePairRule",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 124,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nImplementation for NG On Destroy\n",
                    "description": "<p>Implementation for NG On Destroy</p>\n"
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input, Output, EventEmitter, OnDestroy } from '@angular/core';\nimport { NGXLogger } from 'ngx-logger';\nimport { KeyValuePairRule } from 'src/app/models/mock-definition/scenario/key-value-pair-rule.model';\nimport { recordFirstOrDefaultKey, recordFirstOrDefault } from 'src/app/models/record';\nimport { FormArray, FormGroup } from '@angular/forms';\nimport { ScenarioFormBuilder } from '../scenario-form-builder/scenario-form.builder';\nimport { Subscription } from 'rxjs';\n\n@Component({\n  selector: 'app-kvp-edit-rule',\n  templateUrl: './kvp-edit-rule.component.html',\n  styleUrls: ['./kvp-edit-rule.component.scss']\n})\nexport class KvpEditRuleComponent implements OnInit, OnDestroy {\n  private subscriptions: Subscription[] = [];\n  /**\n   * The add and list tiles to be added in the template\n   */\n  @Input() addKvpTitle: string;\n\n  @Input() matchRuleFormArray: FormArray;\n\n  @Output() kvpIsDuplicated: EventEmitter<boolean>;\n\n  constructor(private logger: NGXLogger, private formbuilder: ScenarioFormBuilder) {\n    this.kvpIsDuplicated = new EventEmitter<boolean>();\n    this.kvpIsDuplicated.emit(false);\n  }\n\n  ngOnInit(): void {\n    const matchRuleFormArraySubscription = this.matchRuleFormArray.valueChanges.subscribe(() => {\n      this.logger.debug('KvpEditRuleComponent checking for duplicate rules : ', this.matchRuleFormArray);\n      this.checkForDuplicates();\n    });\n    this.subscriptions.push(matchRuleFormArraySubscription);\n  }\n\n  /**\n   * This method listens to the event emitter from the child component and deletes the KeyValue pair from the list\n   * @param indexPosition The KeyValue pair rule being taken in from the child component to be deleted\n   */\n  deleteKvpFromRule(indexPosition: number) {\n    this.matchRuleFormArray.removeAt(indexPosition);\n    this.logger.debug('Delete Rule from list at index ', indexPosition);\n  }\n\n  /**\n   * This method listens to the event emitter from the child component and adds the KeyValue pair into the list\n   * @param kvpToAdd The key-value pair to add to the list\n   */\n  addKvp(kvpToAdd: KeyValuePairRule) {\n    const rulefound = this.isRuleDuplicate(kvpToAdd);\n    if (!rulefound) {\n      this.kvpIsDuplicated.emit(false);\n      const index = this.matchRuleFormArray.length;\n      const newRuleControl = this.formbuilder.getHeaderOrQueryItemFormGroup(kvpToAdd);\n      this.matchRuleFormArray.insert(index, newRuleControl);\n      this.logger.debug('KvpEditRuleComponent: new rule added ', kvpToAdd);\n    } else {\n      this.kvpIsDuplicated.emit(true);\n    }\n  }\n\n  /**\n   * checks if the keyvaluepairrule is inside the current form array\n   *\n   */\n  private isRuleDuplicate(kvpToAdd: KeyValuePairRule): boolean {\n    interface HeaderQueryRuleFormGroup {\n      key: string;\n      value: string;\n      type: number;\n    }\n\n    return this.matchRuleFormArray.controls\n      .map(group => {\n        return (group as FormGroup).getRawValue() as HeaderQueryRuleFormGroup;\n      })\n      .some(kvFormGroup => {\n        return (\n          kvFormGroup.value === recordFirstOrDefault(kvpToAdd.rule, '') &&\n          kvFormGroup.key === recordFirstOrDefaultKey(kvpToAdd.rule, '') &&\n          kvFormGroup.type === kvpToAdd.type\n        );\n      });\n  }\n\n  /**\n   *\n   * Double check to confirm there are no duplicates in the list of existing rules\n   */\n  private checkForDuplicates(): void {\n    this.matchRuleFormArray.controls.forEach(c => c.setErrors(null));\n    this.matchRuleFormArray.markAsUntouched();\n    interface HeaderQueryRuleFormGroup {\n      key: string;\n      value: string;\n      type: number;\n    }\n    const rules = this.matchRuleFormArray.controls.map(group => {\n      return (group as FormGroup).getRawValue() as HeaderQueryRuleFormGroup;\n    });\n    rules.forEach((ruleToCheck, indexToCheck) => {\n      rules.forEach((ruleToCheckAgainst, indexToCheckAgainst) => {\n        const foundDuplicate =\n          ruleToCheck.value === ruleToCheckAgainst.value &&\n          ruleToCheck.key === ruleToCheckAgainst.key &&\n          ruleToCheck.type === ruleToCheckAgainst.type &&\n          indexToCheck !== indexToCheckAgainst;\n        if (foundDuplicate) {\n          this.logger.error('KvpEditRuleComponent: found duplicate', ruleToCheck);\n          (this.matchRuleFormArray.at(indexToCheck) as FormGroup).get('type').markAsTouched();\n          (this.matchRuleFormArray.at(indexToCheckAgainst) as FormGroup).get('type').markAsTouched();\n          (this.matchRuleFormArray.at(indexToCheckAgainst) as FormGroup).setErrors({ duplicated: true });\n          (this.matchRuleFormArray.at(indexToCheck) as FormGroup).setErrors({ duplicated: true });\n        }\n      });\n    });\n  }\n\n  /**\n   * Implementation for NG On Destroy\n   */\n  ngOnDestroy(): void {\n    this.subscriptions.forEach(subscription => {\n      subscription.unsubscribe();\n    });\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "mat-expansion-panel {\n  box-shadow: none !important;\n  border: 0 !important;\n}\n\np.description {\n  font-family: Roboto;\n  font-style: normal;\n  font-weight: normal;\n  font-size: 1em;\n  color: rgba(0, 0, 0, 0.539261);\n}\n\n.divider-padding {\n  margin-top: 1em;\n}\n\n.kvp-edit-rule {\n  display: flex;\n  flex-direction: column;\n}\n\n.add-rule {\n  padding-bottom: 1em;\n}\n",
                    "styleUrl": "./kvp-edit-rule.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "logger",
                        "type": "NGXLogger",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "formbuilder",
                        "type": "ScenarioFormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 23,
                "jsdoctags": [
                    {
                        "name": "logger",
                        "type": "NGXLogger",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "formbuilder",
                        "type": "ScenarioFormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<p class=\"description\">{{ addKvpTitle }}</p>\n\n<div class=\"kvp-edit-rule\">\n  <mat-divider class=\"divider-padding\"></mat-divider>\n  <app-kvp-add-rule class=\"add-rule\" (kvp)=\"addKvp($event)\" [kvpAddedError]=\"this.kvpIsDuplicated\"></app-kvp-add-rule>\n</div>\n<ng-template [ngIf]=\"this.matchRuleFormArray.controls.length\" [ngIfElse]=\"noRulesAdded\">\n  <div *ngFor=\"let kv of matchRuleFormArray.controls; let i = index\">\n    <app-kvp-list-item-rule-type\n      [editRuleFormGroup]=\"kv\"\n      (removeKvp)=\"deleteKvpFromRule(i)\"\n    ></app-kvp-list-item-rule-type>\n  </div>\n</ng-template>\n\n<ng-template #noRulesAdded>\n  No Rules Added\n</ng-template>\n"
        },
        {
            "name": "KvpListItemComponent",
            "id": "component-KvpListItemComponent-151ca185e4dcf67d17cdb7a3b241e3bc",
            "file": "src/app/components/orbital-common/kvp-edit/kvp-list-item/kvp-list-item.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-kvp-list-item",
            "styleUrls": [
                "./kvp-list-item.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./kvp-list-item.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "kvp",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": ""
                }
            ],
            "outputsClass": [
                {
                    "name": "removeKvp",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe kvp to be deleted by the parent\n",
                    "description": "<p>The kvp to be deleted by the parent</p>\n",
                    "line": 15,
                    "type": "EventEmitter<KeyValue<string, string>>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "currentKVP",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "KeyValue<string | string>",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onRemove",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nEmits a removes event with the KeyValue for the parent to remove\n",
                    "description": "<p>Emits a removes event with the KeyValue for the parent to remove</p>\n"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\nimport { KeyValue } from '@angular/common';\n\n@Component({\n  selector: 'app-kvp-list-item',\n  templateUrl: './kvp-list-item.component.html',\n  styleUrls: ['./kvp-list-item.component.scss']\n})\nexport class KvpListItemComponent implements OnInit {\n  currentKVP: KeyValue<string, string>;\n\n  /**\n   * The kvp to be deleted by the parent\n   */\n  @Output() removeKvp: EventEmitter<KeyValue<string, string>>;\n\n  constructor() {\n    this.removeKvp = new EventEmitter<KeyValue<string, string>>();\n    this.currentKVP = { key: '', value: '' };\n  }\n\n  ngOnInit() {}\n\n  @Input()\n  set kvp(input: KeyValue<string, string>) {\n    if (input) {\n      this.currentKVP = input;\n    }\n  }\n\n  /**\n   * Emits a removes event with the KeyValue for the parent to remove\n   */\n  onRemove() {\n    this.removeKvp.emit(this.currentKVP);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".kvp-added-item {\n  display: flex;\n}\n\n.mat-card {\n  padding: 0.75em;\n  min-width: 35vw;\n  margin-bottom: 1em;\n}\n\n.kvp-added-key {\n  border-bottom: 1px solid #9b9b9b;\n  margin-left: 1.3em;\n  margin-right: 8.5em;\n  width: 12%;\n  word-wrap: break-word;\n  word-break: break-all;\n}\n\n.kvp-added-value {\n  border-bottom: 1px solid #9b9b9b;\n  margin-right: 2em;\n  min-width: 30%;\n  word-wrap: break-word;\n  word-break: break-all;\n}\n\n.delete-button {\n  background: none;\n  border: 0;\n}\n\n.delete-button-container {\n  display: flex;\n  flex: 1;\n  justify-content: flex-end;\n}\n",
                    "styleUrl": "./kvp-list-item.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 15
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "kvp": {
                    "name": "kvp",
                    "setSignature": {
                        "name": "kvp",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "input",
                                "type": "KeyValue<string | string>",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 25,
                        "jsdoctags": [
                            {
                                "name": "input",
                                "type": "KeyValue<string | string>",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            },
            "templateData": "<mat-card>\n  <div class=\"kvp-added-item\">\n    <div class=\"kvp-added-key\">\n      {{ currentKVP.key }}\n    </div>\n    <div class=\"kvp-added-value\">\n      {{ currentKVP.value }}\n    </div>\n\n    <div class=\"delete-button-container\">\n      <button class=\"delete-button\" (click)=\"onRemove()\">\n        <mat-icon>close</mat-icon>\n      </button>\n    </div>\n  </div>\n</mat-card>\n"
        },
        {
            "name": "KvpListItemRuleTypeComponent",
            "id": "component-KvpListItemRuleTypeComponent-ab297021d351b8997f365d2e74c7509d",
            "file": "src/app/components/scenario-editor/kvp-edit-rule/kvp-list-item-rule-type/kvp-list-item-rule-type.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-kvp-list-item-rule-type",
            "styleUrls": [
                "./kvp-list-item-rule-type.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./kvp-list-item-rule-type.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "editRuleFormGroup",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "FormGroup"
                }
            ],
            "outputsClass": [
                {
                    "name": "removeKvp",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe kvp to be deleted by the parent\n",
                    "description": "<p>The kvp to be deleted by the parent</p>\n",
                    "line": 28,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "rules",
                    "defaultValue": "[\n    { value: RuleType.REGEX, viewValue: 'Matches Regex' },\n    { value: RuleType.TEXTSTARTSWITH, viewValue: 'Starts With' },\n    { value: RuleType.TEXTENDSWITH, viewValue: 'Ends With' },\n    { value: RuleType.TEXTCONTAINS, viewValue: 'Contains' },\n    { value: RuleType.TEXTEQUALS, viewValue: 'Equals' }\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "subscriptions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription[]",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "RuleType",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "methodsClass": [
                {
                    "name": "isRuleDuplicated",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 79,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nReturn true if the formgroup contains a 'duplicated' error.\n",
                    "description": "<p>Return true if the formgroup contains a &#39;duplicated&#39; error.</p>\n"
                },
                {
                    "name": "isValueEmpty",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 69,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ncheck if value is empty when selecting Regex as rule type\n",
                    "description": "<p>check if value is empty when selecting Regex as rule type</p>\n"
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 89,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nImplementation for NG On Destroy\n",
                    "description": "<p>Implementation for NG On Destroy</p>\n"
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onRemove",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 62,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nEmits a removes event with no value\n",
                    "description": "<p>Emits a removes event with no value</p>\n"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input, Output, EventEmitter, OnDestroy } from '@angular/core';\nimport { RuleType } from 'src/app/models/mock-definition/scenario/rule.type';\nimport { KeyValuePairRule } from 'src/app/models/mock-definition/scenario/key-value-pair-rule.model';\nimport { FormGroup, AbstractControl } from '@angular/forms';\nimport { Subscription } from 'rxjs';\n\n@Component({\n  selector: 'app-kvp-list-item-rule-type',\n  templateUrl: './kvp-list-item-rule-type.component.html',\n  styleUrls: ['./kvp-list-item-rule-type.component.scss']\n})\nexport class KvpListItemRuleTypeComponent implements OnInit, OnDestroy {\n  private subscriptions: Subscription[] = [];\n\n  type: RuleType;\n  rules = [\n    { value: RuleType.REGEX, viewValue: 'Matches Regex' },\n    { value: RuleType.TEXTSTARTSWITH, viewValue: 'Starts With' },\n    { value: RuleType.TEXTENDSWITH, viewValue: 'Ends With' },\n    { value: RuleType.TEXTCONTAINS, viewValue: 'Contains' },\n    { value: RuleType.TEXTEQUALS, viewValue: 'Equals' }\n  ];\n\n  @Input() editRuleFormGroup: FormGroup;\n  /**\n   * The kvp to be deleted by the parent\n   */\n  @Output() removeKvp: EventEmitter<any>;\n\n  constructor() {\n    this.removeKvp = new EventEmitter<KeyValuePairRule>();\n  }\n\n  ngOnInit() {}\n\n  /**\n   * Gets the key from the current kvp\n   */\n\n  get key(): AbstractControl {\n    return this.editRuleFormGroup.get('key');\n  }\n\n  /**\n   * Gets the value from the current kvp\n   */\n  get value(): AbstractControl {\n    return this.editRuleFormGroup.get('value');\n  }\n\n  /**\n   * Gets the value from the current kvp type\n   */\n\n  get ruleType(): AbstractControl {\n    return this.editRuleFormGroup.get('type');\n  }\n\n  /**\n   * Emits a removes event with no value\n   */\n  onRemove() {\n    this.removeKvp.emit();\n  }\n\n  /**\n   * check if value is empty when selecting Regex as rule type\n   */\n  isValueEmpty() {\n    if (this.editRuleFormGroup.get('type').value === RuleType.REGEX) {\n      return this.editRuleFormGroup.get('value').value.trim().length === 0;\n    }\n    return false;\n  }\n\n  /**\n   * Return true if the formgroup contains a 'duplicated' error.\n   */\n  isRuleDuplicated() {\n    if (this.editRuleFormGroup.hasError('duplicated')) {\n      return this.editRuleFormGroup.errors.duplicated;\n    }\n    return false;\n  }\n\n  /**\n   * Implementation for NG On Destroy\n   */\n  ngOnDestroy(): void {\n    this.subscriptions.forEach(subscription => {\n      subscription.unsubscribe();\n    });\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".row {\n  display: flex;\n  justify-content: space-between;\n  width: 100%;\n}\n\n.mat-card {\n  padding: 0.75em;\n  min-width: 35vw;\n  margin-bottom: 1em;\n}\n\n.kvp-value {\n  flex: 1;\n  padding-right: 3vw;\n}\n\n.delete-button {\n  background: none;\n  border: 0;\n}\n\n.delete-button-container {\n  display: flex;\n  padding-right: 1em;\n}\n\n.kvp-key {\n  width: 12%;\n  margin-left: 1.5em;\n  margin-right: 2em;\n}\n\n.rule-type {\n  margin-right: 3.25em;\n}\n\n.error-message {\n  padding-left: 1.5em;\n  padding-top: 1em;\n}\n",
                    "styleUrl": "./kvp-list-item-rule-type.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 28
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "accessors": {
                "key": {
                    "name": "key",
                    "getSignature": {
                        "name": "key",
                        "type": "",
                        "returnType": "AbstractControl",
                        "line": 40,
                        "rawdescription": "Gets the key from the current kvp",
                        "description": "<p>Gets the key from the current kvp</p>\n"
                    }
                },
                "value": {
                    "name": "value",
                    "getSignature": {
                        "name": "value",
                        "type": "",
                        "returnType": "AbstractControl",
                        "line": 47,
                        "rawdescription": "Gets the value from the current kvp",
                        "description": "<p>Gets the value from the current kvp</p>\n"
                    }
                },
                "ruleType": {
                    "name": "ruleType",
                    "getSignature": {
                        "name": "ruleType",
                        "type": "",
                        "returnType": "AbstractControl",
                        "line": 55,
                        "rawdescription": "Gets the value from the current kvp type",
                        "description": "<p>Gets the value from the current kvp type</p>\n"
                    }
                }
            },
            "templateData": "<mat-card class=\"kvp-add-card\">\n  <form class=\"kvp-added-item\" [formGroup]=\"editRuleFormGroup\">\n    <div class=\"row\">\n      <mat-form-field class=\"kvp-key\">\n        <input #inputkey required matInput placeholder=\"Key\" formControlName=\"key\" />\n        <mat-hint> {{ inputkey.value?.length || 0 }}/200</mat-hint>\n      </mat-form-field>\n\n      <mat-form-field class=\"kvp-value\">\n        <input #inputvalue matInput placeholder=\"Value\" formControlName=\"value\" />\n        <mat-hint> {{ inputvalue.value?.length || 0 }}/3000</mat-hint>\n      </mat-form-field>\n\n      <mat-form-field class=\"kvp-type\">\n        <mat-label>Select Rule</mat-label>\n        <mat-select formControlName=\"type\" name=\"rule-type\">\n          <div *ngFor=\"let rule of rules\">\n            <mat-option [value]=\"rule.value\">\n              {{ rule.viewValue }}\n            </mat-option>\n          </div>\n        </mat-select>\n      </mat-form-field>\n\n      <div class=\"delete-button-container\">\n        <button class=\"delete-button\" (click)=\"onRemove()\">\n          <mat-icon>close</mat-icon>\n        </button>\n      </div>\n    </div>\n    <div class=\"error-message\" *ngIf=\"isValueEmpty()\">\n      Regex value is required\n    </div>\n    <div *ngIf=\"isRuleDuplicated() && this.ruleType.touched\">\n      <mat-error>\n        Rule is duplicated\n      </mat-error>\n    </div>\n  </form>\n</mat-card>\n"
        },
        {
            "name": "OverviewHeaderComponent",
            "id": "component-OverviewHeaderComponent-dce594f67c81d7ff8875105ef02376ba",
            "file": "src/app/components/orbital-common/overview-header/overview-header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-overview-header",
            "styleUrls": [
                "./overview-header.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./overview-header.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "header",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "TemplateRef<any>"
                },
                {
                    "name": "metadata",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "Metadata"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input, TemplateRef } from '@angular/core';\nimport { Metadata } from '../../../models/mock-definition/metadata.model';\n\n@Component({\n  selector: 'app-overview-header',\n  templateUrl: './overview-header.component.html',\n  styleUrls: ['./overview-header.component.scss']\n})\nexport class OverviewHeaderComponent implements OnInit {\n  @Input() metadata: Metadata;\n  @Input() header: TemplateRef<any>;\n  constructor() {}\n\n  ngOnInit() {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".example-card {\n    border-radius: 0;\n    padding: 0 !important;\n    box-shadow: none;\n    display: flex;\n    flex-direction: column;\n  }\n\n  .header-title {\n    background-color: grayscale($color: #616161);\n  }\n\n  .title-container{\n    display: inline-flex;\n    padding-left: 2%;\n  }\n\n  .card-title\n  {\n    color: white; \n    font-family: Roboto;\n    font-size: 1.4em;\n    font-style: normal;\n    font-weight: 500;\n    letter-spacing: 0.0357143em;\n  }\n\n  .mock-description{\n    text-align: center;\n    flex-direction: column;\n    word-wrap: break-word;\n  }\n  \n  .mock-description h3{\n    font-family: Roboto;\n    font-style: normal;\n    font-weight: 500;\n    font-size: 1.4em;\n    color: rgba(0, 0, 0, 0.87);\n    overflow-y: auto;\n    word-wrap: break-word;\n  }\n\n  .mock-description p{\n    font-family: Roboto;\n    font-style: normal;\n    font-weight: 1.6em;\n    font-size: 1.2em;\n    overflow-y: auto;\n    color: rgba(0, 0, 0, 0.541327);\n    word-wrap: break-word;\n    text-align: justify;\n    padding-right: 7%;\n    padding-left: 7%;\n    padding-bottom: 2.5%;\n    letter-spacing: 0.05em;\n    line-height: 1.6em;\n  }\n",
                    "styleUrl": "./overview-header.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 11
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<mat-card class=\"example-card\">\n  <div class=\"header-title\">\n    <div class=\"title-container\">\n      <h1 class=\"card-title\">\n        Overview\n      </h1>\n    </div>\n  </div>\n  <mat-card-content class=\"mock-description\">\n    <ng-container *ngTemplateOutlet=\"header\"> </ng-container>\n  </mat-card-content>\n</mat-card>\n"
        },
        {
            "name": "PageComponent",
            "id": "component-PageComponent-8f196770333aa216860a88c0b6b221aa",
            "file": "src/stories/page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-page",
            "styleUrls": [
                "./page.css"
            ],
            "styles": [],
            "template": "<article>    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"onLogout.emit($event)\"\n      (onLogin)=\"onLogin.emit($event)\"\n      (onCreateAccount)=\"onCreateAccount.emit($event)\"\n    ></storybook-header>\n    <section>\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Storybook tutorials\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 64,
                    "type": ""
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 73,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 67,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 70,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-page',\n  template: `<article>\n    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"onLogout.emit($event)\"\n      (onLogin)=\"onLogin.emit($event)\"\n      (onCreateAccount)=\"onCreateAccount.emit($event)\"\n    ></storybook-header>\n    <section>\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Storybook tutorials\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>`,\n  styleUrls: ['./page.css'],\n})\nexport default class PageComponent {\n  @Input()\n  user: unknown = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n\n// export const Page = ({ user, onLogin, onLogout, onCreateAccount }) => (\n//   <article>\n//     <Header user={user} onLogin={onLogin} onLogout={onLogout} onCreateAccount={onCreateAccount} />\n\n// );\n// Page.propTypes = {\n//   user: PropTypes.shape({}),\n//   onLogin: PropTypes.func.isRequired,\n//   onLogout: PropTypes.func.isRequired,\n//   onCreateAccount: PropTypes.func.isRequired,\n// };\n\n// Page.defaultProps = {\n//   user: null,\n// };\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "section {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-size: 14px;\n  line-height: 24px;\n  padding: 48px 20px;\n  margin: 0 auto;\n  max-width: 600px;\n  color: #333;\n}\n\nh2 {\n  font-weight: 900;\n  font-size: 32px;\n  line-height: 1;\n  margin: 0 0 4px;\n  display: inline-block;\n  vertical-align: top;\n}\n\np {\n  margin: 1em 0;\n}\n\na {\n  text-decoration: none;\n  color: #1ea7fd;\n}\n\nul {\n  padding-left: 30px;\n  margin: 1em 0;\n}\n\nli {\n  margin-bottom: 8px;\n}\n\n.tip {\n  display: inline-block;\n  border-radius: 1em;\n  font-size: 11px;\n  line-height: 12px;\n  font-weight: 700;\n  background: #e7fdd8;\n  color: #66bf3c;\n  padding: 4px 12px;\n  margin-right: 10px;\n  vertical-align: top;\n}\n\n.tip-wrapper {\n  font-size: 13px;\n  line-height: 20px;\n  margin-top: 40px;\n  margin-bottom: 40px;\n}\n\n.tip-wrapper svg {\n  display: inline-block;\n  height: 12px;\n  width: 12px;\n  margin-right: 4px;\n  vertical-align: top;\n  margin-top: 3px;\n}\n\n.tip-wrapper svg path {\n  fill: #1ea7fd;\n}\n",
                    "styleUrl": "./page.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "PolicyAddComponent",
            "id": "component-PolicyAddComponent-bb9c7934c48413094a52209d3d6db8f7",
            "file": "src/app/components/scenario-editor/policy-container/policy-add/policy-add.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-policy-add",
            "styleUrls": [
                "./policy-add.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./policy-add.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "policyAddedIsDuplicated",
                    "defaultValue": "new EventEmitter<boolean>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "any"
                }
            ],
            "outputsClass": [
                {
                    "name": "policyAddedEventEmitter",
                    "defaultValue": "new EventEmitter<Policy>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "policies",
                    "defaultValue": "[{ value: PolicyType.DELAYRESPONSE, viewValue: 'Delay Response' }]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        143
                    ]
                },
                {
                    "name": "policyAddFormGroup",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "policyIsDuplicated",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "policyToAdd",
                    "defaultValue": "{\n    attributes: {} as Record<string, string>,\n    type: PolicyType.NONE\n  } as Policy",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "subscriptions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription[]",
                    "optional": false,
                    "description": "<p>Stores the subscriptions that will be destroyed during OnDestroy</p>\n",
                    "line": 18,
                    "rawdescription": "\n\nStores the subscriptions that will be destroyed during OnDestroy\n",
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "addPolicy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 103,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nControls the logic for emmiting a new addPolicy event\n",
                    "description": "<p>Controls the logic for emmiting a new addPolicy event</p>\n"
                },
                {
                    "name": "isDelayPolicy",
                    "args": [
                        {
                            "name": "policyChosen",
                            "type": "PolicyType",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 118,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDetermines if the policy is of type delay response.\n",
                    "description": "<p>Determines if the policy is of type delay response.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 4166,
                                "end": 4178,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "policyChosen"
                            },
                            "type": "PolicyType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 4160,
                                "end": 4165,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>selected policy</p>\n"
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 125,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nImplementation for NG On Destroy\n",
                    "description": "<p>Implementation for NG On Destroy</p>\n"
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, OnDestroy, Input, EventEmitter, Output } from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { PolicyType } from 'src/app/models/mock-definition/scenario/policy.type';\nimport { Policy } from 'src/app/models/mock-definition/scenario/policy.model';\nimport { FormGroup, FormControl, Validators, AbstractControl, FormArray } from '@angular/forms';\nimport { PolicyFormBuilder } from '../policy-form-builder/policy-form.builder';\nimport { recordAdd, recordFirstOrDefaultKey, recordFirstOrDefault } from 'src/app/models/record';\n\n@Component({\n  selector: 'app-policy-add',\n  templateUrl: './policy-add.component.html',\n  styleUrls: ['./policy-add.component.scss']\n})\nexport class PolicyAddComponent implements OnInit, OnDestroy {\n  /**\n   * Stores the subscriptions that will be destroyed during OnDestroy\n   */\n  private subscriptions: Subscription[] = [];\n  private policyToAdd = {\n    attributes: {} as Record<string, string>,\n    type: PolicyType.NONE\n  } as Policy;\n  private policyIsDuplicated = false;\n\n  @Input() policyAddedIsDuplicated = new EventEmitter<boolean>();\n  @Output() policyAddedEventEmitter = new EventEmitter<Policy>();\n\n  readonly policies = [{ value: PolicyType.DELAYRESPONSE, viewValue: 'Delay Response' }];\n\n  policyAddFormGroup: FormGroup;\n  constructor(private formBuilder: PolicyFormBuilder) {}\n  ngOnInit() {\n    const policyDuplicatedSubscription = this.policyAddedIsDuplicated.subscribe(\n      isDuplicated => (this.policyIsDuplicated = isDuplicated)\n    );\n    this.policyAddFormGroup = new FormGroup({\n      attributes: this.formBuilder.generateEmptyPolicyFormArray(),\n      policyType: new FormControl(this.policyToAdd.type, [Validators.required])\n    });\n\n    const policyAttributeSubscription = (this.policyAddFormGroup.controls\n      .attributes as FormArray).valueChanges.subscribe(changedAttributes => {\n      this.policyIsDuplicated = false;\n      if (changedAttributes.length > 0) {\n        const attributePolicies = changedAttributes.map(att => {\n          return att as Record<string, string>;\n        });\n        attributePolicies.forEach(attributeToAdd => {\n          recordAdd(\n            this.policyToAdd.attributes,\n            recordFirstOrDefaultKey(attributeToAdd, ''),\n            recordFirstOrDefault(attributeToAdd, '')\n          );\n        });\n      }\n    });\n\n    const policyTypeSubscription = this.policyAddFormGroup.get('policyType').valueChanges.subscribe(type => {\n      this.policyIsDuplicated = false;\n      this.policyToAdd.type = type;\n      if (type === PolicyType.DELAYRESPONSE) {\n        const lengthOfArray = (this.policyAddFormGroup.controls.attributes as FormArray).length;\n        (this.policyAddFormGroup.controls.attributes as FormArray).insert(\n          lengthOfArray,\n          this.formBuilder.generateDelayPolicyFormGroup()\n        );\n      }\n    });\n\n    this.subscriptions.push(policyTypeSubscription, policyDuplicatedSubscription, policyAttributeSubscription);\n  }\n\n  /**\n   *\n   * Gets the boolean indicating if the policy to be added is duplicated.\n   */\n  get isPolicyDuplicated(): boolean {\n    return this.policyIsDuplicated;\n  }\n  /**\n   * Gets the form control for the 'delay'\n   */\n  get delay(): AbstractControl {\n    const arrayAttributes = this.policyAddFormGroup.get('attributes') as FormArray;\n    const delayFormGroup = arrayAttributes.at(0) as FormGroup;\n    const delaytoReturn = delayFormGroup.get('delay');\n    return delaytoReturn;\n  }\n\n  /**\n   * Gets the form control for the 'policyType'\n   */\n  get policyType(): AbstractControl {\n    return this.policyAddFormGroup.get('policyType');\n  }\n  get attributes(): FormArray {\n    return this.policyAddFormGroup.get('attributes') as FormArray;\n  }\n\n  /**\n   * Controls the logic for emmiting a new addPolicy event\n   */\n  addPolicy(): void {\n    if (this.policyAddFormGroup.valid) {\n      this.policyAddedEventEmitter.emit(this.policyToAdd);\n    }\n\n    if (this.policyToAdd.type === PolicyType.NONE) {\n      this.policyType.setErrors({ required: true });\n      this.policyType.markAsTouched();\n    }\n  }\n\n  /**\n   * Determines if the policy is of type delay response.\n   * @param policyChosen selected policy\n   */\n  isDelayPolicy(policyChosen: PolicyType): boolean {\n    return policyChosen === PolicyType.DELAYRESPONSE;\n  }\n\n  /**\n   * Implementation for NG On Destroy\n   */\n  ngOnDestroy(): void {\n    this.subscriptions.forEach(subscription => {\n      subscription.unsubscribe();\n    });\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".policy-add {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n.policy-type {\n  margin-left: 50px;\n  display: flex;\n  justify-content: space-between;\n  align-items: right;\n}\n\n.add-button {\n  margin-right: 1.3em;\n  margin-left: 50px;\n}\n\n.policy-value {\n  width: 25em;\n}\n\n.error-message {\n  padding-left: 1.6em;\n}\n\n.row {\n  align-items: center;\n  width: 90%;\n  justify-content: space-between;\n}\n",
                    "styleUrl": "./policy-add.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "formBuilder",
                        "type": "PolicyFormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 30,
                "jsdoctags": [
                    {
                        "name": "formBuilder",
                        "type": "PolicyFormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "accessors": {
                "isPolicyDuplicated": {
                    "name": "isPolicyDuplicated",
                    "getSignature": {
                        "name": "isPolicyDuplicated",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 77,
                        "rawdescription": "\nGets the boolean indicating if the policy to be added is duplicated.",
                        "description": "<p>Gets the boolean indicating if the policy to be added is duplicated.</p>\n"
                    }
                },
                "delay": {
                    "name": "delay",
                    "getSignature": {
                        "name": "delay",
                        "type": "",
                        "returnType": "AbstractControl",
                        "line": 83,
                        "rawdescription": "Gets the form control for the 'delay'",
                        "description": "<p>Gets the form control for the &#39;delay&#39;</p>\n"
                    }
                },
                "policyType": {
                    "name": "policyType",
                    "getSignature": {
                        "name": "policyType",
                        "type": "",
                        "returnType": "AbstractControl",
                        "line": 93,
                        "rawdescription": "Gets the form control for the 'policyType'",
                        "description": "<p>Gets the form control for the &#39;policyType&#39;</p>\n"
                    }
                },
                "attributes": {
                    "name": "attributes",
                    "getSignature": {
                        "name": "attributes",
                        "type": "",
                        "returnType": "FormArray",
                        "line": 96
                    }
                }
            },
            "templateData": "<mat-card>\n  <mat-card-content>\n    <div class=\"row\">\n      <form class=\"policy-add\" [formGroup]=\"policyAddFormGroup\">\n        <div *ngFor=\"let policy of attributes.controls; let i = index\" [formGroup]=\"policy\">\n          <div *ngIf=\"isDelayPolicy(policyType.value)\">\n            <mat-form-field class=\"policy-value\">\n              <input matInput formControlName=\"delay\" />\n              <mat-hint> milliseconds to delay response</mat-hint>\n            </mat-form-field>\n            <div *ngIf=\"delay.invalid && (delay.dirty || delay.touched)\">\n              <mat-error *ngIf=\"delay.errors.required\">\n                Number of milliseconds is needed\n              </mat-error>\n              <mat-error *ngIf=\"delay.errors.min\">\n                Should be more than 0 milliseconds\n              </mat-error>\n              <mat-error *ngIf=\"delay.errors.pattern\">\n                Cannot contain spaces or be a negative number\n              </mat-error>\n            </div>\n          </div>\n        </div>\n        <mat-form-field class=\"policy-type\">\n          <mat-label>Select Policy</mat-label>\n          <mat-select formControlName=\"policyType\" name=\"policies\">\n            <mat-option *ngFor=\"let p of policies\" [value]=\"p.value\">\n              {{ p.viewValue }}\n            </mat-option>\n          </mat-select>\n        </mat-form-field>\n        <button mat-mini-fab class=\"add-button\" color=\"primary\" (click)=\"addPolicy()\">\n          <mat-icon>add</mat-icon>\n        </button>\n      </form>\n    </div>\n\n    <div *ngIf=\"policyType.invalid && (policyType.dirty || policyType.touched)\">\n      <mat-error *ngIf=\"policyType.errors.required\">\n        Policy type is required\n      </mat-error>\n    </div>\n    <div *ngIf=\"this.isPolicyDuplicated\">\n      <mat-error>\n        Policy already exists\n      </mat-error>\n    </div>\n  </mat-card-content>\n</mat-card>\n"
        },
        {
            "name": "PolicyComponent",
            "id": "component-PolicyComponent-27364cb3c8360fe5f7b2ec5340875377",
            "file": "src/app/components/scenario-editor/policy-container/policy/policy.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-policy",
            "styleUrls": [
                "./policy.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./policy.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "policyFormArray",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "FormArray"
                }
            ],
            "outputsClass": [
                {
                    "name": "policyIsDuplicated",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "EventEmitter<boolean>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "isCardDisabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "panelExpanded",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "subscriptions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription[]",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "addPolicyHandler",
                    "args": [
                        {
                            "name": "policyToAdd",
                            "type": "Policy",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThis method listens to the event emitter from the child component and adds the policy into the list\n",
                    "description": "<p>This method listens to the event emitter from the child component and adds the policy into the list</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1510,
                                "end": 1521,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "policyToAdd"
                            },
                            "type": "Policy",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1504,
                                "end": 1509,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>The policy being taken in from the child component to be added</p>\n"
                        }
                    ]
                },
                {
                    "name": "checkForDuplicates",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 83,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n\nDouble check to confirm there are no duplicates in the list of existing policies\n",
                    "description": "<p>Double check to confirm there are no duplicates in the list of existing policies</p>\n",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "deletePolicyHandler",
                    "args": [
                        {
                            "name": "indexPosition",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThis method listens to the event emitter from the child component and deletes the policy from the list\n",
                    "description": "<p>This method listens to the event emitter from the child component and deletes the policy from the list</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2218,
                                "end": 2231,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "indexPosition"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2212,
                                "end": 2217,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>The index position of the policy to be deleted</p>\n"
                        }
                    ]
                },
                {
                    "name": "generatePoliciesAttributes",
                    "args": [
                        {
                            "name": "group",
                            "type": "FormGroup",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "IPolicyFormGroup",
                    "typeParameters": [],
                    "line": 109,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "group",
                            "type": "FormGroup",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isPolicyDuplicate",
                    "args": [
                        {
                            "name": "policyToAdd",
                            "type": "Policy",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 64,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nchecks if the policy is inside the current form array\n",
                    "description": "<p>checks if the policy is inside the current form array</p>\n",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2540,
                                "end": 2551,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "policyToAdd"
                            },
                            "type": "Policy",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2534,
                                "end": 2539,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>The policy to be added to form array</p>\n"
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 129,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nImplementation for NG On Destroy\n",
                    "description": "<p>Implementation for NG On Destroy</p>\n"
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, OnDestroy, Output, EventEmitter, Input } from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { FormArray, FormGroup } from '@angular/forms';\nimport { NGXLogger } from 'ngx-logger';\nimport { recordAdd, compareRecords } from 'src/app/models/record';\nimport { Policy } from 'src/app/models/mock-definition/scenario/policy.model';\nimport { ScenarioFormBuilder } from '../../scenario-form-builder/scenario-form.builder';\nimport { cloneDeep } from 'lodash';\n@Component({\n  selector: 'app-policy',\n  templateUrl: './policy.component.html',\n  styleUrls: ['./policy.component.scss']\n})\nexport class PolicyComponent implements OnInit, OnDestroy {\n  private subscriptions: Subscription[] = [];\n  panelExpanded: boolean;\n  isCardDisabled: boolean;\n\n  @Output() policyIsDuplicated: EventEmitter<boolean>;\n  @Input() policyFormArray: FormArray;\n  constructor(private logger: NGXLogger, private formbuilder: ScenarioFormBuilder) {\n    this.policyIsDuplicated = new EventEmitter<boolean>();\n    this.policyIsDuplicated.emit(false);\n  }\n\n  ngOnInit(): void {\n    const policyFormArraySubscription = this.policyFormArray.valueChanges.subscribe(policies => {\n      this.logger.debug('PolicyComponent checking for duplicate policies : ', this.policyFormArray);\n      this.checkForDuplicates();\n    });\n    this.subscriptions.push(policyFormArraySubscription);\n  }\n\n  /**\n   * This method listens to the event emitter from the child component and adds the policy into the list\n   * @param policyToAdd The policy being taken in from the child component to be added\n   */\n  addPolicyHandler(policyToAdd: Policy) {\n    const policyFound = this.isPolicyDuplicate(policyToAdd);\n    if (!policyFound) {\n      this.policyIsDuplicated.emit(false);\n      const index = this.policyFormArray.length;\n      const newPolicyControl = this.formbuilder.getPolicyFormGroup(policyToAdd);\n      this.policyFormArray.insert(index, newPolicyControl);\n      this.logger.debug('PolicyComponent new rule added : ', policyToAdd);\n    } else {\n      this.policyIsDuplicated.emit(true);\n    }\n  }\n\n  /**\n   * This method listens to the event emitter from the child component and deletes the policy from the list\n   * @param indexPosition The index position of the policy to be deleted\n   */\n  deletePolicyHandler(indexPosition: number) {\n    this.policyFormArray.removeAt(indexPosition);\n    this.logger.debug('Delete Policy from list at index: ', indexPosition);\n  }\n\n  /**\n   * checks if the policy is inside the current form array\n   * @param policyToAdd The policy to be added to form array\n   */\n  private isPolicyDuplicate(policyToAdd: Policy): boolean {\n    return this.policyFormArray.controls\n      .map(group => {\n        const formGroupsToCheck = cloneDeep(group);\n        const policyFormGroup = this.generatePoliciesAttributes(formGroupsToCheck as FormGroup);\n        return policyFormGroup;\n      })\n      .some(policyFormGroup => {\n        return (\n          compareRecords(policyFormGroup.attributes, policyToAdd.attributes) &&\n          policyFormGroup.policyType === policyToAdd.type\n        );\n      });\n  }\n\n  /**\n   *\n   * Double check to confirm there are no duplicates in the list of existing policies\n   */\n  private checkForDuplicates(): void {\n    this.policyFormArray.controls.forEach(c => c.setErrors(null));\n    this.policyFormArray.markAsUntouched();\n    const policies = this.policyFormArray.controls.map(group => {\n      const formGroupsToCheck = cloneDeep(group);\n      const policyFormGroup = this.generatePoliciesAttributes(formGroupsToCheck as FormGroup);\n      return policyFormGroup;\n    });\n    policies.forEach((policyToCheck, indexToCheck) => {\n      policies.forEach((policyToCheckAgainst, indexToCheckAgainst) => {\n        const foundDuplicate =\n          compareRecords(policyToCheck.attributes, policyToCheckAgainst.attributes) &&\n          policyToCheck.policyType === policyToCheckAgainst.policyType &&\n          indexToCheck !== indexToCheckAgainst;\n        if (foundDuplicate) {\n          this.logger.error('PolicyComponent: found duplicate', policyToCheck);\n          (this.policyFormArray.at(indexToCheck) as FormGroup).get('policyType').markAsTouched();\n          (this.policyFormArray.at(indexToCheckAgainst) as FormGroup).get('policyType').markAsTouched();\n          (this.policyFormArray.at(indexToCheckAgainst) as FormGroup).setErrors({ duplicated: true });\n          (this.policyFormArray.at(indexToCheck) as FormGroup).setErrors({ duplicated: true });\n          this.policyFormArray.setErrors({ duplicated: true });\n        }\n      });\n    });\n  }\n\n  private generatePoliciesAttributes(group: FormGroup) {\n    interface IPolicyFormGroup {\n      attributes: Record<string, string>;\n      policyType: number;\n    }\n    const attributes = {} as Record<string, string>;\n    Object.keys((group as FormGroup).controls).forEach(key => {\n      if (key !== 'policyType') {\n        recordAdd(attributes, key, (group as FormGroup).controls[key].value);\n      }\n    });\n    const policyformgroup = {\n      policyType: (group as FormGroup).controls['policyType'].value,\n      attributes\n    } as IPolicyFormGroup;\n    return policyformgroup;\n  }\n  /**\n   * Implementation for NG On Destroy\n   */\n  ngOnDestroy(): void {\n    this.subscriptions.forEach(subscription => {\n      subscription.unsubscribe();\n    });\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "::ng-deep mat-expansion-panel {\n  padding: 16px;\n}\n\n::ng-deep mat-panel-description {\n  font-size: 0.85em;\n}\n.divider-padding {\n  margin-top: 1em;\n}\n\n.policy-edit {\n  display: flex;\n  flex-direction: column;\n}\n\n.add-policy {\n  padding-bottom: 1em;\n}\n",
                    "styleUrl": "./policy.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "logger",
                        "type": "NGXLogger",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "formbuilder",
                        "type": "ScenarioFormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 20,
                "jsdoctags": [
                    {
                        "name": "logger",
                        "type": "NGXLogger",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "formbuilder",
                        "type": "ScenarioFormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<mat-accordion>\n  <mat-expansion-panel [disabled]=\"this.isCardDisabled\" [expanded]=\"this.panelExpanded\">\n    <mat-expansion-panel-header class=\"right-aligned-header\">\n      <mat-panel-title>\n        Policies\n      </mat-panel-title>\n    </mat-expansion-panel-header>\n    <div class=\"policy-edit\">\n      <mat-divider class=\"divider-padding\"></mat-divider>\n      <app-policy-add\n        class=\"add-policy\"\n        (policyAddedEventEmitter)=\"addPolicyHandler($event)\"\n        [policyAddedIsDuplicated]=\"this.policyIsDuplicated\"\n      ></app-policy-add>\n    </div>\n\n    <ng-template [ngIf]=\"this.policyFormArray.controls.length\" [ngIfElse]=\"noPoliciesAdded\">\n      <div *ngFor=\"let policy of policyFormArray.controls; let i = index\">\n        <app-policy-edit\n          [policyEditFormGroup]=\"policy\"\n          (policyRemovedEventEmitter)=\"deletePolicyHandler(i)\"\n        ></app-policy-edit>\n      </div>\n    </ng-template>\n\n    <ng-template #noPoliciesAdded>\n      No policies added\n    </ng-template>\n  </mat-expansion-panel>\n</mat-accordion>\n"
        },
        {
            "name": "PolicyEditComponent",
            "id": "component-PolicyEditComponent-0e48b42d8128e4d5a993f38b690e170c",
            "file": "src/app/components/scenario-editor/policy-container/policy-edit/policy-edit.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-policy-edit",
            "styleUrls": [
                "./policy-edit.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./policy-edit.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "policyEditFormGroup",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "FormGroup"
                }
            ],
            "outputsClass": [
                {
                    "name": "policyRemovedEventEmitter",
                    "defaultValue": "new EventEmitter<Policy>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe policy to be deleted by the parent\n",
                    "description": "<p>The policy to be deleted by the parent</p>\n",
                    "line": 21,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "policies",
                    "defaultValue": "[{ value: PolicyType.DELAYRESPONSE, viewValue: 'Delay Response' }]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        143
                    ]
                },
                {
                    "name": "subscriptions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription[]",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "isDelayPolicy",
                    "args": [
                        {
                            "name": "policyChosen",
                            "type": "PolicyType",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 62,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n\nReturns true if the policy chosen is delay response policy type\n",
                    "description": "<p>Returns true if the policy chosen is delay response policy type</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1797,
                                "end": 1809,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "policyChosen"
                            },
                            "type": "PolicyType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1791,
                                "end": 1796,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>policy type chosen</p>\n"
                        }
                    ]
                },
                {
                    "name": "isPolicyDuplicated",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 77,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nImplementation for NG On Destroy\n",
                    "description": "<p>Implementation for NG On Destroy</p>\n"
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onRemove",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nEmits a removes event with the policy for the parent to remove\n",
                    "description": "<p>Emits a removes event with the policy for the parent to remove</p>\n"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, OnDestroy, Input, Output, EventEmitter } from '@angular/core';\nimport { PolicyType } from 'src/app/models/mock-definition/scenario/policy.type';\nimport { Subscription } from 'rxjs';\nimport { FormGroup, AbstractControl } from '@angular/forms';\nimport { Policy } from 'src/app/models/mock-definition/scenario/policy.model';\n\n@Component({\n  selector: 'app-policy-edit',\n  templateUrl: './policy-edit.component.html',\n  styleUrls: ['./policy-edit.component.scss']\n})\nexport class PolicyEditComponent implements OnInit, OnDestroy {\n  private subscriptions: Subscription[] = [];\n\n  readonly policies = [{ value: PolicyType.DELAYRESPONSE, viewValue: 'Delay Response' }];\n\n  @Input() policyEditFormGroup: FormGroup;\n  /**\n   * The policy to be deleted by the parent\n   */\n  @Output() policyRemovedEventEmitter = new EventEmitter<Policy>();\n\n  ngOnInit() {\n    const policyTypeSubscription = this.policyEditFormGroup.get('policyType').valueChanges.subscribe(type => {\n      this.policyEditFormGroup.updateValueAndValidity();\n    });\n\n    this.subscriptions.push(policyTypeSubscription);\n  }\n\n  /**\n   * Gets the form control for the 'delay'\n   */\n  get delay(): AbstractControl {\n    return this.policyEditFormGroup.get('delay');\n  }\n\n  /**\n   * Gets the value from the current policy type\n   */\n\n  get policyType(): AbstractControl {\n    return this.policyEditFormGroup.get('policyType');\n  }\n\n  /**\n   * Emits a removes event with the policy for the parent to remove\n   */\n  onRemove() {\n    const removePolicy = {\n      attributes: { delay: this.delay.value.toString() },\n      type: this.policyType.value\n    } as Policy;\n    this.policyRemovedEventEmitter.emit(removePolicy);\n  }\n\n  /**\n   *\n   * Returns true if the policy chosen is delay response policy type\n   * @param policyChosen policy type chosen\n   */\n  isDelayPolicy(policyChosen: PolicyType): boolean {\n    return policyChosen === PolicyType.DELAYRESPONSE;\n  }\n\n  isPolicyDuplicated() {\n    if (this.policyEditFormGroup.hasError('duplicated')) {\n      return this.policyEditFormGroup.errors.duplicated;\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * Implementation for NG On Destroy\n   */\n  ngOnDestroy(): void {\n    this.subscriptions.forEach(subscription => {\n      subscription.unsubscribe();\n    });\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".row {\n  display: flex;\n  justify-content: space-between;\n  width: 100%;\n}\n\n.mat-card {\n  padding: 0.75em;\n  min-width: 35vw;\n  margin-bottom: 1em;\n}\n\n.policy-value {\n  flex: 1;\n  padding-right: 3vw;\n}\n\n.delete-button {\n  background: none;\n  border: 0;\n}\n\n.delete-button-container {\n  display: flex;\n  padding-right: 1em;\n}\n\n.policy-type {\n  margin-right: 3.25em;\n}\n\n.error-message {\n  padding-left: 1.5em;\n  padding-top: 1em;\n}\n",
                    "styleUrl": "./policy-edit.component.scss"
                }
            ],
            "stylesData": "",
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "accessors": {
                "delay": {
                    "name": "delay",
                    "getSignature": {
                        "name": "delay",
                        "type": "",
                        "returnType": "AbstractControl",
                        "line": 34,
                        "rawdescription": "Gets the form control for the 'delay'",
                        "description": "<p>Gets the form control for the &#39;delay&#39;</p>\n"
                    }
                },
                "policyType": {
                    "name": "policyType",
                    "getSignature": {
                        "name": "policyType",
                        "type": "",
                        "returnType": "AbstractControl",
                        "line": 42,
                        "rawdescription": "Gets the value from the current policy type",
                        "description": "<p>Gets the value from the current policy type</p>\n"
                    }
                }
            },
            "templateData": "<mat-card class=\"policy-add-card\">\n  <mat-card-content>\n    <form [formGroup]=\"policyEditFormGroup\">\n      <div class=\"row\">\n        <div *ngIf=\"isDelayPolicy(policyType.value)\">\n          <mat-form-field class=\"policy-value\">\n            <input matInput #inputDelay formControlName=\"delay\" />\n            <mat-hint> milliseconds to delay response</mat-hint>\n          </mat-form-field>\n          <div *ngIf=\"delay.invalid && (delay.dirty || delay.touched)\">\n            <mat-error *ngIf=\"delay.errors.required\">\n              Number of milliseconds is needed\n            </mat-error>\n            <mat-error *ngIf=\"delay.errors.min\">\n              Should be more than 0 milliseconds\n            </mat-error>\n            <mat-error *ngIf=\"delay.errors.pattern\">\n              Cannot contain spaces or be a negative number\n            </mat-error>\n          </div>\n        </div>\n\n        <mat-form-field>\n          <mat-label>Select Policy</mat-label>\n          <mat-select formControlName=\"policyType\" name=\"policies\">\n            <mat-option *ngFor=\"let p of policies\" [value]=\"p.value\">\n              {{ p.viewValue }}\n            </mat-option>\n          </mat-select>\n        </mat-form-field>\n\n        <div class=\"delete-button-container\">\n          <button class=\"delete-button\" (click)=\"onRemove()\">\n            <mat-icon>close</mat-icon>\n          </button>\n        </div>\n      </div>\n    </form>\n\n    <div *ngIf=\"policyType.invalid && policyType.dirty\">\n      <mat-error *ngIf=\"policyType.errors.required\">\n        Policy type is required\n      </mat-error>\n    </div>\n    <div>\n      <mat-error *ngIf=\"policyType.touched && isPolicyDuplicated()\">\n        Policy is duplicated\n      </mat-error>\n    </div>\n  </mat-card-content>\n</mat-card>\n"
        },
        {
            "name": "QuickExportComponent",
            "id": "component-QuickExportComponent-0c3bcfe0aea14bf8a9dd7103fdd90da2",
            "file": "src/app/components/orbital-common/quick-export/quick-export.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-quick-export",
            "styleUrls": [
                "./quick-export.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./quick-export.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "exportErrorMessage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "exportStatusMessage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "mockInService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MockDefinition",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "triggerOpenCancelBox",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "urlInService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "urlToNavigateTo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "openCancelDialogOrNavigateToUrl",
                    "args": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nopens dialog to dismiss current scenario to review\nRedirects to Export to Server page unless server url\nand mockdefinition are cached in service, then do\na quick export.\n\n",
                    "description": "<p>opens dialog to dismiss current scenario to review\nRedirects to Export to Server page unless server url\nand mockdefinition are cached in service, then do\na quick export.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { ExportMockdefinitionService } from '../../../services/export-mockdefinition/export-mockdefinition.service';\nimport { MockDefinition } from '../../../models/mock-definition/mock-definition.model';\nimport { NGXLogger } from 'ngx-logger';\n\n@Component({\n  selector: 'app-quick-export',\n  templateUrl: './quick-export.component.html',\n  styleUrls: ['./quick-export.component.scss']\n})\nexport class QuickExportComponent implements OnInit {\n  triggerOpenCancelBox: boolean;\n  urlToNavigateTo: string;\n  urlInService: string;\n  mockInService: MockDefinition;\n  exportStatusMessage: string;\n  exportErrorMessage: string;\n\n  constructor(\n    private router: Router,\n    private mockdefinitionService: ExportMockdefinitionService,\n    private logger: NGXLogger\n  ) {}\n\n  /**\n   * opens dialog to dismiss current scenario to review\n   * Redirects to Export to Server page unless server url\n   * and mockdefinition are cached in service, then do\n   * a quick export.\n   *\n   */\n  openCancelDialogOrNavigateToUrl(url: string) {\n    this.urlInService = this.mockdefinitionService.getUrl();\n    this.mockInService = this.mockdefinitionService.getMockdefinition();\n    if (this.router.url.includes('scenario-editor')) {\n      this.triggerOpenCancelBox = true;\n    } else if (!!this.urlInService) {\n      this.exportStatusMessage = '';\n      this.exportErrorMessage = '';\n      this.mockdefinitionService.exportMockDefinition(this.urlInService, this.mockInService).subscribe(\n        gotExported => {\n        if (gotExported) {\n          this.logger.debug('Mockdefinition has been exported: ', this.mockInService);\n          this.logger.debug('To Url: ', this.urlInService);\n          this.exportStatusMessage = 'File successfully exported to ' + this.urlInService;\n          this.urlToNavigateTo = url;\n        } else {\n          this.exportErrorMessage = 'File could not be exported because of an error';\n          this.router.navigate([url]);\n        }\n      },\n      () => {\n        this.exportErrorMessage = 'File could not be exported because of an error';\n        this.router.navigate([url]);\n      });\n    } else {\n      this.exportErrorMessage = 'File could not be exported because of an error';\n      this.router.navigate([url]);\n    }\n  }\n\n  ngOnInit() {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "button mat-icon {\n  opacity: 0.54;\n}\n\na mat-icon {\n  opacity: 0.54;\n}\n\nbutton h4 {\n  font-size: 0.9em !important;\n}\n\nbutton:hover {\n  background: #f0f0f0;\n  cursor: pointer;\n  button {\n    background: #f0f0f0;\n  }\n}\n\n.status-message {\n  color: grey;\n  padding-left: 20px;\n}\n\n.error-message {\n  color: red;\n  padding-left: 20px;\n}\n",
                    "styleUrl": "./quick-export.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "mockdefinitionService",
                        "type": "ExportMockdefinitionService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "logger",
                        "type": "NGXLogger",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 18,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "mockdefinitionService",
                        "type": "ExportMockdefinitionService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "logger",
                        "type": "NGXLogger",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"side-bar-container\" mode=\"side\" opened>\n  <div class=\"side-bar-bottom\">\n    <button mat-list-item (click)=\"openCancelDialogOrNavigateToUrl('/export-to-server')\">\n      <mat-icon mat-list-icon>new_releases</mat-icon>\n      <h4 mat-line>Quick Export</h4>\n    </button>\n    <div *ngIf=\"!!exportStatusMessage?.length\" class=\"status-message\">{{ exportStatusMessage }}</div>\n    <div *ngIf=\"!!exportErrorMessage?.length\" class=\"error-message\">{{ exportErrorMessage }}</div>\n  </div>\n</div>\n"
        },
        {
            "name": "ScenarioEditorComponent",
            "id": "component-ScenarioEditorComponent-ec44a799572bbaa31bea2fdf775f11b1",
            "file": "src/app/components/scenario-editor/scenario-editor.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-scenario-editor",
            "styleUrls": [
                "./scenario-editor.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./scenario-editor.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "endpointPath",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "endpointVerb",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "VerbType",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "metadata",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Metadata",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "metadataMatchRuleValid",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "paramsSubscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "requestMatchRule",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "RequestMatchRule",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "requestMatchRuleValid",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "response",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Response",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "responseMatchRuleValid",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "scenarioFormGroup",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "scenarioId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "selectedScenario",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Scenario",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "shouldSave",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "storeSubscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "triggerOpenCancelBox",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 36
                }
            ],
            "methodsClass": [
                {
                    "name": "cancel",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 180,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "createEmptyScenario",
                    "args": [
                        {
                            "name": "scenarioId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "scenarioVerb",
                            "type": "VerbType",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "scenarioPath",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Scenario",
                    "typeParameters": [],
                    "line": 234,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCreate an empty scenario use the provided information\n",
                    "description": "<p>Create an empty scenario use the provided information</p>\n",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 8742,
                                "end": 8752,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "scenarioId"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 8736,
                                "end": 8741,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>Scenario ID of the empty scenario</p>\n"
                        },
                        {
                            "name": {
                                "pos": 8799,
                                "end": 8811,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "scenarioVerb"
                            },
                            "type": "VerbType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 8793,
                                "end": 8798,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>Verb of the scenario</p>\n"
                        },
                        {
                            "name": {
                                "pos": 8845,
                                "end": 8857,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "scenarioPath"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 8839,
                                "end": 8844,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>Path of the scenario</p>\n"
                        }
                    ]
                },
                {
                    "name": "handleMetadataOutput",
                    "args": [
                        {
                            "name": "metadata",
                            "type": "Metadata",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 88,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "metadata",
                            "type": "Metadata",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleRequestMatchRuleOutput",
                    "args": [
                        {
                            "name": "requestMatchRule",
                            "type": "RequestMatchRule",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 99,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSaves the request match rule in the scenario-editor component\n",
                    "description": "<p>Saves the request match rule in the scenario-editor component</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 3586,
                                "end": 3602,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "requestMatchRule"
                            },
                            "type": "RequestMatchRule",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 3580,
                                "end": 3585,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>The request match rule to save</p>\n"
                        }
                    ]
                },
                {
                    "name": "handleResponseOutput",
                    "args": [
                        {
                            "name": "response",
                            "type": "Response",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 158,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "response",
                            "type": "Response",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngAfterContentChecked",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 72,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 79,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nUnsubscribes from the params subscription when the module is unloaded\n",
                    "description": "<p>Unsubscribes from the params subscription when the module is unloaded</p>\n"
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRuns when the app is initialized\n",
                    "description": "<p>Runs when the app is initialized</p>\n"
                },
                {
                    "name": "onCancelDialogAction",
                    "args": [
                        {
                            "name": "shouldCancel",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 189,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHandles the response from the cancel box\n",
                    "description": "<p>Handles the response from the cancel box</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 7197,
                                "end": 7209,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "shouldCancel"
                            },
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 7191,
                                "end": 7196,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>The button pressed for the cancel box</p>\n"
                        }
                    ]
                },
                {
                    "name": "retrieveScenario",
                    "args": [
                        {
                            "name": "scenarioId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 203,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRetrieve scenario from store using the provided scenario ID;\nIf not found, create a new empty scenario\n",
                    "description": "<p>Retrieve scenario from store using the provided scenario ID;\nIf not found, create a new empty scenario</p>\n",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 7721,
                                "end": 7731,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "scenarioId"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 7715,
                                "end": 7720,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>Scenario ID</p>\n"
                        }
                    ]
                },
                {
                    "name": "save",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 168,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSaves the current scenario to the designer store\n",
                    "description": "<p>Saves the current scenario to the designer store</p>\n",
                    "modifierKind": [
                        130
                    ]
                },
                {
                    "name": "saveScenario",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 106,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, OnDestroy, ChangeDetectorRef, AfterContentChecked } from '@angular/core';\nimport { Router, Params, ActivatedRoute } from '@angular/router';\nimport { DesignerStore } from 'src/app/store/designer-store';\nimport { Scenario } from 'src/app/models/mock-definition/scenario/scenario.model';\nimport { NGXLogger } from 'ngx-logger';\nimport { Subscription } from 'rxjs';\nimport { Metadata } from 'src/app/models/mock-definition/metadata.model';\nimport { RequestMatchRule } from 'src/app/models/mock-definition/scenario/request-match-rule.model';\nimport { Response } from 'src/app/models/mock-definition/scenario/response.model';\nimport { VerbType } from 'src/app/models/verb.type';\nimport * as _ from 'lodash';\nimport { ScenarioFormBuilder, ScenarioFormMapper } from './scenario-form-builder/scenario-form.builder';\nimport { FormGroup, FormArray, Form } from '@angular/forms';\nimport { Policy } from 'src/app/models/mock-definition/scenario/policy.model';\nimport { ResponseType } from 'src/app/models/mock-definition/scenario/response.type';\n@Component({\n  selector: 'app-scenario-editor',\n  templateUrl: './scenario-editor.component.html',\n  styleUrls: ['./scenario-editor.component.scss']\n})\nexport class ScenarioEditorComponent implements OnInit, OnDestroy, AfterContentChecked {\n  scenarioId: string;\n  selectedScenario: Scenario;\n  paramsSubscription: Subscription;\n  storeSubscription: Subscription;\n\n  requestMatchRule: RequestMatchRule;\n  metadata: Metadata;\n  response: Response;\n\n  shouldSave: boolean;\n  requestMatchRuleValid = false;\n  responseMatchRuleValid = false;\n  metadataMatchRuleValid = false;\n\n  triggerOpenCancelBox: boolean;\n\n  endpointVerb: VerbType;\n  endpointPath: string;\n  scenarioFormGroup: FormGroup;\n\n  constructor(\n    private router: Router,\n    private store: DesignerStore,\n    private logger: NGXLogger,\n    private activatedRouter: ActivatedRoute,\n    private cdRef: ChangeDetectorRef,\n    private formBuilder: ScenarioFormBuilder,\n    private scenarioFormMapper: ScenarioFormMapper\n  ) {}\n\n  /**\n   * Runs when the app is initialized\n   */\n  ngOnInit() {\n    this.triggerOpenCancelBox = false;\n    this.paramsSubscription = this.activatedRouter.params.subscribe((param: Params) => {\n      this.scenarioId = param.scenarioId;\n      this.logger.debug('ScenarioEditorComponent:ngOnInit: Retrieved Scenario ID from URL', param.scenarioId);\n      this.retrieveScenario(param.scenarioId);\n      this.scenarioFormGroup = this.formBuilder.createScenarioForm(this.selectedScenario);\n      this.store.selectedScenario = this.selectedScenario;\n    });\n    this.storeSubscription = this.store.state$.subscribe(state => {\n      if (!!state.mockDefinition && !!state.selectedEndpoint) {\n        this.endpointVerb = state.selectedEndpoint.verb;\n        this.endpointPath = state.selectedEndpoint.path;\n      }\n    });\n  }\n\n  ngAfterContentChecked(): void {\n    this.cdRef.detectChanges();\n  }\n\n  /**\n   * Unsubscribes from the params subscription when the module is unloaded\n   */\n  ngOnDestroy() {\n    this.paramsSubscription.unsubscribe();\n    this.storeSubscription.unsubscribe();\n  }\n\n  /*\n   * Saves the metadata to the scenario editor\n   * @param metadata The metadata input from the component\n   */\n  handleMetadataOutput(metadata: Metadata) {\n    this.logger.debug('handleMetadataOutput:', metadata);\n    this.metadataMatchRuleValid = !!metadata.title && metadata.description.length <= 500;\n    this.metadata = metadata;\n    this.saveScenario();\n  }\n\n  /**\n   * Saves the request match rule in the scenario-editor component\n   * @param requestMatchRule The request match rule to save\n   */\n  handleRequestMatchRuleOutput(requestMatchRule: RequestMatchRule) {\n    this.logger.debug('handleRequestMatchRuleOutput:', requestMatchRule);\n    this.requestMatchRuleValid = requestMatchRule !== ({} as RequestMatchRule);\n    this.requestMatchRule = requestMatchRule;\n    this.saveScenario();\n  }\n\n  saveScenario() {\n    if (this.metadataMatchRuleValid && this.scenarioFormGroup.valid && this.responseMatchRuleValid) {\n      this.logger.debug(\n        'ScenarioEditorComponent:saveScenario: Attempt to update the provided scenario',\n        this.selectedScenario\n      );\n      const newUrlRules = this.scenarioFormMapper.GetUrlRulesFromForm(\n        (this.scenarioFormGroup.controls.requestMatchRules as FormGroup).controls.urlMatchRules as FormArray\n      );\n      const newPolicyRules = this.scenarioFormMapper.GetPolicyRulesFromForm(\n        this.scenarioFormGroup.controls.policies as FormArray\n      );\n      const newHeaderRules = this.scenarioFormMapper.GetHeaderOrQueryRulesFromForm(\n        (this.scenarioFormGroup.controls.requestMatchRules as FormGroup).controls.headerMatchRules as FormArray\n      );\n      const newQueryRules = this.scenarioFormMapper.GetHeaderOrQueryRulesFromForm(\n        (this.scenarioFormGroup.controls.requestMatchRules as FormGroup).controls.queryMatchRules as FormArray\n      );\n      const newBodyRules = this.scenarioFormMapper.GetBodyRulesFromForm(\n        (this.scenarioFormGroup.controls.requestMatchRules as FormGroup).controls.bodyMatchRules as FormArray\n      );\n\n      const newResponseType = this.scenarioFormMapper.GetResponseTypeFromForm(\n        (this.scenarioFormGroup.controls.response as FormGroup)\n      );\n\n      this.selectedScenario.metadata.title = this.metadata.title;\n      this.selectedScenario.metadata.description = this.metadata.description;\n      this.selectedScenario.requestMatchRules.headerRules = newHeaderRules;\n      this.selectedScenario.requestMatchRules.queryRules = newQueryRules;\n      this.selectedScenario.requestMatchRules.bodyRules = newBodyRules;\n      this.selectedScenario.requestMatchRules.urlRules = newUrlRules;\n      this.selectedScenario.policies = newPolicyRules;\n\n      this.selectedScenario.response.body = this.response.body;\n      this.selectedScenario.response.headers = this.response.headers;\n      this.selectedScenario.response.status = this.response.status;\n      this.selectedScenario.response.type = newResponseType;\n\n      this.store.addOrUpdateScenario(this.selectedScenario);\n\n      this.logger.debug('ScenarioEditorComponent:saveScenario: Updated the provided scenario', this.selectedScenario);\n\n      this.requestMatchRuleValid = false;\n      this.router.navigateByUrl('/scenario-view');\n    }\n  }\n\n  /*\n   * Saves the response to the scenario editor\n   * @param response The response input from the component\n   */\n  handleResponseOutput(response: Response) {\n    this.logger.debug('handleResponseOutput:', response);\n    this.responseMatchRuleValid = !!response.status;\n    this.response = response;\n    this.saveScenario();\n  }\n\n  /**\n   * Saves the current scenario to the designer store\n   */\n  async save() {\n    this.shouldSave = false;\n\n    // this delays by 0ms, which causes the event loop to continue and\n    // set the setter\n    await new Promise(resolve => setTimeout(resolve, 0));\n    this.shouldSave = true;\n  }\n\n  /*\n   * Opens the cancel box\n   */\n  cancel() {\n    this.logger.debug('Opened cancel box for scenario-editor');\n    this.triggerOpenCancelBox = true;\n  }\n\n  /**\n   * Handles the response from the cancel box\n   * @param shouldCancel The button pressed for the cancel box\n   */\n  onCancelDialogAction(shouldCancel: boolean) {\n    this.logger.debug('User answer for scenario-editor cancel box', shouldCancel);\n    this.triggerOpenCancelBox = false;\n    if (shouldCancel) {\n      this.logger.debug('The user has cancelled; navigating to endpoint-view');\n      this.router.navigateByUrl('/scenario-view');\n    }\n  }\n\n  /**\n   * Retrieve scenario from store using the provided scenario ID;\n   * If not found, create a new empty scenario\n   * @param scenarioId Scenario ID\n   */\n  private retrieveScenario(scenarioId: string) {\n    const currentMock = this.store.state.mockDefinition;\n    if (!currentMock) {\n      return;\n    }\n\n    const selected = currentMock.scenarios.find(s => s.id === scenarioId);\n    if (selected) {\n      this.selectedScenario = _.cloneDeep(selected);\n\n      this.logger.debug(\n        'ScenarioEditorComponent:retrieveScenario: Scenario find for the provided scenario ID',\n        this.selectedScenario\n      );\n    } else {\n      const endpointVerb = this.store.state.selectedEndpoint.verb;\n      const endpointPath = this.store.state.selectedEndpoint.path;\n      this.selectedScenario = this.createEmptyScenario(scenarioId, endpointVerb, endpointPath);\n      this.logger.debug(\n        `ScenarioEditorComponent:retrieveScenario: Scenario not find, new scenario were created for (${endpointPath}, ${endpointVerb})`,\n        this.selectedScenario\n      );\n    }\n  }\n\n  /**\n   * Create an empty scenario use the provided information\n   * @param scenarioId Scenario ID of the empty scenario\n   * @param scenarioVerb Verb of the scenario\n   * @param scenarioPath Path of the scenario\n   */\n  private createEmptyScenario(scenarioId: string, scenarioVerb: VerbType, scenarioPath: string): Scenario {\n    return {\n      id: scenarioId,\n      metadata: {} as Metadata,\n      verb: scenarioVerb,\n      path: scenarioPath,\n      response: {\n        headers: {},\n        body: '',\n        status: 200,\n        type: ResponseType.CUSTOM\n      } as Response,\n      requestMatchRules: {\n        headerRules: [],\n        queryRules: [],\n        bodyRules: [],\n        urlRules: []\n      } as RequestMatchRule,\n      policies: [] as Policy[],\n      defaultScenario: false\n    } as Scenario;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".container.editor {\n  width: 95vw !important;\n  min-height: 85vh !important;\n  margin-top: 2vh;\n  -webkit-box-shadow: 0px 1px 12px 3px rgba(153, 148, 153, 1);\n  -moz-box-shadow: 0px 1px 12px 3px rgba(153, 148, 153, 1);\n  box-shadow: 0px 1px 12px 3px rgba(153, 148, 153, 1);\n}\n\n.metadata {\n  width: 100% !important;\n}\n\ndiv.metadata {\n  width: 100%;\n  overflow-y: hidden;\n}\n\ndiv.metadata h3 {\n  text-align: center;\n}\n\np#description {\n  font-size: 1.4em;\n  color: rgba(0, 0, 0, 0.541327);\n  font-family: Roboto;\n}\n\napp-overview-header {\n  width: 100%;\n  height: 19%;\n  display: flex;\n  flex-direction: column;\n}\n\ndiv#metadata-cards {\n  max-width: 96%;\n  display: flex;\n  flex-direction: column;\n  margin-left: 2%;\n}\n\nmat-card-title {\n  font-size: 1.2em;\n}\n\nbutton#go-to-scenarios {\n  margin-top: 1em;\n  width: 10em;\n}\n\nbutton#save-button {\n  margin-top: 1em;\n  width: 10em;\n}\n\ndiv#cancel-save-buttons {\n  display: flex;\n  justify-content: space-between;\n}\n\nmat-form-field {\n  width: 100%;\n}\n\nmat-chip-list {\n  padding-right: 1em;\n}\n\napp-scenario-card,\napp-add-metadata,\napp-add-request-match-rule,\napp-add-response {\n  margin-bottom: 1em;\n}\n\n.key-value-item div button {\n  width: 20px;\n  height: 20px;\n  margin-top: 25px;\n}\n\ndiv.flex-space-between {\n  display: flex;\n  justify-content: space-between;\n}\n\n.overlay {\n  position: fixed;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 100vw;\n  height: 100vh;\n  top: 0;\n  left: 0;\n  z-index: 1;\n  background-color: rgba(0, 0, 0, 0.5);\n}\n\n.endpoint-info {\n  display: flex;\n  align-items: center;\n}\n",
                    "styleUrl": "./scenario-editor.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "store",
                        "type": "DesignerStore",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "logger",
                        "type": "NGXLogger",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "activatedRouter",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cdRef",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "formBuilder",
                        "type": "ScenarioFormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "scenarioFormMapper",
                        "type": "ScenarioFormMapper",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 40,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "DesignerStore",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "logger",
                        "type": "NGXLogger",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "activatedRouter",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cdRef",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "formBuilder",
                        "type": "ScenarioFormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "scenarioFormMapper",
                        "type": "ScenarioFormMapper",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy",
                "AfterContentChecked"
            ],
            "templateData": "<div class=\"fullscreen column center-hr\">\n  <div class=\"container editor\">\n    <div class=\"row\">\n      <div class=\"sidebar row\">\n        <app-side-bar class=\"row\"></app-side-bar>\n      </div>\n      <div class=\"metadata\">\n        <div>\n          <app-overview-header [header]=\"headerContent\"></app-overview-header>\n        </div>\n        <div id=\"metadata-cards\">\n          <h3>Scenario Properties</h3>\n\n          <app-add-metadata\n            [metadata]=\"this.selectedScenario?.metadata\"\n            (metadataOutput)=\"handleMetadataOutput($event)\"\n            [saveStatus]=\"this.shouldSave\"\n          >\n          </app-add-metadata>\n\n          <app-add-request-match-rule\n            [requestMatchRule]=\"this.selectedScenario?.requestMatchRules\"\n            (requestMatchRuleOutput)=\"handleRequestMatchRuleOutput($event)\"\n            [requestMatchRuleFormGroup]=\"this.scenarioFormGroup.controls.requestMatchRules\"\n            [saveStatus]=\"this.shouldSave\"\n          >\n          </app-add-request-match-rule>\n\n          <app-add-response\n            [response]=\"this.selectedScenario?.response\"\n            (responseOutput)=\"handleResponseOutput($event)\"\n            [responseFormGroup]=\"this.scenarioFormGroup.controls.response\"\n            [saveStatus]=\"this.shouldSave\"\n          >\n          </app-add-response>\n\n          <app-policy [policyFormArray]=\"this.scenarioFormGroup.controls.policies\"></app-policy>\n          <div class=\"row\" style=\"justify-content: space-between\">\n            <div id=\"scenario-back-button-div\">\n              <button id=\"go-to-scenarios\" color=\"primary\" mat-raised-button (click)=\"cancel()\">\n                Back to Scenarios\n              </button>\n            </div>\n            <div id=\"save-button-div\">\n              <button id=\"save-button\" color=\"primary\" mat-raised-button (click)=\"save()\">\n                Save\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n\n<ng-template #headerContent let-path=\"path\">\n  <div class=\"title column center\">\n    <div class=\"endpoint-info\">\n      <mat-chip-list\n        ><mat-chip [style.background-color]=\"this.endpointVerb | getVerbColor\">{{\n          this.endpointVerb | getVerbString\n        }}</mat-chip>\n      </mat-chip-list>\n      <h3>\n        {{ this.endpointPath }}\n      </h3>\n    </div>\n    <div>\n      <h3>\n        {{ this.selectedScenario?.metadata?.title || 'New Scenario' }}\n      </h3>\n    </div>\n  </div>\n</ng-template>\n\n<div class=\"overlay\" *ngIf=\"triggerOpenCancelBox\">\n  <div>\n    <mat-card>\n      <app-dialog-box\n        titleText=\"Confirm Scenario Changes Discard\"\n        confirmButtonText=\"Confirm\"\n        cancelButtonText=\"Cancel\"\n        bodyText=\"Are you sure you want to discard your unsaved changes?\"\n        (choiceBoolean)=\"onCancelDialogAction($event)\"\n      ></app-dialog-box>\n    </mat-card>\n  </div>\n</div>\n"
        },
        {
            "name": "ScenarioViewComponent",
            "id": "component-ScenarioViewComponent-d176d2bbba73406991520354c4086aa1",
            "file": "src/app/components/scenario-view/scenario-view.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-scenario-view",
            "styleUrls": [
                "./scenario-view.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./scenario-view.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "scenarios",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "Scenario[]"
                }
            ],
            "outputsClass": [
                {
                    "name": "shouldCloneToView",
                    "defaultValue": "new EventEmitter<Scenario>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "endpointPath",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "endpointVerb",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "VerbType",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "errorMessage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "filteredList",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Scenario[]",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "isHoveringOverMenu",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "mockDefinition",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MockDefinition",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "scenarioList",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Scenario[]",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "storeSubscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "triggerOpen",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 32
                }
            ],
            "methodsClass": [
                {
                    "name": "addScenario",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "cloneScenario",
                    "args": [
                        {
                            "name": "scenario",
                            "type": "Scenario",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 99,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nClones a scenario, and adds the -copy suffix to the name. If a scenario already exists with that suffix (and has the same name),\nthen a monotonically increasing integer will be appended such that it does not conflict with any existing scenario names.\n",
                    "description": "<p>Clones a scenario, and adds the -copy suffix to the name. If a scenario already exists with that suffix (and has the same name),\nthen a monotonically increasing integer will be appended such that it does not conflict with any existing scenario names.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "scenario",
                            "type": "Scenario",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "confirmDeleteDialog",
                    "args": [
                        {
                            "name": "scenario",
                            "type": "Scenario",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 130,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThis method opens the dialog box when called\n",
                    "description": "<p>This method opens the dialog box when called</p>\n",
                    "jsdoctags": [
                        {
                            "name": "scenario",
                            "type": "Scenario",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteScenario",
                    "args": [
                        {
                            "name": "scenario",
                            "type": "Scenario",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 152,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThis method updates the store with the current scenario filtered out\n",
                    "description": "<p>This method updates the store with the current scenario filtered out</p>\n",
                    "jsdoctags": [
                        {
                            "name": "scenario",
                            "type": "Scenario",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getBodyText",
                    "args": [
                        {
                            "name": "scenario",
                            "type": "Scenario",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 163,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThis method sets the body text with the deletion prompt\n",
                    "description": "<p>This method sets the body text with the deletion prompt</p>\n",
                    "jsdoctags": [
                        {
                            "name": "scenario",
                            "type": "Scenario",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getScenarioResponseStatusString",
                    "args": [
                        {
                            "name": "scenario",
                            "type": "Scenario",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 115,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGets the scenario response's status string\n",
                    "description": "<p>Gets the scenario response&#39;s status string</p>\n",
                    "jsdoctags": [
                        {
                            "name": "scenario",
                            "type": "Scenario",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "goToEndpoints",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 72,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGoes back to the endpoint page\n",
                    "description": "<p>Goes back to the endpoint page</p>\n"
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 62,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onDialogAction",
                    "args": [
                        {
                            "name": "confirmed",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "scenario",
                            "type": "Scenario",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 139,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThis method delete the scenario in the store when the user clicks on the confirm box and does nothing if the user cancels\nthe scenario deletion\n",
                    "description": "<p>This method delete the scenario in the store when the user clicks on the confirm box and does nothing if the user cancels\nthe scenario deletion</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 4508,
                                "end": 4517,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "confirmed"
                            },
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 4502,
                                "end": 4507,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>boolean is true when the user clicks on confirm scenario deletion</p>\n"
                        },
                        {
                            "name": "scenario",
                            "type": "Scenario",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "scenarioToString",
                    "args": [
                        {
                            "name": "scenario",
                            "type": "Scenario",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 79,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThis function takes an scenario object and return its path as a string\n",
                    "description": "<p>This function takes an scenario object and return its path as a string</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2633,
                                "end": 2641,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "scenario"
                            },
                            "type": "Scenario",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2627,
                                "end": 2632,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>The scenario to be converted to string</p>\n"
                        }
                    ]
                },
                {
                    "name": "setFilteredList",
                    "args": [
                        {
                            "name": "newScenarios",
                            "type": "Scenario[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 88,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThis function takes a list of scenarios and updates it to the new list of filtered scenarios\n",
                    "description": "<p>This function takes a list of scenarios and updates it to the new list of filtered scenarios</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2945,
                                "end": 2957,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "newScenarios"
                            },
                            "type": "Scenario[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2939,
                                "end": 2944,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>The list of scenarios</p>\n"
                        }
                    ]
                },
                {
                    "name": "showDialog",
                    "args": [
                        {
                            "name": "scenario",
                            "type": "Scenario",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 156,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "scenario",
                            "type": "Scenario",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toggleDefaultScenario",
                    "args": [
                        {
                            "name": "event",
                            "type": "MatCheckboxChange",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "scenario",
                            "type": "Scenario",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 171,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSets the default scenario to the provided scenario\n",
                    "description": "<p>Sets the default scenario to the provided scenario</p>\n",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "MatCheckboxChange",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": {
                                "pos": 5451,
                                "end": 5459,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "scenario"
                            },
                            "type": "Scenario",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 5445,
                                "end": 5450,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>The scenario to make default</p>\n"
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, OnDestroy, Input, Output, EventEmitter } from '@angular/core';\nimport { DesignerStore } from 'src/app/store/designer-store';\nimport { Scenario } from 'src/app/models/mock-definition/scenario/scenario.model';\nimport { Router } from '@angular/router';\nimport { NGXLogger } from 'ngx-logger';\nimport * as uuid from 'uuid';\nimport { Subscription } from 'rxjs';\nimport { VerbType } from 'src/app/models/verb.type';\nimport { MockDefinitionService } from 'src/app/services/mock-definition/mock-definition.service';\nimport { map } from 'rxjs/operators';\nimport { MockDefinition } from 'src/app/models/mock-definition/mock-definition.model';\nimport * as HttpStatus from 'http-status-codes';\nimport { MatCheckboxChange } from '@angular/material';\n\n@Component({\n  selector: 'app-scenario-view',\n  templateUrl: './scenario-view.component.html',\n  styleUrls: ['./scenario-view.component.scss']\n})\nexport class ScenarioViewComponent implements OnInit, OnDestroy {\n  @Input() scenarios: Scenario[] = [];\n  @Output() shouldCloneToView = new EventEmitter<Scenario>();\n  private storeSubscription: Subscription;\n\n  endpointVerb: VerbType;\n  endpointPath: string;\n\n  scenarioList: Scenario[] = [];\n  filteredList: Scenario[] = [];\n\n  errorMessage: string;\n  triggerOpen: string;\n  mockDefinition: MockDefinition;\n  isHoveringOverMenu: boolean;\n\n  constructor(\n    private store: DesignerStore,\n    private router: Router,\n    private logger: NGXLogger,\n    private mockDefinitionService: MockDefinitionService\n  ) {\n    this.store.state$.subscribe(state => {\n      this.mockDefinition = state.mockDefinition;\n    });\n  }\n\n  ngOnInit() {\n    this.storeSubscription = this.store.state$.subscribe(state => {\n      if (!!state.mockDefinition && !!state.selectedEndpoint) {\n        this.endpointVerb = state.selectedEndpoint.verb;\n        this.endpointPath = state.selectedEndpoint.path;\n        this.scenarioList = state.mockDefinition.scenarios.filter(\n          s => s.path === this.endpointPath && s.verb === this.endpointVerb\n        );\n        this.logger.log('ScenarioViewComponent:ngOnInit: Resulting ScenarioList: ', this.scenarioList);\n      }\n    });\n\n    this.errorMessage = 'No scenarios exist. Click the add button to create a new scenario.';\n  }\n\n  ngOnDestroy(): void {\n    this.storeSubscription.unsubscribe();\n  }\n\n  addScenario() {\n    this.router.navigate(['/scenario-editor', uuid.v4()]);\n  }\n  /**\n   * Goes back to the endpoint page\n   */\n  goToEndpoints() {\n    this.router.navigateByUrl('/endpoint-view');\n  }\n  /**\n   * This function takes an scenario object and return its path as a string\n   * @param scenario The scenario to be converted to string\n   */\n  scenarioToString(scenario: Scenario): string {\n    if (!!scenario && !!scenario.metadata) {\n      return scenario.metadata.title;\n    }\n  }\n  /**\n   * This function takes a list of scenarios and updates it to the new list of filtered scenarios\n   * @param newScenarios The list of scenarios\n   */\n  setFilteredList(newScenarios: Scenario[]) {\n    if (newScenarios) {\n      this.filteredList = newScenarios;\n    }\n    this.errorMessage = 'No Result(s) Found';\n  }\n\n  /**\n   * Clones a scenario, and adds the -copy suffix to the name. If a scenario already exists with that suffix (and has the same name),\n   * then a monotonically increasing integer will be appended such that it does not conflict with any existing scenario names.\n   */\n  cloneScenario(scenario: Scenario) {\n    this.logger.debug(scenario);\n    const observable = this.mockDefinitionService\n      .cloneScenario(this.store.state.mockDefinition.metadata.title, scenario)\n      .pipe(map(value => value));\n\n    observable.subscribe(result => {\n      if (result) {\n        this.logger.log('Scenario successfully cloned');\n      }\n    });\n  }\n\n  /**\n   * Gets the scenario response's status string\n   */\n  getScenarioResponseStatusString(scenario: Scenario) {\n    try {\n      return HttpStatus.getStatusText(scenario.response.status);\n    } catch (Error) {\n      this.logger.warn(\n        `Returning unknown for scenario status as the status is invalid:\n          ${scenario.response.status}`\n      );\n      return 'Unknown';\n    }\n  }\n\n  /**\n   * This method opens the dialog box when called\n   */\n  confirmDeleteDialog(scenario: Scenario) {\n    this.triggerOpen = scenario.id;\n  }\n\n  /**\n   * This method delete the scenario in the store when the user clicks on the confirm box and does nothing if the user cancels\n   * the scenario deletion\n   * @param confirmed boolean is true when the user clicks on confirm scenario deletion\n   */\n  onDialogAction(confirmed: boolean, scenario: Scenario) {\n    if (confirmed) {\n      this.deleteScenario(scenario);\n      this.logger.debug(`Scenario ${scenario.metadata.title} deleted successfully`);\n    }\n\n    this.triggerOpen = null;\n    this.logger.debug(`Scenario ${scenario.metadata.title} deletion aborted`);\n  }\n\n  /**\n   * This method updates the store with the current scenario filtered out\n   */\n  deleteScenario(scenario: Scenario) {\n    this.store.deleteScenario(scenario.id);\n  }\n\n  showDialog(scenario: Scenario) {\n    return this.triggerOpen === scenario.id;\n  }\n\n  /**\n   * This method sets the body text with the deletion prompt\n   */\n  getBodyText(scenario: Scenario): string {\n    return `Are you sure you want to delete '${scenario.metadata.title.bold()}' ?`;\n  }\n\n  /**\n   * Sets the default scenario to the provided scenario\n   * @param scenario The scenario to make default\n   */\n  toggleDefaultScenario(event: MatCheckboxChange, scenario: Scenario) {\n    this.scenarioList.forEach(aScenario => aScenario.defaultScenario = false);\n    if (event.checked) {\n      scenario.defaultScenario = true;\n      this.logger.debug('Set default scenario to ', scenario);\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".container.scenarioview {\n  width: 95vw !important;\n  min-height: 85vh !important;\n  margin-top: 2vh;\n  -webkit-box-shadow: 0px 1px 12px 3px rgba(153, 148, 153, 1);\n  -moz-box-shadow: 0px 1px 12px 3px rgba(153, 148, 153, 1);\n  box-shadow: 0px 1px 12px 3px rgba(153, 148, 153, 1);\n}\n\n.scenario {\n  width: 100% !important;\n}\n\napp-overview-header {\n  width: 100%;\n  height: 19%;\n  display: flex;\n  flex-direction: column;\n}\n\ndiv#scenario-list {\n  max-width: 96%;\n  display: flex;\n  flex-direction: column;\n  margin-left: 2%;\n}\n\ndiv.scenarios {\n  width: 100%;\n  overflow-y: hidden;\n}\n\np#description {\n  font-size: 1.4em;\n  color: rgba(0, 0, 0, 0.541327);\n  font-family: Roboto;\n  padding: 0 2em 0.5em 2em;\n}\n\nbutton#add {\n  font-size: 1.6em;\n  font-weight: 300;\n  float: right;\n  margin-right: 10%;\n  margin-top: 1%;\n}\n\nbutton#back-to-endpoints {\n  margin-left: 10%;\n  margin-top: 1em;\n}\n\n.title mat-chip-list {\n  margin-right: 1em;\n}\n\np#notFoundMessage {\n  font-size: 1.4em;\n  color: rgba(0, 0, 0, 0.541327);\n  font-family: Roboto;\n  padding: 0 2em 0.5em 2em;\n  display: flex;\n  justify-content: center;\n}\n\n.scenariolistcontainer {\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  overflow-y: scroll;\n  overflow-x: hidden;\n\n  mat-list-item {\n    margin-top: 0.6em;\n    width: 100%;\n    height: auto;\n  }\n\n  div#scenario-list-item {\n    width: 100%;\n  }\n}\n\n.scenario-list-item-container {\n  padding: 0em;\n  display: flex;\n  flex-direction: row;\n  width: 100%;\n\n  mat-card-content {\n    min-width: 90%;\n    max-width: 90%;\n    margin-left: 7%;\n    padding: 1.7%;\n  }\n\n  mat-card-title {\n    font-size: 1.2em;\n    display: flex;\n    justify-content: space-between;\n    align-content: center;\n    margin-bottom: 0;\n  }\n\n  .scenario-options-menu {\n    position: relative;\n    bottom: 0.6em;\n  }\n\n  .verb {\n    font-weight: bold;\n    text-align: center;\n    vertical-align: 50%;\n    font-size: 0.75em;\n  }\n\n  .post {\n    min-width: 10%;\n    max-width: 10%;\n  }\n\n  .get {\n    min-width: 10%;\n    max-width: 10%;\n  }\n\n  .delete {\n    min-width: 10%;\n    max-width: 10%;\n  }\n\n  .subtitle {\n    display: flex;\n    flex-direction: row;\n    justify-content: space-between;\n    min-width: 80%;\n    max-width: 80%;\n  }\n}\n\n.overlay {\n  position: fixed;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 100vw;\n  height: 100vh;\n  top: 0;\n  left: 0;\n  z-index: 1;\n  background-color: rgba(0, 0, 0, 0.5);\n}\n",
                    "styleUrl": "./scenario-view.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "DesignerStore",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "logger",
                        "type": "NGXLogger",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "mockDefinitionService",
                        "type": "MockDefinitionService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 34,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "DesignerStore",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "logger",
                        "type": "NGXLogger",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "mockDefinitionService",
                        "type": "MockDefinitionService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<div class=\"fullscreen column center-hr\">\n  <div class=\"container scenarioview\">\n    <div class=\"row\">\n      <div class=\"sidebar\">\n        <app-side-bar></app-side-bar>\n      </div>\n      <div class=\"scenarios\">\n        <div>\n          <app-overview-header [header]=\"headerContent\"></app-overview-header>\n        </div>\n        <div>\n          <app-search-bar\n            [list]=\"scenarioList\"\n            (filteredList)=\"setFilteredList($event)\"\n            [itemToStringFn]=\"scenarioToString\"\n          >\n          </app-search-bar>\n          <p id=\"notFoundMessage\" *ngIf=\"this.filteredList.length === 0\">\n            {{ this.errorMessage }}\n          </p>\n          <div id=\"scenario-list\">\n            <mat-list class=\"scenariolistcontainer\">\n              <mat-list-item *ngFor=\"let scenario of filteredList\">\n                <div id=\"scenario-list-item\">\n                  <mat-card *ngIf=\"!!scenario\" class=\"scenario-list-item-container min-card-height\">\n                    <mat-card-content\n                      [routerLink]=\"this.isHoveringOverMenu ? null : ['/scenario-editor', scenario.id]\"\n                      routerLinkActive=\"is-active\"\n                    >\n                      <mat-card-title>\n                        <div>{{ scenario?.metadata.title }}</div>\n                        <div class=\"scenario-options-menu\">\n                          <button\n                            mat-icon-button\n                            [mat-menu-trigger-for]=\"menu\"\n                            aria-label=\"Example icon-button with a menu\"\n                            (mouseout)=\"this.isHoveringOverMenu = false\"\n                            (mouseover)=\"this.isHoveringOverMenu = true\"\n                          >\n                            <mat-icon>more_horiz</mat-icon>\n                          </button>\n                          <mat-menu #menu=\"matMenu\" xPosition=\"before\">\n                            <button mat-menu-item (click)=\"cloneScenario(scenario)\">\n                              <mat-icon>file_copy</mat-icon>\n                              <span>Clone</span>\n                            </button>\n                            <button mat-menu-item (click)=\"confirmDeleteDialog(scenario)\">\n                              <mat-icon>delete</mat-icon>\n                              <span>Delete</span>\n                            </button>\n                          </mat-menu>\n                        </div>\n                      </mat-card-title>\n\n                      <mat-card-subtitle>\n                        <div class=\"subtitle\">\n                          <div>{{ scenario?.metadata.description }}</div>\n                          <div>\n                            <div *ngIf=\"scenario.requestMatchRules.urlRules.length > 0\">\n                              URL Rules: {{ scenario.requestMatchRules.urlRules.length }}\n                            </div>\n                            <div *ngIf=\"scenario.requestMatchRules.headerRules.length > 0\">\n                              Header Rules: {{ scenario.requestMatchRules.headerRules.length }}\n                            </div>\n                            <div *ngIf=\"scenario.requestMatchRules.queryRules.length > 0\">\n                              Query Rules: {{ scenario.requestMatchRules.queryRules.length }}\n                            </div>\n                            <div *ngIf=\"scenario.requestMatchRules.bodyRules.length > 0\">\n                              Body Rules: {{ scenario.requestMatchRules.bodyRules.length }}\n                            </div>\n                            <div *ngIf=\"scenario.policies.length > 0\">Policies: {{ scenario.policies.length }}</div>\n                          </div>\n                          <div>\n                            {{ scenario?.response.status }} |\n                            {{ getScenarioResponseStatusString(scenario) }}\n                          </div>\n                        </div>\n                      </mat-card-subtitle>\n                      <mat-checkbox\n                      (mouseout)=\"this.isHoveringOverMenu = false\"\n                      (mouseover)=\"this.isHoveringOverMenu = true\"\n                      (change)=\"toggleDefaultScenario($event, scenario)\"\n                      [checked]=\"scenario.defaultScenario\">Default Scenario</mat-checkbox>\n                    </mat-card-content>\n                  </mat-card>\n\n                  <div class=\"overlay\" *ngIf=\"showDialog(scenario)\">\n                    <div class=\"confirm-scenario-delete-dialog\">\n                      <mat-card>\n                        <app-dialog-box\n                          titleText=\"Confirm Scenario Deletion\"\n                          confirmButtonText=\"DELETE\"\n                          cancelButtonText=\"CANCEL\"\n                          [bodyText]=\"getBodyText(scenario)\"\n                          (choiceBoolean)=\"onDialogAction($event, scenario)\"\n                        ></app-dialog-box>\n                      </mat-card>\n                    </div>\n                  </div>\n                </div>\n              </mat-list-item>\n            </mat-list>\n          </div>\n          <button (click)=\"addScenario()\" id=\"add\" mat-fab color=\"primary\">\n            +\n          </button>\n        </div>\n        <button id=\"back-to-endpoints\" mat-raised-button color=\"primary\" (click)=\"goToEndpoints()\">\n          Back to Endpoints\n        </button>\n      </div>\n    </div>\n  </div>\n</div>\n\n<ng-template #headerContent let-path=\"path\">\n  <div class=\"title row center\">\n    <mat-chip-list\n      ><mat-chip [style.background-color]=\"this.endpointVerb | getVerbColor\">{{\n        this.endpointVerb | getVerbString\n      }}</mat-chip>\n    </mat-chip-list>\n    <h3>\n      {{ this.endpointPath }}\n    </h3>\n  </div>\n</ng-template>\n"
        },
        {
            "name": "SearchBarComponent",
            "id": "component-SearchBarComponent-89e721b2803a3ba4796deea1dbaf76ba",
            "file": "src/app/components/orbital-common/search-bar/search-bar.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-search-bar",
            "styleUrls": [
                "./search-bar.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./search-bar.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "itemToStringFn",
                    "defaultValue": "x => x as string",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "function"
                },
                {
                    "name": "list",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "any[]"
                }
            ],
            "outputsClass": [
                {
                    "name": "filteredList",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "EventEmitter<any[]>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "input",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatInput",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "MatInput, {static: false}"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ignoreCaseContainsMatch",
                    "args": [
                        {
                            "name": "target",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "substring",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nReturns true if the target parameter contains the substring parameter. It sets\nboth of them to lowercase before performing the compares in order to ignore case.\n",
                    "description": "<p>Returns true if the target parameter contains the substring parameter. It sets\nboth of them to lowercase before performing the compares in order to ignore case.</p>\n",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "target",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "substring",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSearchInput",
                    "args": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nFunction that takes a string and a list as input and filters out the matlist\nbased on the input text\n",
                    "description": "<p>Function that takes a string and a list as input and filters out the matlist\nbased on the input text</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 790,
                                "end": 795,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "value"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 784,
                                "end": 789,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>The string to be searched</p>\n"
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  OnInit,\n  Input,\n  Output,\n  EventEmitter,\n  SimpleChanges,\n  ViewChild,\n  OnChanges\n} from '@angular/core';\nimport { MatInput } from '@angular/material/input';\n\n@Component({\n  selector: 'app-search-bar',\n  templateUrl: './search-bar.component.html',\n  styleUrls: ['./search-bar.component.scss']\n})\nexport class SearchBarComponent implements OnInit, OnChanges {\n  @Output() filteredList: EventEmitter<any[]>;\n  @ViewChild(MatInput, { static: false }) input: MatInput;\n  @Input() list: any[] = [];\n  @Input() itemToStringFn: (_: any) => string = x => x as string;\n  constructor() {\n    this.filteredList = new EventEmitter<any[]>();\n  }\n\n  /**\n   * Function that takes a string and a list as input and filters out the matlist\n   * based on the input text\n   * @param value The string to be searched\n   */\n\n  onSearchInput(value: string) {\n    this.filteredList.emit(\n      this.list.filter(option =>\n        SearchBarComponent.ignoreCaseContainsMatch(\n          this.itemToStringFn(option),\n          value\n        )\n      )\n    );\n  }\n\n  /**\n   * Returns true if the target parameter contains the substring parameter. It sets\n   * both of them to lowercase before performing the compares in order to ignore case.\n   */\n  // tslint:disable-next-line: member-ordering\n  static ignoreCaseContainsMatch(target: string, substring: string): boolean {\n    return target.toLowerCase().includes(substring.toLowerCase());\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (!!changes.list) {\n      if (!!this.input) {\n        this.input.value = '';\n      }\n      this.onSearchInput('');\n    }\n  }\n  ngOnInit() {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".container {\n  display: flex;\n  flex-direction: column;\n  padding: 1em 2em;\n\n  .search-bar-div {\n    display: flex;\n    flex-direction: row;\n    box-shadow: 0px 2px 2px rgba(0, 0, 0, 0.24), 0px 0px 2px rgba(0, 0, 0, 0.12);\n    background-color: rgb(255, 255, 255);\n    padding: 0.3em;\n    input {\n      flex-grow: 1;\n    }\n\n    mat-icon {\n      color: rgba(0, 0, 0, 0.4);\n      padding-left: 0.5em;\n    }\n  }\n}\n",
                    "styleUrl": "./search-bar.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 22
            },
            "implements": [
                "OnInit",
                "OnChanges"
            ],
            "templateData": "<div class=\"container\">\n  <div class=\"search-bar-div\">\n    <mat-icon>search</mat-icon>\n    <input (keyup)=\"onSearchInput($event.target.value)\" matInput />\n  </div>\n</div>\n"
        },
        {
            "name": "ShuttleListComponent",
            "id": "component-ShuttleListComponent-325e9011dd99d0860bf348e0c2ac658c",
            "file": "src/app/components/orbital-common/shuttle-list/shuttle-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-shuttle-list",
            "styleUrls": [
                "./shuttle-list.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./shuttle-list.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "emptyListMessage",
                    "defaultValue": "'List is empty'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "string"
                },
                {
                    "name": "itemToStringFn",
                    "defaultValue": "x => x as unknown as string",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 38,
                    "type": "function"
                },
                {
                    "name": "leftTitle",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "string"
                },
                {
                    "name": "list",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "[]"
                },
                {
                    "name": "noSearchResultsMessage",
                    "defaultValue": "'No search results found'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30,
                    "type": "string"
                },
                {
                    "name": "rightTitle",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "string"
                }
            ],
            "outputsClass": [
                {
                    "name": "outputList",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "EventEmitter<MockDefinition[]>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "leftList",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MockDefinition[]",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "leftSelected",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MockDefinition[]",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "rightList",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MockDefinition[]",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "rightSelected",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MockDefinition[]",
                    "optional": false,
                    "description": "",
                    "line": 36
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ncompletes event emitter\n",
                    "description": "<p>completes event emitter</p>\n"
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 91,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onMoveLeft",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 82,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nResponsible for moving the selected list items form the right list to the left list\n",
                    "description": "<p>Responsible for moving the selected list items form the right list to the left list</p>\n"
                },
                {
                    "name": "onMoveRight",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 70,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nResponsible for moving the selected list items from the left list to the right list.\n",
                    "description": "<p>Responsible for moving the selected list items from the left list to the right list.</p>\n"
                },
                {
                    "name": "onSelectLeft",
                    "args": [
                        {
                            "name": "items",
                            "type": "MockDefinition[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSets the leftSelected list to the items passed into it\n",
                    "description": "<p>Sets the leftSelected list to the items passed into it</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1251,
                                "end": 1256,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "items"
                            },
                            "type": "MockDefinition[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1245,
                                "end": 1250,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>The list of items to set as selected from the left list</p>\n"
                        }
                    ]
                },
                {
                    "name": "onSelectRight",
                    "args": [
                        {
                            "name": "items",
                            "type": "MockDefinition[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSets the rightSelected list to the items passed into it\n",
                    "description": "<p>Sets the rightSelected list to the items passed into it</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1487,
                                "end": 1492,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "items"
                            },
                            "type": "MockDefinition[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1481,
                                "end": 1486,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>The list of items to set as selected from the right list</p>\n"
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  OnInit,\n  Input,\n  Output,\n  EventEmitter,\n  OnDestroy\n} from '@angular/core';\nimport { MockDefinition } from 'src/app/models/mock-definition/mock-definition.model';\n\n@Component({\n  selector: 'app-shuttle-list',\n  templateUrl: './shuttle-list.component.html',\n  styleUrls: ['./shuttle-list.component.scss']\n})\nexport class ShuttleListComponent implements OnInit, OnDestroy {\n  @Input() leftTitle = '';\n  @Input() rightTitle = '';\n\n  @Output() outputList: EventEmitter<MockDefinition[]>;\n\n  @Input() set list(list: MockDefinition[]) {\n    if (!!list) {\n      this.leftList = list;\n      this.rightList = [];\n    }\n  }\n\n  @Input() emptyListMessage = 'List is empty';\n  @Input() noSearchResultsMessage = 'No search results found';\n\n  leftList: MockDefinition[] = [];\n  rightList: MockDefinition[] = [];\n\n  leftSelected: MockDefinition[] = [];\n  rightSelected: MockDefinition[] = [];\n\n  @Input() itemToStringFn: (_: MockDefinition) => string = x => x as unknown as string;\n\n  constructor() {\n    this.outputList = new EventEmitter<MockDefinition[]>();\n  }\n\n  /**\n   * completes event emitter\n   */\n  ngOnDestroy() {\n    this.outputList.complete();\n  }\n\n  /**\n   * Sets the leftSelected list to the items passed into it\n   * @param items The list of items to set as selected from the left list\n   */\n  onSelectLeft(items: MockDefinition[]): void {\n    this.leftSelected = [...items];\n  }\n\n  /**\n   * Sets the rightSelected list to the items passed into it\n   * @param items The list of items to set as selected from the right list\n   */\n  onSelectRight(items: MockDefinition[]): void {\n    this.rightSelected = [...items];\n  }\n\n  /**\n   * Responsible for moving the selected list items from the left list to the right list.\n   */\n  onMoveRight(): void {\n    this.rightList = [...this.rightList, ...this.leftSelected];\n    this.leftList = this.leftList.filter(\n      item => !this.leftSelected.includes(item)\n    );\n    this.leftSelected = [];\n    this.outputList.emit(this.rightList);\n  }\n\n  /**\n   * Responsible for moving the selected list items form the right list to the left list\n   */\n  onMoveLeft(): void {\n    this.leftList = [...this.leftList, ...this.rightSelected];\n    this.rightList = this.rightList.filter(\n      item => !this.rightSelected.includes(item)\n    );\n    this.rightSelected = [];\n    this.outputList.emit(this.rightList);\n  }\n\n  ngOnInit() {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".container {\n  display: flex;\n  flex-direction: row;\n\n  .selectionList {\n    flex-grow: 1;\n    display: flex;\n    flex-direction: column;\n\n    .list-label {\n      align-self: center;\n      margin-bottom: 1em;\n      color: rgba(0, 0, 0, 0.539261);\n      font-size: 0.9em;\n      font-weight: 500;\n    }\n\n    .list-card {\n      flex-grow: 1;\n      box-shadow: 0px 19px 38px rgba(0, 0, 0, 0.3), 0px 15px 12px rgba(0, 0, 0, 0.22);\n      border-radius: 0.1em;\n    }\n  }\n\n  .button-div {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    margin: 0 1em;\n\n    button {\n      margin: 1em 0;\n    }\n  }\n}\n",
                    "styleUrl": "./shuttle-list.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 38
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "accessors": {
                "list": {
                    "name": "list",
                    "setSignature": {
                        "name": "list",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "list",
                                "type": "MockDefinition[]",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 22,
                        "jsdoctags": [
                            {
                                "name": "list",
                                "type": "MockDefinition[]",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            },
            "templateData": "<div class=\"container\">\n  <div class=\"selectionList\">\n    <label class=\"list-label\">{{ leftTitle }}</label>\n    <mat-card class=\"list-card\">\n      <app-shuttle-sub-list\n        class=\"list\"\n        [list]=\"leftList\"\n        [emptyListMessage]=\"emptyListMessage\"\n        [noSearchResultsMessage]=\"noSearchResultsMessage\"\n        (itemSelected)=\"onSelectLeft($event)\"\n      ></app-shuttle-sub-list>\n    </mat-card>\n  </div>\n  <div class=\"button-div\">\n    <button mat-raised-button color=\"primary\" (click)=\"onMoveRight()\">></button>\n    <button mat-raised-button color=\"primary\" (click)=\"onMoveLeft()\"><</button>\n  </div>\n  <div class=\"selectionList\">\n    <label class=\"list-label\">{{ rightTitle }}</label>\n    <mat-card class=\"list-card\">\n      <app-shuttle-sub-list\n        class=\"list\"\n        [list]=\"rightList\"\n        [emptyListMessage]=\"emptyListMessage\"\n        [noSearchResultsMessage]=\"noSearchResultsMessage\"\n        (itemSelected)=\"onSelectRight($event)\"\n      ></app-shuttle-sub-list\n    ></mat-card>\n  </div>\n</div>\n"
        },
        {
            "name": "ShuttleSubListComponent",
            "id": "component-ShuttleSubListComponent-ee4e2cae7484111917db4a29d8a626c8",
            "file": "src/app/components/orbital-common/shuttle-list/shuttle-sub-list/shuttle-sub-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-shuttle-sub-list",
            "styleUrls": [
                "./shuttle-sub-list.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./shuttle-sub-list.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "emptyListMessage",
                    "defaultValue": "'List is empty'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "string"
                },
                {
                    "name": "list",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "FormControl[]"
                },
                {
                    "name": "noSearchResultsMessage",
                    "defaultValue": "'No search results found'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "string"
                }
            ],
            "outputsClass": [
                {
                    "name": "itemSelected",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "EventEmitter<MockDefinition[]>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "deselectAllString",
                    "defaultValue": "'Deselect All'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        124,
                        143
                    ]
                },
                {
                    "name": "filteredOutOptions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatListOption[]",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "matList",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatSelectionList",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'matList', {static: false}"
                        }
                    ]
                },
                {
                    "name": "selectAllString",
                    "defaultValue": "'Select All'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        124,
                        143
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "emitSearchResultsSelected",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 133,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nEmits the selected items in the search results that are visible to the user\n",
                    "description": "<p>Emits the selected items in the search results that are visible to the user</p>\n",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "hideOption",
                    "args": [
                        {
                            "name": "item",
                            "type": "MockDefinition",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 87,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nReturns true if the item should be hidden from view (filtered),\nfalse otherwise\n",
                    "description": "<p>Returns true if the item should be hidden from view (filtered),\nfalse otherwise</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2846,
                                "end": 2850,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "item"
                            },
                            "type": "MockDefinition",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2840,
                                "end": 2845,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>The item being checked against</p>\n"
                        }
                    ]
                },
                {
                    "name": "ignoreCaseContainsMatch",
                    "args": [
                        {
                            "name": "target",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "substring",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 125,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nReturns true if the target parameter contains the substring parameter. It sets\nboth of them to lowercase before performing the compares in order to ignore case.\n",
                    "description": "<p>Returns true if the target parameter contains the substring parameter. It sets\nboth of them to lowercase before performing the compares in order to ignore case.</p>\n",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "target",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "substring",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 128,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSearchInput",
                    "args": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 98,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nfunction run that updates the filteredOptions property based on the inputs value\n",
                    "description": "<p>function run that updates the filteredOptions property based on the inputs value</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 3191,
                                "end": 3196,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "value"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 3185,
                                "end": 3190,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>The string value from the input</p>\n"
                        }
                    ]
                },
                {
                    "name": "onSelectAll",
                    "args": [
                        {
                            "name": "event",
                            "type": "MatCheckboxChange",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nA function that selects or deselects all options depending on wether the checkbox is\nbeing selected or deselected.\n",
                    "description": "<p>A function that selects or deselects all options depending on wether the checkbox is\nbeing selected or deselected.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2153,
                                "end": 2158,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "event"
                            },
                            "type": "MatCheckboxChange",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2147,
                                "end": 2152,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>The checkbox change event emitted by the select/deselect all checkbox</p>\n"
                        }
                    ]
                },
                {
                    "name": "optionSelected",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 78,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOutputs the selected items through the itemSelected emitter\n",
                    "description": "<p>Outputs the selected items through the itemSelected emitter</p>\n"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, OnInit, Output, ViewChild } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { MatCheckboxChange } from '@angular/material/checkbox';\nimport { MatListOption, MatSelectionList } from '@angular/material/list';\nimport { MockDefinition } from 'src/app/models/mock-definition/mock-definition.model';\n\n@Component({\n  selector: 'app-shuttle-sub-list',\n  templateUrl: './shuttle-sub-list.component.html',\n  styleUrls: ['./shuttle-sub-list.component.scss']\n})\nexport class ShuttleSubListComponent implements OnInit {\n  static readonly selectAllString = 'Select All';\n  static readonly deselectAllString = 'Deselect All';\n\n  filteredOutOptions: MatListOption[] = [];\n\n  @ViewChild('matList', { static: false }) matList: MatSelectionList;\n\n  @Output() itemSelected: EventEmitter<MockDefinition[]>;\n\n  @Input() list: FormControl[] = [];\n  @Input() emptyListMessage = 'List is empty';\n  @Input() noSearchResultsMessage = 'No search results found';\n\n  constructor() {\n    this.itemSelected = new EventEmitter<MockDefinition[]>();\n  }\n\n  /**\n   * Returns the label for the check box based upon whether or not\n   * the checkbox should be selected or not. If the check box should be selected then\n   * it returns the deselectAllString, else it returns the selectAllString\n   */\n  get checkboxLabel() {\n    return this.selectAllChecked\n      ? ShuttleSubListComponent.deselectAllString\n      : ShuttleSubListComponent.selectAllString;\n  }\n\n  /**\n   * Returns true if the selection check box should be marked as checked, false otherwise\n   * This is determined by checking to see if any of the options are selected. If any\n   * of the options are selected then the checkbox should be selected because it's\n   * functionality is now to deselect the selected options.\n   */\n  get selectAllChecked() {\n    return (\n      !!this.matList &&\n      this.matList.selectedOptions.selected.filter(\n        opt => !this.hideOption(opt.value)\n      ).length > 0\n    );\n  }\n\n  /**\n   * A function that selects or deselects all options depending on wether the checkbox is\n   * being selected or deselected.\n   * @param event The checkbox change event emitted by the select/deselect all checkbox\n   */\n  onSelectAll(event: MatCheckboxChange) {\n    this.matList.options.forEach(\n      option =>\n        (option.selected = this.hideOption(option.value)\n          ? option.selected\n          : event.checked)\n    );\n    this.itemSelected.emit(\n      this.matList.selectedOptions.selected.map(option => option.value)\n    );\n\n    this.emitSearchResultsSelected();\n  }\n\n  /**\n   * Outputs the selected items through the itemSelected emitter\n   */\n  optionSelected() {\n    this.emitSearchResultsSelected();\n  }\n\n  /**\n   * Returns true if the item should be hidden from view (filtered),\n   * false otherwise\n   * @param item The item being checked against\n   */\n  hideOption(item: MockDefinition): boolean {\n    if (this.filteredOutOptions.length > 0) {\n      return !!this.filteredOutOptions.find(option => option.value === item);\n    }\n    return false;\n  }\n\n  /**\n   * function run that updates the filteredOptions property based on the inputs value\n   * @param value The string value from the input\n   */\n  onSearchInput(value: string) {\n    this.filteredOutOptions = this.matList.options.filter(\n      option =>\n        !ShuttleSubListComponent.ignoreCaseContainsMatch(\n          (option.value.value as MockDefinition).metadata.title,\n          value\n        )\n    );\n    this.emitSearchResultsSelected();\n  }\n\n  get isEmpty() {\n    return this.list.length === 0;\n  }\n\n  get noSearchResults() {\n    return (\n      this.list.length > 0 &&\n      this.list.length === this.filteredOutOptions.length\n    );\n  }\n\n  /**\n   * Returns true if the target parameter contains the substring parameter. It sets\n   * both of them to lowercase before performing the compares in order to ignore case.\n   */\n  // tslint:disable-next-line: member-ordering\n  static ignoreCaseContainsMatch(target: string, substring: string): boolean {\n    return target.toLowerCase().includes(substring.toLowerCase());\n  }\n  ngOnInit() {}\n\n  /**\n   * Emits the selected items in the search results that are visible to the user\n   */\n  private emitSearchResultsSelected() {\n    this.itemSelected.emit(this.matList.selectedOptions.selected\n    .filter(e => !this.filteredOutOptions.includes(e))\n    .filter(option => option.selected)\n    .map(option => option.value));\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".container {\n  display: flex;\n  flex-direction: column;\n  padding: 1em 2em;\n\n  .search-bar-div {\n    display: flex;\n    flex-direction: row;\n    box-shadow: 0px 2px 2px rgba(0, 0, 0, 0.24), 0px 0px 2px rgba(0, 0, 0, 0.12);\n    padding: 0.3em;\n    input {\n      flex-grow: 1;\n    }\n\n    mat-icon {\n      color: rgba(0, 0, 0, 0.4);\n    }\n  }\n\n  .checkbox-div {\n    padding-top: 1em;\n  }\n\n  mat-divider {\n    position: static;\n    margin-top: 0.3em;\n  }\n\n  .matList {\n    flex: 1;\n    overflow-y: scroll;\n    outline-width: 0;\n    padding-top: 0;\n\n    .emptyMessage {\n      font-size: 0.9em;\n      color: rgba(0, 0, 0, 0.6);\n      span {\n        margin: auto;\n      }\n    }\n\n    mat-list-option {\n      height: auto !important;\n\n      &.filtered {\n        display: none;\n      }\n    }\n  }\n}\n\nmat-selection-list::-webkit-scrollbar {\n  width: 5px;\n}\n\nmat-selection-list::-webkit-scrollbar-thumb {\n  background: rgba(0, 0, 0, 0.26);\n}\n\n.list-item {\n  width: 100%;\n  margin: 1em 0 !important;\n  h5 {\n    font-weight: 400;\n    font-size: 1.2em;\n    margin: 0;\n  }\n}\n",
                    "styleUrl": "./shuttle-sub-list.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 24
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "checkboxLabel": {
                    "name": "checkboxLabel",
                    "getSignature": {
                        "name": "checkboxLabel",
                        "type": "",
                        "returnType": "",
                        "line": 35,
                        "rawdescription": "Returns the label for the check box based upon whether or not\nthe checkbox should be selected or not. If the check box should be selected then\nit returns the deselectAllString, else it returns the selectAllString",
                        "description": "<p>Returns the label for the check box based upon whether or not\nthe checkbox should be selected or not. If the check box should be selected then\nit returns the deselectAllString, else it returns the selectAllString</p>\n"
                    }
                },
                "selectAllChecked": {
                    "name": "selectAllChecked",
                    "getSignature": {
                        "name": "selectAllChecked",
                        "type": "",
                        "returnType": "",
                        "line": 47,
                        "rawdescription": "Returns true if the selection check box should be marked as checked, false otherwise\nThis is determined by checking to see if any of the options are selected. If any\nof the options are selected then the checkbox should be selected because it's\nfunctionality is now to deselect the selected options.",
                        "description": "<p>Returns true if the selection check box should be marked as checked, false otherwise\nThis is determined by checking to see if any of the options are selected. If any\nof the options are selected then the checkbox should be selected because it&#39;s\nfunctionality is now to deselect the selected options.</p>\n"
                    }
                },
                "isEmpty": {
                    "name": "isEmpty",
                    "getSignature": {
                        "name": "isEmpty",
                        "type": "",
                        "returnType": "",
                        "line": 109
                    }
                },
                "noSearchResults": {
                    "name": "noSearchResults",
                    "getSignature": {
                        "name": "noSearchResults",
                        "type": "",
                        "returnType": "",
                        "line": 113
                    }
                }
            },
            "templateData": "<div class=\"container\">\n  <div class=\"search-bar-div\">\n    <mat-icon>search</mat-icon\n    ><input matInput (keyup)=\"onSearchInput($event.target.value)\" />\n  </div>\n  <div *ngIf=\"!!this.list.length\" class=\"checkbox-div\">\n    <mat-checkbox\n      color=\"primary\"\n      (change)=\"onSelectAll($event)\"\n      [checked]=\"selectAllChecked\"\n      [disabled]=\"noSearchResults\"\n    >\n      {{ checkboxLabel }}\n    </mat-checkbox>\n    <mat-divider></mat-divider>\n  </div>\n  <mat-selection-list\n    #matList\n    class=\"matList\"\n    (selectionChange)=\"optionSelected()\"\n  >\n    <mat-list-option\n      *ngFor=\"let item of list\"\n      [value]=\"item\"\n      [ngClass]=\"{ filtered: hideOption(item) }\"\n      color=\"primary\"\n      checkboxPosition=\"before\"\n    >\n    <div class=\"list-item\">\n      <h5>{{ item.value?.metadata?.title }}</h5>\n      <mat-divider></mat-divider>\n    </div>\n    </mat-list-option>\n    <mat-list-item class=\"emptyMessage\" *ngIf=\"isEmpty\">\n      <span>{{ emptyListMessage }}</span>\n    </mat-list-item>\n    <mat-list-item class=\"emptyMessage\" *ngIf=\"noSearchResults\">\n      <span>{{ noSearchResultsMessage }}</span>\n    </mat-list-item>\n  </mat-selection-list>\n</div>\n"
        },
        {
            "name": "SideBarComponent",
            "id": "component-SideBarComponent-baccf37902ae3bb16f2b1ff687b3db13",
            "file": "src/app/components/orbital-common/side-bar/side-bar.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-side-bar",
            "styleUrls": [
                "./side-bar.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./side-bar.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "mockDefinitions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MockDefinition[]",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "mockDefinitionToBeDismissed",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MockDefinition",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "selectedMockDefinition",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "title",
                    "defaultValue": "'MOCKDEFINITIONS'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "triggerOpenCancelBox",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "triggerOpenConfirmBox",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "urlToNavigatTo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 20
                }
            ],
            "methodsClass": [
                {
                    "name": "isSelected",
                    "args": [
                        {
                            "name": "title",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "title",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onCancelDialogAction",
                    "args": [
                        {
                            "name": "shouldCancel",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 103,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHandles the response from the cancel box\n",
                    "description": "<p>Handles the response from the cancel box</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 3284,
                                "end": 3296,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "shouldCancel"
                            },
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 3278,
                                "end": 3283,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>The button pressed for the cancel box</p>\n"
                        }
                    ]
                },
                {
                    "name": "onConfirmDialogAction",
                    "args": [
                        {
                            "name": "shouldConfirm",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHandles the response from the confirm box\n",
                    "description": "<p>Handles the response from the confirm box</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2205,
                                "end": 2218,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "shouldConfirm"
                            },
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2199,
                                "end": 2204,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>The button pressed for the cancel box</p>\n"
                        }
                    ]
                },
                {
                    "name": "onDismiss",
                    "args": [
                        {
                            "name": "mockDefinition",
                            "type": "MockDefinition",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDismisses a Mockdefinition from the side bar view and removes it from the store\nNavigates back to homepage if the last mockdefinition is dismissed\n",
                    "description": "<p>Dismisses a Mockdefinition from the side bar view and removes it from the store\nNavigates back to homepage if the last mockdefinition is dismissed</p>\n",
                    "jsdoctags": [
                        {
                            "name": "mockDefinition",
                            "type": "MockDefinition",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "openCancelDialogOrNavigateToUrl",
                    "args": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 90,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nopens dialog to dismiss current scenario to review\n\n",
                    "description": "<p>opens dialog to dismiss current scenario to review</p>\n",
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "openDialogBox",
                    "args": [
                        {
                            "name": "mockDefinition",
                            "type": "MockDefinition",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 81,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOpens the dialog box for the Mockdefinition to be dismissed\n",
                    "description": "<p>Opens the dialog box for the Mockdefinition to be dismissed</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2706,
                                "end": 2720,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "mockDefinition"
                            },
                            "type": "MockDefinition",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2700,
                                "end": 2705,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>The Mockdefinition to be dismissed</p>\n"
                        }
                    ]
                },
                {
                    "name": "updateSelected",
                    "args": [
                        {
                            "name": "mockDefinition",
                            "type": "MockDefinition",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "mockDefinition",
                            "type": "MockDefinition",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { NGXLogger } from 'ngx-logger';\nimport { MockDefinition } from 'src/app/models/mock-definition/mock-definition.model';\nimport { recordMap } from 'src/app/models/record';\nimport { DesignerStore } from 'src/app/store/designer-store';\n\n@Component({\n  selector: 'app-side-bar',\n  templateUrl: './side-bar.component.html',\n  styleUrls: ['./side-bar.component.scss']\n})\nexport class SideBarComponent implements OnInit {\n  mockDefinitions: MockDefinition[];\n  selectedMockDefinition: string;\n  title = 'MOCKDEFINITIONS';\n\n  triggerOpenConfirmBox: boolean;\n  triggerOpenCancelBox: boolean;\n  urlToNavigatTo: string;\n\n  mockDefinitionToBeDismissed: MockDefinition;\n\n  constructor(private store: DesignerStore, private router: Router, private logger: NGXLogger) {\n    this.store.state$.subscribe(state => {\n      if (!!state.mockDefinition) {\n        this.mockDefinitions = recordMap(state.mockDefinitions, md => md);\n        this.selectedMockDefinition = state.mockDefinition.metadata.title;\n      }\n    });\n  }\n\n  // Pass a string title value selected and set it to the string title.\n  isSelected(title: string): boolean {\n    if (this.selectedMockDefinition === null) {\n      return false;\n    }\n    return title === this.selectedMockDefinition;\n  }\n\n  // Updates the value of the mock definition after selecting it.\n  // this.store.mockDefinition is set and then the state updated.\n  updateSelected(mockDefinition: MockDefinition) {\n    this.store.mockDefinition = mockDefinition;\n    this.router.navigateByUrl('/endpoint-view');\n  }\n\n  /**\n   * Dismisses a Mockdefinition from the side bar view and removes it from the store\n   * Navigates back to homepage if the last mockdefinition is dismissed\n   */\n  onDismiss(mockDefinition: MockDefinition) {\n    this.store.deleteMockDefinitionByTitle(mockDefinition.metadata.title);\n    this.logger.info('Mockdefinition Dismissed', mockDefinition);\n    if (this.mockDefinitions.length <= 0) {\n      this.router.navigate(['/']);\n    } else {\n      this.router.navigateByUrl('/endpoint-view');\n    }\n  }\n\n  /**\n   * Handles the response from the confirm box\n   * @param shouldConfirm The button pressed for the cancel box\n   */\n  onConfirmDialogAction(shouldConfirm: boolean) {\n    if (shouldConfirm) {\n      this.onDismiss(this.mockDefinitionToBeDismissed);\n      this.logger.debug('The user has confirmed Mockdefinition deletion');\n    } else {\n      this.logger.debug('The user has canceled Mockdefinition deletion');\n    }\n    this.triggerOpenConfirmBox = false;\n  }\n  ngOnInit() {}\n\n  /**\n   * Opens the dialog box for the Mockdefinition to be dismissed\n   * @param mockDefinition The Mockdefinition to be dismissed\n   */\n  openDialogBox(mockDefinition: MockDefinition) {\n    this.mockDefinitionToBeDismissed = mockDefinition;\n    this.triggerOpenConfirmBox = true;\n  }\n\n  /**\n   * opens dialog to dismiss current scenario to review\n   *\n   */\n  openCancelDialogOrNavigateToUrl(url: string) {\n    if (this.router.url.includes('scenario-editor')) {\n      this.urlToNavigatTo = url;\n      this.triggerOpenCancelBox = true;\n    } else {\n      this.router.navigate([url]);\n    }\n  }\n\n  /**\n   * Handles the response from the cancel box\n   * @param shouldCancel The button pressed for the cancel box\n   */\n  onCancelDialogAction(shouldCancel: boolean) {\n    this.logger.debug('User answer for scenario-editor cancel box', shouldCancel);\n    this.triggerOpenCancelBox = false;\n    if (shouldCancel) {\n      this.logger.debug('The user has cancelled; navigating to', this.urlToNavigatTo);\n      this.router.navigate([this.urlToNavigatTo]);\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".side-bar-container {\n  min-width: 14vw;\n  min-height: 85vh;\n  background-color: white;\n  border-right: 0.1em solid rgba(0, 0, 0, 0.12);\n  overflow-y: scroll;\n  position: sticky;\n  top: 0;\n  height: 98vh;\n  .side-bar-top {\n    min-width: 14vw;\n    display: flex;\n    justify-content: center;\n    flex-direction: column;\n    margin-bottom: 0.4vh;\n    h1 {\n      opacity: 0.54;\n      font-size: 1em;\n      margin-left: 1.5em;\n      margin-top: 2vh;\n    }\n  }\n\n  .divider {\n    width: 90% !important;\n    margin: auto;\n  }\n\n  .side-bar-middle {\n    min-width: 14vw;\n    margin-bottom: 2vh;\n\n    mat-icon {\n      opacity: 0.54;\n    }\n\n    h4 {\n      font-weight: 400;\n      padding-left: 1.3em;\n    }\n\n    .selected {\n      background: #646464 !important;\n      color: white !important;\n      opacity: 1;\n\n      mat-icon {\n        opacity: 1;\n      }\n    }\n\n    .mock-name {\n      justify-content: space-between;\n\n      .mock-list-item {\n        overflow: hidden;\n        max-width: 15em;\n        cursor: pointer;\n        margin-left: 18px;\n      }\n\n      .close-button {\n        padding-bottom: 3.1em;\n        justify-content: right;\n      }\n    }\n  }\n\n  .side-bar-bottom {\n    min-width: 14vw;\n    margin-top: 1vh;\n  }\n}\n\nmat-action-list button mat-icon {\n  opacity: 0.54;\n}\n\nmat-action-list a mat-icon {\n  opacity: 0.54;\n}\n\nmat-action-list button h4 {\n  font-size: 0.9em !important;\n}\n\nmat-action-list button:hover {\n  background: #f0f0f0;\n  cursor: pointer;\n  button {\n    background: #f0f0f0;\n  }\n}\n\n.overlay {\n  position: fixed;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 100vw;\n  height: 100vh;\n  top: 0;\n  left: 0;\n  z-index: 1;\n  background-color: rgba(0, 0, 0, 0.5);\n}\n",
                    "styleUrl": "./side-bar.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "DesignerStore",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "logger",
                        "type": "NGXLogger",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 22,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "DesignerStore",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "logger",
                        "type": "NGXLogger",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"side-bar-container\" mode=\"side\" opened>\n  <div class=\"side-bar-top\">\n    <h1>{{ title }}</h1>\n  </div>\n  <mat-divider class=\"divider\"></mat-divider>\n  <div class=\"side-bar-middle\">\n    <mat-action-list *ngIf=\"!!mockDefinitions\">\n      <div\n        mat-list-item\n        class=\"mock-name row center-vt\"\n        *ngFor=\"let mockDefinition of mockDefinitions\"\n        [ngClass]=\"{ selected: isSelected(mockDefinition.metadata.title) }\"\n      >\n        <div class=\"mock-list-item row center-vt\" (click)=\"updateSelected(mockDefinition)\">\n          <mat-icon mat-list-icon>insert_drive_file_outline</mat-icon>\n          <h4 mat-line>{{ mockDefinition.metadata.title }}</h4>\n        </div>\n        <button class=\"close-button\" mat-icon-button (click)=\"openDialogBox(mockDefinition)\">\n          <mat-icon mat-list-icon>close</mat-icon>\n        </button>\n      </div>\n    </mat-action-list>\n  </div>\n  <mat-divider class=\"divider\"></mat-divider>\n  <div class=\"side-bar-bottom\">\n    <mat-action-list>\n      <button mat-list-item (click)=\"openCancelDialogOrNavigateToUrl('/create-new-mock')\">\n        <mat-icon mat-list-icon>add</mat-icon>\n        <h4 mat-line>Create New Mock</h4>\n      </button>\n      <button mat-list-item (click)=\"openCancelDialogOrNavigateToUrl('/import-from-file')\">\n        <mat-icon mat-list-icon>folder</mat-icon>\n        <h4 mat-line>Import From File</h4>\n      </button>\n      <button mat-list-item (click)=\"openCancelDialogOrNavigateToUrl('/export-to-server')\">\n        <mat-icon mat-list-icon>cloud_upload</mat-icon>\n        <h4 mat-line>Export Mock To Server</h4>\n      </button>\n      <button mat-list-item (click)=\"openCancelDialogOrNavigateToUrl('/import-from-server')\">\n        <mat-icon mat-list-icon>cloud_download</mat-icon>\n        <h4 mat-line>Import From Mock Server</h4>\n      </button>\n      <button mat-list-item (click)=\"openCancelDialogOrNavigateToUrl('/download-mockdefinitions')\">\n        <mat-icon mat-list-icon>arrow_downward</mat-icon>\n        <h4 mat-line>Download Mockdefinitions</h4>\n      </button>\n      <button mat-list-item (click)=\"openCancelDialogOrNavigateToUrl('/delete-from-server')\">\n        <mat-icon mat-list-icon>delete</mat-icon>\n        <h4 mat-line>Delete From Mock Server</h4>\n      </button>\n      <app-quick-export></app-quick-export>\n    </mat-action-list>\n  </div>\n</div>\n\n<div class=\"overlay\" *ngIf=\"triggerOpenConfirmBox\">\n  <div>\n    <mat-card>\n      <app-dialog-box\n        titleText=\"Confirm Mockdefinition Dismissal\"\n        confirmButtonText=\"Confirm\"\n        cancelButtonText=\"Cancel\"\n        bodyText=\"Are you sure you want to discard your Mockdefinition?\"\n        (choiceBoolean)=\"onConfirmDialogAction($event)\"\n      ></app-dialog-box>\n    </mat-card>\n  </div>\n</div>\n\n<div class=\"overlay\" *ngIf=\"triggerOpenCancelBox\">\n  <div>\n    <mat-card>\n      <app-dialog-box\n        titleText=\"Confirm Scenario Changes Discard\"\n        confirmButtonText=\"Confirm\"\n        cancelButtonText=\"Cancel\"\n        bodyText=\"Are you sure you want to discard your unsaved changes?\"\n        (choiceBoolean)=\"onCancelDialogAction($event)\"\n      ></app-dialog-box>\n    </mat-card>\n  </div>\n</div>\n"
        },
        {
            "name": "TextInputComponent",
            "id": "component-TextInputComponent-5729a5a7fd767073c9ee6f40587e4dfe",
            "file": "src/app/components/orbital-common/text-input/text-input.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-text-input",
            "styleUrls": [
                "./text-input.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./text-input.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "control",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "FormControl"
                },
                {
                    "name": "maxLength",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "number"
                },
                {
                    "name": "multiLine",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "boolean"
                },
                {
                    "name": "title",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "errorStateMatcher",
                    "defaultValue": "new ShowOnDirtyErrorStateMatcher()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "methodsClass": [
                {
                    "name": "getErrors",
                    "args": [],
                    "optional": false,
                    "returnType": "string[]",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setDirty",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSets the text input to dirty when it becomes out of focus. Required\nto show the error messages since the state matcher checks if the input is dirty\n",
                    "description": "<p>Sets the text input to dirty when it becomes out of focus. Required\nto show the error messages since the state matcher checks if the input is dirty</p>\n"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { ShowOnDirtyErrorStateMatcher } from '@angular/material/core';\n\n@Component({\n  selector: 'app-text-input',\n  templateUrl: './text-input.component.html',\n  styleUrls: ['./text-input.component.scss']\n})\nexport class TextInputComponent implements OnInit {\n  errorStateMatcher = new ShowOnDirtyErrorStateMatcher();\n  @Input() title = '';\n  @Input() maxLength: number;\n  @Input() multiLine = false;\n  @Input() control!: FormControl;\n  constructor() {}\n\n  getErrors(): string[] {\n    return !!this.control.errors ? Object.values(this.control.errors) : [];\n  }\n\n  ngOnInit() {}\n\n  /**\n   * Sets the text input to dirty when it becomes out of focus. Required\n   * to show the error messages since the state matcher checks if the input is dirty\n   */\n  setDirty() {\n    this.control.markAsDirty();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "mat-error {\n  white-space: pre-wrap;\n}\n\nmat-form-field {\n  width: 38.984vw;\n  max-width: 499px;\n  margin: auto;\n  display: flex;\n  flex-direction: column;\n}\n",
                    "styleUrl": "./text-input.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 15
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<mat-form-field *ngIf=\"!multiLine\">\n  <input\n    matInput\n    [placeholder]=\"title\"\n    [formControl]=\"control\"\n    (focusout)=\"setDirty()\"\n    [errorStateMatcher]=\"errorStateMatcher\"\n    autocomplete=\"off\"\n    [maxlength]=\"maxLength\"\n  />\n  <mat-error *ngFor=\"let error of getErrors()\">\n    {{ error }}\n  </mat-error>\n  <mat-hint *ngIf=\"!!maxLength\" align=\"end\"\n    >{{ control.value?.length }}/{{ maxLength }}</mat-hint\n  >\n</mat-form-field>\n<mat-form-field *ngIf=\"multiLine\">\n  <textarea\n    matInput\n    cdkTextareaAutosize\n    cdkAutosizeMinRows=\"8\"\n    [placeholder]=\"title\"\n    [formControl]=\"control\"\n    [errorStateMatcher]=\"errorStateMatcher\"\n    autocomplete=\"off\"\n    (focusout)=\"setDirty()\"\n    [maxlength]=\"maxLength\"\n  ></textarea>\n  <mat-error *ngFor=\"let error of getErrors()\">\n    {{ error }}\n  </mat-error>\n  <mat-hint *ngIf=\"!!maxLength\" align=\"end\"\n    >{{ control.value?.length }}/{{ maxLength }}</mat-hint\n  >\n</mat-form-field>\n"
        },
        {
            "name": "ToolTipComponent",
            "id": "component-ToolTipComponent-cb4b9f167d054bdfd3004b0c86e183a1",
            "file": "src/app/components/orbital-common/tool-tip/tool-tip.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-tool-tip",
            "styleUrls": [
                "./tool-tip.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./tool-tip.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "delay",
                    "defaultValue": "2000",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "number"
                },
                {
                    "name": "icon",
                    "defaultValue": "'help_outline'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "string"
                },
                {
                    "name": "matTooltipClass",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "any"
                },
                {
                    "name": "message",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input } from '@angular/core';\n\n@Component({\n  selector: 'app-tool-tip',\n  templateUrl: './tool-tip.component.html',\n  styleUrls: ['./tool-tip.component.scss']\n})\nexport class ToolTipComponent implements OnInit {\n  @Input() message!: string;\n  @Input() matTooltipClass: any = '';\n  @Input() icon = 'help_outline';\n  @Input() delay = 2000;\n\n  ngOnInit() {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "div {\n  display: flex;\n  flex-direction: row;\n\n  ::ng-deep > *:first-child {\n    flex: 1;\n  }\n\n  mat-icon {\n    margin-left: 0.5em;\n    padding-top: 1em;\n  }\n}\n",
                    "styleUrl": "./tool-tip.component.scss"
                }
            ],
            "stylesData": "",
            "implements": [
                "OnInit"
            ],
            "templateData": "<div>\n  <ng-content></ng-content>\n  <mat-icon\n    [matTooltip]=\"message\"\n    matTooltipPosition=\"after\"\n    [matTooltipHideDelay]=\"delay\"\n    [matTooltipClass]=\"matTooltipClass\"\n    >{{ icon }}</mat-icon\n  >\n</div>\n"
        },
        {
            "name": "UrlAddRuleComponent",
            "id": "component-UrlAddRuleComponent-5fe72bf9778155b6155146d8cb164b0b",
            "file": "src/app/components/scenario-editor/url-edit-rule/url-add-rule/url-add-rule.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-url-add-rule",
            "styleUrls": [
                "./url-add-rule.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./url-add-rule.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "urlRuleAddedIsDuplicated",
                    "defaultValue": "new EventEmitter<boolean>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "any"
                }
            ],
            "outputsClass": [
                {
                    "name": "urlRuleAddedEventEmitter",
                    "defaultValue": "new EventEmitter<KeyValuePairRule>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "ruleIsDuplicated",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "rules",
                    "defaultValue": "[\n    { value: RuleType.REGEX, viewValue: 'Matches Regex' },\n    { value: RuleType.ACCEPTALL, viewValue: 'Accept All' },\n    { value: RuleType.TEXTEQUALS, viewValue: 'Equals' }\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        143
                    ]
                },
                {
                    "name": "subscriptions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription[]",
                    "optional": false,
                    "description": "<p>Stores the subscriptions that will be destroyed during OnDestroy</p>\n",
                    "line": 16,
                    "rawdescription": "\n\nStores the subscriptions that will be destroyed during OnDestroy\n",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "urlAddRuleFormGroup",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "urlRuleInEdit",
                    "defaultValue": "{\n    rule: { urlPath: '' } as Record<string, string>,\n    type: RuleType.ACCEPTALL\n  } as KeyValuePairRule",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "addUrlRule",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 87,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nControls the logic for emmiting a new addUrlRule event\n",
                    "description": "<p>Controls the logic for emmiting a new addUrlRule event</p>\n"
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 96,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nImplementation for NG On Destroy\n",
                    "description": "<p>Implementation for NG On Destroy</p>\n"
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, EventEmitter, Output, OnDestroy, Input } from '@angular/core';\nimport { KeyValuePairRule } from 'src/app/models/mock-definition/scenario/key-value-pair-rule.model';\nimport { RuleType } from 'src/app/models/mock-definition/scenario/rule.type';\nimport { FormGroup, FormControl, Validators, AbstractControl } from '@angular/forms';\nimport { Subscription } from 'rxjs';\n\n@Component({\n  selector: 'app-url-add-rule',\n  templateUrl: './url-add-rule.component.html',\n  styleUrls: ['./url-add-rule.component.scss']\n})\nexport class UrlAddRuleComponent implements OnInit, OnDestroy {\n  /**\n   * Stores the subscriptions that will be destroyed during OnDestroy\n   */\n  private subscriptions: Subscription[] = [];\n  private urlRuleInEdit = {\n    rule: { urlPath: '' } as Record<string, string>,\n    type: RuleType.ACCEPTALL\n  } as KeyValuePairRule;\n  private ruleIsDuplicated = false;\n\n  @Input() urlRuleAddedIsDuplicated = new EventEmitter<boolean>();\n  @Output() urlRuleAddedEventEmitter = new EventEmitter<KeyValuePairRule>();\n\n  readonly rules = [\n    { value: RuleType.REGEX, viewValue: 'Matches Regex' },\n    { value: RuleType.ACCEPTALL, viewValue: 'Accept All' },\n    { value: RuleType.TEXTEQUALS, viewValue: 'Equals' }\n  ];\n\n  urlAddRuleFormGroup: FormGroup;\n  ngOnInit() {\n    const urlDuplicatedSubscription = this.urlRuleAddedIsDuplicated.subscribe(\n      isDuplicated => (this.ruleIsDuplicated = isDuplicated)\n    );\n    this.urlAddRuleFormGroup = new FormGroup({\n      path: new FormControl(this.urlRuleInEdit.rule['urlPath'], [Validators.required, Validators.maxLength(3000)]),\n      ruleType: new FormControl(this.urlRuleInEdit.type, [Validators.required])\n    });\n\n    const pathSubscription = this.urlAddRuleFormGroup.get('path').valueChanges.subscribe(path => {\n      this.ruleIsDuplicated = false;\n      this.urlRuleInEdit.rule['urlPath'] = path;\n    });\n\n    const ruleTypeSubscription = this.urlAddRuleFormGroup.get('ruleType').valueChanges.subscribe(type => {\n      this.ruleIsDuplicated = false;\n      this.urlRuleInEdit.type = type;\n\n      if (type === RuleType.ACCEPTALL) {\n        this.path.disable();\n        this.path.setValue('');\n      } else {\n        this.path.enable();\n      }\n    });\n\n    this.subscriptions.push(pathSubscription, ruleTypeSubscription, urlDuplicatedSubscription);\n    this.path.disable();\n  }\n\n  /**\n   *\n   * Gets the boolean indicating if the rule to be added is duplicated.\n   */\n  get isRuleDuplicated(): boolean {\n    return this.ruleIsDuplicated;\n  }\n  /**\n   * Gets the form control for the 'path'\n   */\n  get path(): AbstractControl {\n    return this.urlAddRuleFormGroup.get('path');\n  }\n\n  /**\n   * Gets the form control for the 'ruleType'\n   */\n  get ruleType(): AbstractControl {\n    return this.urlAddRuleFormGroup.get('ruleType');\n  }\n\n  /**\n   * Controls the logic for emmiting a new addUrlRule event\n   */\n  addUrlRule(): void {\n    if (this.urlAddRuleFormGroup.valid) {\n      this.urlRuleAddedEventEmitter.emit(this.urlRuleInEdit);\n    }\n  }\n\n  /**\n   * Implementation for NG On Destroy\n   */\n  ngOnDestroy(): void {\n    this.subscriptions.forEach(subscription => {\n      subscription.unsubscribe();\n    });\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".kvp-add {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n\n.add-button {\n  margin-right: 1.3em;\n}\n\n.kvp-value {\n  width: 25em;\n}\n\n.kvp-key {\n  padding-left: 1.3em;\n  width: 12%;\n}\n\n.error-message {\n  padding-left: 1.6em;\n}\n\n.row {\n  align-items: center;\n  width: 100%;\n  justify-content: space-between;\n}\n",
                    "styleUrl": "./url-add-rule.component.scss"
                }
            ],
            "stylesData": "",
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "accessors": {
                "isRuleDuplicated": {
                    "name": "isRuleDuplicated",
                    "getSignature": {
                        "name": "isRuleDuplicated",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 67,
                        "rawdescription": "\nGets the boolean indicating if the rule to be added is duplicated.",
                        "description": "<p>Gets the boolean indicating if the rule to be added is duplicated.</p>\n"
                    }
                },
                "path": {
                    "name": "path",
                    "getSignature": {
                        "name": "path",
                        "type": "",
                        "returnType": "AbstractControl",
                        "line": 73,
                        "rawdescription": "Gets the form control for the 'path'",
                        "description": "<p>Gets the form control for the &#39;path&#39;</p>\n"
                    }
                },
                "ruleType": {
                    "name": "ruleType",
                    "getSignature": {
                        "name": "ruleType",
                        "type": "",
                        "returnType": "AbstractControl",
                        "line": 80,
                        "rawdescription": "Gets the form control for the 'ruleType'",
                        "description": "<p>Gets the form control for the &#39;ruleType&#39;</p>\n"
                    }
                }
            },
            "templateData": "<mat-card class=\"kvp-add-card\">\n  <mat-card-content>\n    <form class=\"kvp-add\" [formGroup]=\"urlAddRuleFormGroup\">\n      <div class=\"row\">\n        <mat-form-field class=\"kvp-value\">\n          <input matInput id=\"kvpaddpath\" formControlName=\"path\" />\n          <mat-hint> {{ path.value?.length || 0 }}/3000</mat-hint>\n        </mat-form-field>\n        <mat-form-field class=\"kvp-type\">\n          <mat-label>Select Rule</mat-label>\n          <mat-select formControlName=\"ruleType\" name=\"rules\">\n            <mat-option *ngFor=\"let r of rules\" [value]=\"r.value\">\n              {{ r.viewValue }}\n            </mat-option>\n          </mat-select>\n        </mat-form-field>\n        <button mat-mini-fab class=\"add-button\" color=\"primary\" (click)=\"addUrlRule()\">\n          <mat-icon>add</mat-icon>\n        </button>\n      </div>\n    </form>\n\n    <div *ngIf=\"path.invalid && (path.dirty || path.touched)\">\n      <mat-error *ngIf=\"path.errors.required\">\n        Url path is required\n      </mat-error>\n      <mat-error *ngIf=\"path.errors.maxlength\">\n        Url path cannot exceed 3000 characters\n      </mat-error>\n    </div>\n\n    <div *ngIf=\"ruleType.invalid && (ruleType.dirty || ruleType.touched)\">\n      <mat-error *ngIf=\"ruleType.errors.required\">\n        Url rule type is required\n      </mat-error>\n    </div>\n    <div *ngIf=\"this.isRuleDuplicated\">\n      <mat-error>\n        Rule already exists\n      </mat-error>\n    </div>\n  </mat-card-content>\n</mat-card>\n"
        },
        {
            "name": "UrlEditRuleComponent",
            "id": "component-UrlEditRuleComponent-3120a89f94f48f8046ae43e46785fde3",
            "file": "src/app/components/scenario-editor/url-edit-rule/url-edit-rule.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-url-edit-rule",
            "styleUrls": [
                "./url-edit-rule.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./url-edit-rule.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "urlMatchRuleFormArray",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "FormArray"
                }
            ],
            "outputsClass": [
                {
                    "name": "urlRuleIsDuplicated",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "EventEmitter<boolean>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "subscriptions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription[]",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "addUrlEditRuleHandler",
                    "args": [
                        {
                            "name": "kvpToAdd",
                            "type": "KeyValuePairRule",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThis method listens to the event emitter from the child component and adds the KeyValue pair into the list\n",
                    "description": "<p>This method listens to the event emitter from the child component and adds the KeyValue pair into the list</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1501,
                                "end": 1509,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "kvpToAdd"
                            },
                            "type": "KeyValuePairRule",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1495,
                                "end": 1500,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>The key-value pair to add</p>\n"
                        }
                    ]
                },
                {
                    "name": "checkForDuplicates",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 81,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n\nDouble check to confirm there are no duplicates in the list of existing url rules\n",
                    "description": "<p>Double check to confirm there are no duplicates in the list of existing url rules</p>\n",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "deleteUrlEditRuleHandler",
                    "args": [
                        {
                            "name": "indexPosition",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThis method listens to the event emitter from the child component and deletes the KeyValue pair from the list\n",
                    "description": "<p>This method listens to the event emitter from the child component and deletes the KeyValue pair from the list</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2198,
                                "end": 2211,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "indexPosition"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2192,
                                "end": 2197,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>The zero-based index position of the item to remove from the list</p>\n"
                        }
                    ]
                },
                {
                    "name": "isUrlRuleDuplicate",
                    "args": [
                        {
                            "name": "kvpToAdd",
                            "type": "KeyValuePairRule",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 62,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nchecks if the keyvaluepairrule is inside the current form array\n\n",
                    "description": "<p>checks if the keyvaluepairrule is inside the current form array</p>\n",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "kvpToAdd",
                            "type": "KeyValuePairRule",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 111,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nImplementation for NG On Destroy\n",
                    "description": "<p>Implementation for NG On Destroy</p>\n"
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, OnDestroy, Output, EventEmitter, Input } from '@angular/core';\nimport { NGXLogger } from 'ngx-logger';\nimport { KeyValuePairRule } from '../../../models/mock-definition/scenario/key-value-pair-rule.model';\nimport { recordFirstOrDefault } from '../../../models/record';\nimport { Subscription } from 'rxjs';\nimport { ScenarioFormBuilder } from '../scenario-form-builder/scenario-form.builder';\nimport { FormArray, FormGroup } from '@angular/forms';\n\n@Component({\n  selector: 'app-url-edit-rule',\n  templateUrl: './url-edit-rule.component.html',\n  styleUrls: ['./url-edit-rule.component.scss']\n})\nexport class UrlEditRuleComponent implements OnInit, OnDestroy {\n  private subscriptions: Subscription[] = [];\n\n  @Output() urlRuleIsDuplicated: EventEmitter<boolean>;\n  @Input() urlMatchRuleFormArray: FormArray;\n  constructor(private logger: NGXLogger, private formbuilder: ScenarioFormBuilder) {\n    this.urlRuleIsDuplicated = new EventEmitter<boolean>();\n    this.urlRuleIsDuplicated.emit(false);\n  }\n\n  ngOnInit(): void {\n    const urlMatchRuleFormArraySubscription = this.urlMatchRuleFormArray.valueChanges.subscribe(() => {\n      this.logger.debug('UrlEditRuleComponent checking for duplicate rules : ', this.urlMatchRuleFormArray);\n      this.checkForDuplicates();\n    });\n    this.subscriptions.push(urlMatchRuleFormArraySubscription);\n  }\n\n  /**\n   * This method listens to the event emitter from the child component and adds the KeyValue pair into the list\n   * @param kvpToAdd The key-value pair to add\n   */\n  addUrlEditRuleHandler(kvpToAdd: KeyValuePairRule) {\n    const ruleFound = this.isUrlRuleDuplicate(kvpToAdd);\n    if (!ruleFound) {\n      this.urlRuleIsDuplicated.emit(false);\n      const index = this.urlMatchRuleFormArray.length;\n      const newUrlRuleControl = this.formbuilder.getUrlItemFormGroup(kvpToAdd);\n      this.urlMatchRuleFormArray.insert(index, newUrlRuleControl);\n      this.logger.debug('UrlEditRuleComponent new rule added : ', kvpToAdd);\n    } else {\n      this.urlRuleIsDuplicated.emit(true);\n    }\n  }\n\n  /**\n   * This method listens to the event emitter from the child component and deletes the KeyValue pair from the list\n   * @param indexPosition The zero-based index position of the item to remove from the list\n   */\n  deleteUrlEditRuleHandler(indexPosition: number) {\n    this.urlMatchRuleFormArray.removeAt(indexPosition);\n    this.logger.debug('Delete Path Rule from url list at index: ', indexPosition);\n  }\n\n  /**\n   * checks if the keyvaluepairrule is inside the current form array\n   *\n   */\n  private isUrlRuleDuplicate(kvpToAdd: KeyValuePairRule): boolean {\n    interface UrlRuleFormGroup {\n      path: string;\n      ruleType: number;\n    }\n\n    return this.urlMatchRuleFormArray.controls\n      .map(group => {\n        return (group as FormGroup).getRawValue() as UrlRuleFormGroup;\n      })\n      .some(urlFormGroup => {\n        return urlFormGroup.path === recordFirstOrDefault(kvpToAdd.rule, '') && urlFormGroup.ruleType === kvpToAdd.type;\n      });\n  }\n\n  /**\n   *\n   * Double check to confirm there are no duplicates in the list of existing url rules\n   */\n  private checkForDuplicates(): void {\n    this.urlMatchRuleFormArray.controls.forEach(c => c.setErrors(null));\n    this.urlMatchRuleFormArray.markAsUntouched();\n    interface UrlRuleFormGroup {\n      path?: string;\n      ruleType: number;\n    }\n    const urlRules = this.urlMatchRuleFormArray.controls.map(group => {\n      return (group as FormGroup).getRawValue() as UrlRuleFormGroup;\n    });\n    urlRules.forEach((urlToCheck, indexToCheck) => {\n      urlRules.forEach((urlToCheckAgainst, indexToCheckAgainst) => {\n        const foundDuplicate =\n          urlToCheck.path === urlToCheckAgainst.path &&\n          urlToCheck.ruleType === urlToCheckAgainst.ruleType &&\n          indexToCheck !== indexToCheckAgainst;\n        if (foundDuplicate) {\n          (this.urlMatchRuleFormArray.at(indexToCheck) as FormGroup).get('path').markAsTouched();\n          (this.urlMatchRuleFormArray.at(indexToCheck) as FormGroup).get('ruleType').markAsTouched();\n          (this.urlMatchRuleFormArray.at(indexToCheckAgainst) as FormGroup).get('path').markAsTouched();\n          (this.urlMatchRuleFormArray.at(indexToCheckAgainst) as FormGroup).get('ruleType').markAsTouched();\n          (this.urlMatchRuleFormArray.at(indexToCheckAgainst) as FormGroup).setErrors({ duplicated: true });\n          (this.urlMatchRuleFormArray.at(indexToCheck) as FormGroup).setErrors({ duplicated: true });\n        }\n      });\n    });\n  }\n  /**\n   * Implementation for NG On Destroy\n   */\n  ngOnDestroy(): void {\n    this.subscriptions.forEach(subscription => {\n      subscription.unsubscribe();\n    });\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "mat-expansion-panel {\n  box-shadow: none !important;\n  border: 0 !important;\n}\n\np.description {\n  font-family: Roboto;\n  font-style: normal;\n  font-weight: normal;\n  font-size: 1em;\n  color: rgba(0, 0, 0, 0.539261);\n}\n\n.divider-padding {\n  margin-top: 1em;\n}\n\n.kvp-edit-rule {\n  display: flex;\n  flex-direction: column;\n}\n\n.add-rule {\n  padding-bottom: 1em;\n}\n",
                    "styleUrl": "./url-edit-rule.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "logger",
                        "type": "NGXLogger",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "formbuilder",
                        "type": "ScenarioFormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 18,
                "jsdoctags": [
                    {
                        "name": "logger",
                        "type": "NGXLogger",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "formbuilder",
                        "type": "ScenarioFormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<p class=\"description\">Add New Url Match Rule</p>\n\n<div class=\"kvp-edit-rule\">\n  <mat-divider class=\"divider-padding\"></mat-divider>\n  <app-url-add-rule\n    class=\"add-rule\"\n    (urlRuleAddedEventEmitter)=\"addUrlEditRuleHandler($event)\"\n    [urlRuleAddedIsDuplicated]=\"this.urlRuleIsDuplicated\"\n  ></app-url-add-rule>\n</div>\n\n<ng-template [ngIf]=\"this.urlMatchRuleFormArray.controls.length\" [ngIfElse]=\"noRulesAdded\">\n  <div *ngFor=\"let urlruleform of urlMatchRuleFormArray.controls; let i = index\">\n    <app-url-list-item-rule-type\n      [urlEditRuleFormGroup]=\"urlruleform\"\n      (urlRuleRemovedEventEmitter)=\"deleteUrlEditRuleHandler(i)\"\n      ruleIsDuplicatedIndex=\"this.existingUrlRuleAtIndecIsDuplicated\"\n    ></app-url-list-item-rule-type>\n  </div>\n</ng-template>\n\n<ng-template #noRulesAdded>\n  No rules Added URL Rule\n</ng-template>\n"
        },
        {
            "name": "UrlListItemRuleTypeComponent",
            "id": "component-UrlListItemRuleTypeComponent-fef843459b72d5a34bb70123a4d20e65",
            "file": "src/app/components/scenario-editor/url-edit-rule/url-list-item-rule-type/url-list-item-rule-type.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-url-list-item-rule-type",
            "styleUrls": [
                "./url-list-item-rule-type.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./url-list-item-rule-type.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "urlEditRuleFormGroup",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "FormGroup"
                }
            ],
            "outputsClass": [
                {
                    "name": "urlRuleRemovedEventEmitter",
                    "defaultValue": "new EventEmitter<KeyValuePairRule>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe kvp to be deleted by the parent\n",
                    "description": "<p>The kvp to be deleted by the parent</p>\n",
                    "line": 25,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "rules",
                    "defaultValue": "[\n    { value: RuleType.REGEX, viewValue: 'Matches Regex' },\n    { value: RuleType.TEXTEQUALS, viewValue: 'Equals' },\n    { value: RuleType.ACCEPTALL, viewValue: 'Accept All' }\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        143
                    ]
                },
                {
                    "name": "subscriptions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription[]",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 76,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nImplementation for NG On Destroy\n",
                    "description": "<p>Implementation for NG On Destroy</p>\n"
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onRemove",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nEmits a removes event with the KeyValue for the parent to remove\n",
                    "description": "<p>Emits a removes event with the KeyValue for the parent to remove</p>\n"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Output, EventEmitter, Input, OnDestroy } from '@angular/core';\nimport { RuleType } from '../../../../models/mock-definition/scenario/rule.type';\nimport { KeyValuePairRule } from '../../../../models/mock-definition/scenario/key-value-pair-rule.model';\nimport { FormGroup, AbstractControl } from '@angular/forms';\nimport { Subscription } from 'rxjs';\n\n@Component({\n  selector: 'app-url-list-item-rule-type',\n  templateUrl: './url-list-item-rule-type.component.html',\n  styleUrls: ['./url-list-item-rule-type.component.scss']\n})\nexport class UrlListItemRuleTypeComponent implements OnInit, OnDestroy {\n  private subscriptions: Subscription[] = [];\n\n  readonly rules = [\n    { value: RuleType.REGEX, viewValue: 'Matches Regex' },\n    { value: RuleType.TEXTEQUALS, viewValue: 'Equals' },\n    { value: RuleType.ACCEPTALL, viewValue: 'Accept All' }\n  ];\n\n  @Input() urlEditRuleFormGroup: FormGroup;\n  /**\n   * The kvp to be deleted by the parent\n   */\n  @Output() urlRuleRemovedEventEmitter = new EventEmitter<KeyValuePairRule>();\n\n  ngOnInit() {\n    const ruleTypeSubscription = this.urlEditRuleFormGroup.get('ruleType').valueChanges.subscribe(type => {\n      if (type === RuleType.ACCEPTALL) {\n        this.path.disable();\n        this.path.setValue('');\n        this.urlEditRuleFormGroup.markAsUntouched();\n      } else {\n        this.path.enable();\n      }\n      this.urlEditRuleFormGroup.updateValueAndValidity();\n    });\n\n    if (this.urlEditRuleFormGroup.controls.ruleType.value === RuleType.ACCEPTALL) {\n      this.path.disable();\n      this.urlEditRuleFormGroup.markAsUntouched();\n    }\n\n    this.subscriptions.push(ruleTypeSubscription);\n  }\n\n  /**\n   * Gets the form control for the 'path'\n   */\n  get path(): AbstractControl {\n    return this.urlEditRuleFormGroup.get('path');\n  }\n\n  /**\n   * Gets the value from the current url rule type\n   */\n\n  get ruleType(): AbstractControl {\n    return this.urlEditRuleFormGroup.get('ruleType');\n  }\n\n  /**\n   * Emits a removes event with the KeyValue for the parent to remove\n   */\n  onRemove() {\n    const removeRule = {\n      rule: { urlPath: this.path.value },\n      type: this.ruleType.value\n    } as KeyValuePairRule;\n    this.urlRuleRemovedEventEmitter.emit(removeRule);\n  }\n\n  /**\n   * Implementation for NG On Destroy\n   */\n  ngOnDestroy(): void {\n    this.subscriptions.forEach(subscription => {\n      subscription.unsubscribe();\n    });\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".row {\n  display: flex;\n  justify-content: space-between;\n  width: 100%;\n}\n\n.mat-card {\n  padding: 0.75em;\n  min-width: 35vw;\n  margin-bottom: 1em;\n}\n\n.kvp-value {\n  flex: 1;\n  padding-right: 3vw;\n}\n\n.delete-button {\n  background: none;\n  border: 0;\n}\n\n.delete-button-container {\n  display: flex;\n  padding-right: 1em;\n}\n\n.kvp-key {\n  width: 12%;\n  margin-left: 1.5em;\n  margin-right: 2em;\n}\n\n.rule-type {\n  margin-right: 3.25em;\n}\n\n.error-message {\n  padding-left: 1.5em;\n  padding-top: 1em;\n}\n",
                    "styleUrl": "./url-list-item-rule-type.component.scss"
                }
            ],
            "stylesData": "",
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "accessors": {
                "path": {
                    "name": "path",
                    "getSignature": {
                        "name": "path",
                        "type": "",
                        "returnType": "AbstractControl",
                        "line": 50,
                        "rawdescription": "Gets the form control for the 'path'",
                        "description": "<p>Gets the form control for the &#39;path&#39;</p>\n"
                    }
                },
                "ruleType": {
                    "name": "ruleType",
                    "getSignature": {
                        "name": "ruleType",
                        "type": "",
                        "returnType": "AbstractControl",
                        "line": 58,
                        "rawdescription": "Gets the value from the current url rule type",
                        "description": "<p>Gets the value from the current url rule type</p>\n"
                    }
                }
            },
            "templateData": "<mat-card class=\"kvp-add-card\">\n  <mat-card-content>\n    <form class=\"kvp-added-item\" [formGroup]=\"urlEditRuleFormGroup\">\n      <div class=\"row\">\n        <mat-form-field class=\"kvp-value\">\n          <input matInput formControlName=\"path\" />\n          <mat-hint> {{ path.value?.length || 0 }}/3000</mat-hint>\n        </mat-form-field>\n\n        <mat-form-field class=\"kvp-type\">\n          <mat-label>Select Rule</mat-label>\n          <mat-select formControlName=\"ruleType\" name=\"rules\">\n            <mat-option *ngFor=\"let rule of rules\" [value]=\"rule.value\">\n              {{ rule.viewValue }}\n            </mat-option>\n          </mat-select>\n        </mat-form-field>\n\n        <div class=\"delete-button-container\">\n          <button class=\"delete-button\" (click)=\"onRemove()\">\n            <mat-icon>close</mat-icon>\n          </button>\n        </div>\n      </div>\n    </form>\n\n    <div *ngIf=\"ruleType.invalid && ruleType.dirty\">\n      <mat-error *ngIf=\"ruleType.errors.required\">\n        Url rule type is required\n      </mat-error>\n    </div>\n\n    <div *ngIf=\"path.invalid && path.dirty\">\n      <mat-error *ngIf=\"path.errors.required\">\n        Url path is required\n      </mat-error>\n      <mat-error *ngIf=\"path.errors.maxlength\">\n        Url path cannot exceed 3000 characters\n      </mat-error>\n    </div>\n    <div *ngIf=\"path.touched && ruleType.touched\">\n      <mat-error>\n        Rule is duplicated\n      </mat-error>\n    </div>\n  </mat-card-content>\n</mat-card>\n"
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "id": "module-AppModule-1a0e420e4eb3997b8ecb65430db49aa7",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app.module.ts",
            "methods": [],
            "sourceCode": "import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { HttpClientModule } from '@angular/common/http';\nimport { LoggerModule, NgxLoggerLevel } from 'ngx-logger';\nimport { CommonModule } from '@angular/common';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatDividerModule } from '@angular/material/divider';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { ReactiveFormsModule } from '@angular/forms';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { OrbitalCommonModule } from './components/orbital-common/orbital-common.module';\nimport { GetEndpointScenariosPipe } from './pipes/get-endpoint-scenarios/get-endpoint-scenarios.pipe';\nimport { GetVerbColorPipe } from './pipes/get-verb-color/get-verb-color.pipe';\nimport { DesignerStore } from './store/designer-store';\nimport { HomeViewComponent } from './components/home-view/home-view.component';\nimport { CreateEditMockViewComponent } from './components/create-new-mock-view/create-new-mock-view.component';\nimport { MatListModule } from '@angular/material/list';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { ImportFromFileViewComponent } from './components/import-from-file-view/import-from-file-view.component';\nimport { ImportFromServerViewComponent } from './components/import-from-server-view/import-from-server-view.component';\nimport { EndpointViewComponent } from './components/endpoint-view/endpoint-view.component';\nimport { EndpointListComponent } from './components/endpoint-view/endpoint-list/endpoint-list.component';\nimport { OverviewHeaderComponent } from './components/orbital-common/overview-header/overview-header.component';\nimport { EndpointListItemComponent } from './components/endpoint-view/endpoint-list-item/endpoint-list-item.component';\nimport { SideBarComponent } from './components/orbital-common/side-bar/side-bar.component';\nimport { ScenarioViewComponent } from './components/scenario-view/scenario-view.component';\nimport { ScenarioEditorComponent } from './components/scenario-editor/scenario-editor.component';\nimport { MatExpansionModule, MatChipsModule, MatSnackBarModule } from '@angular/material';\nimport { AddMetadataComponent } from './components/scenario-editor/add-metadata/add-metadata.component';\nimport { AddRequestMatchRuleComponent } from './components/scenario-editor/add-request-match-rule/add-request-match-rule.component';\nimport { AddResponseComponent } from './components/scenario-editor/add-response/add-response.component';\nimport { DownloadMockdefinitionsComponent } from './components/download-mockdefinitions/download-mockdefinitions.component';\nimport { ExportToServerViewComponent } from './components/export-to-server-view/export-to-server-view.component';\nimport { GetVerbStringPipe } from './pipes/get-verb-string/get-verb-string.pipe';\n// tslint:disable-next-line: max-line-length\nimport { KvpListItemRuleTypeComponent } from './components/scenario-editor/kvp-edit-rule/kvp-list-item-rule-type/kvp-list-item-rule-type.component';\nimport { KvpEditRuleComponent } from './components/scenario-editor/kvp-edit-rule/kvp-edit-rule.component';\nimport { GetRuleTypeStringPipe } from './pipes/get-rule-type-string/get-rule-type-string.pipe';\nimport { UrlEditRuleComponent } from './components/scenario-editor/url-edit-rule/url-edit-rule.component';\nimport { UrlAddRuleComponent } from './components/scenario-editor/url-edit-rule/url-add-rule/url-add-rule.component';\n// tslint:disable-next-line: max-line-length\nimport { UrlListItemRuleTypeComponent } from './components/scenario-editor/url-edit-rule/url-list-item-rule-type/url-list-item-rule-type.component';\nimport { PolicyAddComponent } from './components/scenario-editor/policy-container/policy-add/policy-add.component';\nimport { PolicyEditComponent } from './components/scenario-editor/policy-container/policy-edit/policy-edit.component';\nimport { PolicyComponent } from './components/scenario-editor/policy-container/policy/policy.component';\nimport { BodyAddRuleComponent } from './components/scenario-editor/add-body-rule-edit/body-add-rule/body-add-rule.component';\n// tslint:disable-next-line: max-line-length\nimport { BodyListItemRuleTypeComponent } from './components/scenario-editor/add-body-rule-edit/body-list-item-rule-type/body-list-item-rule-type.component';\nimport { BodyEditRuleComponent } from './components/scenario-editor/add-body-rule-edit/body-edit-rule.component';\nimport 'hammerjs';\nimport { DeleteFromServerViewComponent } from './components/delete-from-server-view/delete-from-server-view.component';\nimport { CoreModule } from './core/core.module';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    GetEndpointScenariosPipe,\n    GetVerbColorPipe,\n    HomeViewComponent,\n    CreateEditMockViewComponent,\n    ImportFromFileViewComponent,\n    ImportFromServerViewComponent,\n    EndpointViewComponent,\n    EndpointListComponent,\n    OverviewHeaderComponent,\n    SideBarComponent,\n    ScenarioViewComponent,\n    SideBarComponent,\n    EndpointListItemComponent,\n    ScenarioViewComponent,\n    ScenarioEditorComponent,\n    AddRequestMatchRuleComponent,\n    AddMetadataComponent,\n    GetVerbStringPipe,\n    DownloadMockdefinitionsComponent,\n    ExportToServerViewComponent,\n    AddResponseComponent,\n    KvpListItemRuleTypeComponent,\n    KvpEditRuleComponent,\n    GetRuleTypeStringPipe,\n    UrlEditRuleComponent,\n    UrlAddRuleComponent,\n    UrlListItemRuleTypeComponent,\n    PolicyAddComponent,\n    PolicyEditComponent,\n    PolicyComponent,\n    BodyAddRuleComponent,\n    BodyListItemRuleTypeComponent,\n    BodyEditRuleComponent,\n    DeleteFromServerViewComponent\n  ],\n  imports: [\n    CoreModule,\n    BrowserModule,\n    HttpClientModule,\n    AppRoutingModule,\n    LoggerModule.forRoot({ level: NgxLoggerLevel.DEBUG }),\n    CommonModule,\n    BrowserAnimationsModule,\n    OrbitalCommonModule,\n    MatCardModule,\n    MatIconModule,\n    MatDividerModule,\n    MatListModule,\n    MatButtonModule,\n    MatGridListModule,\n    ReactiveFormsModule,\n    MatMenuModule,\n    MatExpansionModule,\n    MatChipsModule,\n    MatSnackBarModule\n  ],\n  providers: [DesignerStore],\n  bootstrap: [AppComponent]\n})\nexport class AppModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AddMetadataComponent"
                        },
                        {
                            "name": "AddRequestMatchRuleComponent"
                        },
                        {
                            "name": "AddResponseComponent"
                        },
                        {
                            "name": "AppComponent"
                        },
                        {
                            "name": "BodyAddRuleComponent"
                        },
                        {
                            "name": "BodyEditRuleComponent"
                        },
                        {
                            "name": "BodyListItemRuleTypeComponent"
                        },
                        {
                            "name": "CreateEditMockViewComponent"
                        },
                        {
                            "name": "DeleteFromServerViewComponent"
                        },
                        {
                            "name": "DownloadMockdefinitionsComponent"
                        },
                        {
                            "name": "EndpointListComponent"
                        },
                        {
                            "name": "EndpointListItemComponent"
                        },
                        {
                            "name": "EndpointViewComponent"
                        },
                        {
                            "name": "ExportToServerViewComponent"
                        },
                        {
                            "name": "GetEndpointScenariosPipe"
                        },
                        {
                            "name": "GetRuleTypeStringPipe"
                        },
                        {
                            "name": "GetVerbColorPipe"
                        },
                        {
                            "name": "GetVerbStringPipe"
                        },
                        {
                            "name": "HomeViewComponent"
                        },
                        {
                            "name": "ImportFromFileViewComponent"
                        },
                        {
                            "name": "ImportFromServerViewComponent"
                        },
                        {
                            "name": "KvpEditRuleComponent"
                        },
                        {
                            "name": "KvpListItemRuleTypeComponent"
                        },
                        {
                            "name": "OverviewHeaderComponent"
                        },
                        {
                            "name": "PolicyAddComponent"
                        },
                        {
                            "name": "PolicyComponent"
                        },
                        {
                            "name": "PolicyEditComponent"
                        },
                        {
                            "name": "ScenarioEditorComponent"
                        },
                        {
                            "name": "ScenarioViewComponent"
                        },
                        {
                            "name": "ScenarioViewComponent"
                        },
                        {
                            "name": "SideBarComponent"
                        },
                        {
                            "name": "SideBarComponent"
                        },
                        {
                            "name": "UrlAddRuleComponent"
                        },
                        {
                            "name": "UrlEditRuleComponent"
                        },
                        {
                            "name": "UrlListItemRuleTypeComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppRoutingModule"
                        },
                        {
                            "name": "CoreModule"
                        },
                        {
                            "name": "OrbitalCommonModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "id": "module-AppRoutingModule-9cacf5ed8ce10f9a0a67007af7d1ff07",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { OverviewRedirectService } from './services/overview-redirect/overview-redirect.service';\nimport { HomeViewComponent } from './components/home-view/home-view.component';\nimport { CreateEditMockViewComponent } from './components/create-new-mock-view/create-new-mock-view.component';\nimport { ImportFromFileViewComponent } from './components/import-from-file-view/import-from-file-view.component';\nimport { ImportFromServerViewComponent } from './components/import-from-server-view/import-from-server-view.component';\nimport { EndpointViewComponent } from './components/endpoint-view/endpoint-view.component';\nimport { ScenarioViewComponent } from './components/scenario-view/scenario-view.component';\nimport { ScenarioEditorComponent } from './components/scenario-editor/scenario-editor.component';\nimport { DownloadMockdefinitionsComponent } from './components/download-mockdefinitions/download-mockdefinitions.component';\nimport { ExportToServerViewComponent } from './components/export-to-server-view/export-to-server-view.component';\nimport { DeleteFromServerViewComponent } from './components/delete-from-server-view/delete-from-server-view.component';\n\nconst routes: Routes = [\n  { path: 'create-new-mock', component: CreateEditMockViewComponent },\n  { path: 'import-from-file', component: ImportFromFileViewComponent },\n  {\n    path: 'download-mockdefinitions',\n    component: DownloadMockdefinitionsComponent\n  },\n  { path: 'import-from-server', component: ImportFromServerViewComponent },\n  {\n    path: 'endpoint-view',\n    component: EndpointViewComponent,\n    canActivate: [OverviewRedirectService]\n  },\n  {\n    path: 'scenario-view',\n    component: ScenarioViewComponent,\n    canActivate: [OverviewRedirectService]\n  },\n  {\n    path: 'scenario-editor/:scenarioId',\n    component: ScenarioEditorComponent,\n    canActivate: [OverviewRedirectService]\n  },\n  {\n    path: 'export-to-server',\n    component: ExportToServerViewComponent,\n    canActivate: [OverviewRedirectService]\n  },\n  { path: 'delete-from-server', component: DeleteFromServerViewComponent },\n  { path: '**', component: HomeViewComponent }\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "CoreModule",
            "id": "module-CoreModule-6de7c8cb7555eace5ae019cef62b671f",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/core/core.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule, Optional, SkipSelf } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\n\n\n@NgModule({\n  declarations: [],\n  imports: [\n    CommonModule\n  ]\n})\nexport class CoreModule { \n  constructor(@Optional() @SkipSelf() parentModule: CoreModule) {\n    if (parentModule) {\n      throw new Error(\n        'CoreModule is already loaded. Import it in the AppModule only'\n      );\n    }\n  }\n}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "OrbitalCommonModule",
            "id": "module-OrbitalCommonModule-3cd9b70b3f2d20df213afabf08f4880f",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/components/orbital-common/orbital-common.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatButtonModule } from '@angular/material/button';\nimport { TextInputComponent } from './text-input/text-input.component';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { FileInputComponent } from './file-input/file-input.component';\nimport { MatCardModule } from '@angular/material/card';\nimport { ToolTipComponent } from './tool-tip/tool-tip.component';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { ShuttleSubListComponent } from './shuttle-list/shuttle-sub-list/shuttle-sub-list.component';\nimport { MatListModule } from '@angular/material/list';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { SearchBarComponent } from './search-bar/search-bar.component';\nimport { ShuttleListComponent } from './shuttle-list/shuttle-list.component';\nimport { DialogBoxComponent } from './dialog-box/dialog-box.component';\nimport { KvpEditComponent } from './kvp-edit/kvp-edit.component';\nimport { KvpAddComponent } from './kvp-edit/kvp-add/kvp-add.component';\nimport { KvpListItemComponent } from './kvp-edit/kvp-list-item/kvp-list-item.component';\nimport { MatExpansionModule } from '@angular/material';\nimport { KvpAddRuleComponent } from '../scenario-editor/kvp-edit-rule/kvp-add-rule/kvp-add-rule.component';\nimport { QuickExportComponent } from './quick-export/quick-export.component';\nimport { HttpClientModule } from '@angular/common/http';\n\n@NgModule({\n  declarations: [\n    TextInputComponent,\n    FileInputComponent,\n    ToolTipComponent,\n    ShuttleSubListComponent,\n    SearchBarComponent,\n    ShuttleListComponent,\n    DialogBoxComponent,\n    KvpEditComponent,\n    KvpAddComponent,\n    KvpListItemComponent,\n    KvpAddRuleComponent,\n    QuickExportComponent\n  ],\n  imports: [\n    CommonModule,\n    MatTooltipModule,\n    MatInputModule,\n    MatFormFieldModule,\n    ReactiveFormsModule,\n    FormsModule,\n    MatButtonModule,\n    MatIconModule,\n    MatCardModule,\n    MatListModule,\n    MatProgressSpinnerModule,\n    MatSelectModule,\n    MatCheckboxModule,\n    MatExpansionModule,\n    HttpClientModule\n  ],\n  exports: [\n    TextInputComponent,\n    FileInputComponent,\n    ToolTipComponent,\n    ShuttleSubListComponent,\n    MatInputModule,\n    MatFormFieldModule,\n    ReactiveFormsModule,\n    FormsModule,\n    MatButtonModule,\n    MatIconModule,\n    MatListModule,\n    MatProgressSpinnerModule,\n    MatSelectModule,\n    MatCheckboxModule,\n    SearchBarComponent,\n    ShuttleListComponent,\n    DialogBoxComponent,\n    KvpEditComponent,\n    KvpAddComponent,\n    KvpListItemComponent,\n    MatExpansionModule,\n    KvpAddRuleComponent,\n    QuickExportComponent\n  ]\n})\nexport class OrbitalCommonModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "DialogBoxComponent"
                        },
                        {
                            "name": "FileInputComponent"
                        },
                        {
                            "name": "KvpAddComponent"
                        },
                        {
                            "name": "KvpAddRuleComponent"
                        },
                        {
                            "name": "KvpEditComponent"
                        },
                        {
                            "name": "KvpListItemComponent"
                        },
                        {
                            "name": "QuickExportComponent"
                        },
                        {
                            "name": "SearchBarComponent"
                        },
                        {
                            "name": "ShuttleListComponent"
                        },
                        {
                            "name": "ShuttleSubListComponent"
                        },
                        {
                            "name": "TextInputComponent"
                        },
                        {
                            "name": "ToolTipComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "DialogBoxComponent"
                        },
                        {
                            "name": "FileInputComponent"
                        },
                        {
                            "name": "KvpAddComponent"
                        },
                        {
                            "name": "KvpAddRuleComponent"
                        },
                        {
                            "name": "KvpEditComponent"
                        },
                        {
                            "name": "KvpListItemComponent"
                        },
                        {
                            "name": "QuickExportComponent"
                        },
                        {
                            "name": "SearchBarComponent"
                        },
                        {
                            "name": "ShuttleListComponent"
                        },
                        {
                            "name": "ShuttleSubListComponent"
                        },
                        {
                            "name": "TextInputComponent"
                        },
                        {
                            "name": "ToolTipComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SharedModule",
            "id": "module-SharedModule-558cbefb92c072889d25e3ff73894fa2",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/shared/shared.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\n\n\n@NgModule({\n  declarations: [],\n  imports: [\n    CommonModule\n  ]\n})\nexport class SharedModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "defaultBodyRule",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/models/mock-definition/scenario/body-rule.model.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "BodyRule",
                "defaultValue": "{\n  type: RuleType.NONE,\n  rule: {}\n}"
            },
            {
                "name": "defaultMetadata",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/models/mock-definition/metadata.model.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Metadata",
                "defaultValue": "{\n  title: '',\n  description: ''\n}"
            },
            {
                "name": "defaultMockDefinition",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/models/mock-definition/mock-definition.model.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "MockDefinition",
                "defaultValue": "{\n  metadata: defaultMetadata,\n  host: '',\n  basePath: '',\n  scenarios: [emptyScenario],\n  openApi: {} as OpenAPIV2.Document\n}"
            },
            {
                "name": "defaultPolicy",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/models/mock-definition/scenario/policy.model.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Policy",
                "defaultValue": "{\n  type: PolicyType.NONE,\n  attributes: {}\n}"
            },
            {
                "name": "defaultResponse",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/models/mock-definition/scenario/response.model.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Response",
                "defaultValue": "{\n  headers: {},\n  body: '',\n  status: 200,\n  type: ResponseType.CUSTOM\n}"
            },
            {
                "name": "defaultRquestMatchRule",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/models/mock-definition/scenario/request-match-rule.model.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "RequestMatchRule",
                "defaultValue": "{\n  headerRules: [],\n  queryRules: [],\n  bodyRules: [],\n  urlRules: []\n}"
            },
            {
                "name": "emptyScenario",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/models/mock-definition/scenario/scenario.model.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Scenario",
                "defaultValue": "{\n  id: uuid.v4(),\n  metadata: defaultMetadata,\n  verb: VerbType.GET,\n  path: '',\n  response: defaultResponse,\n  requestMatchRules: defaultRquestMatchRule,\n  policies: [],\n  defaultScenario: false\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  production: true\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  production: false\n}"
            },
            {
                "name": "Large",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "any"
            },
            {
                "name": "Secondary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Small",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<Button>",
                "defaultValue": "(args: Button) => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<Header>",
                "defaultValue": "(args: Header) => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<Page>",
                "defaultValue": "(args: Page) => ({\n  props: args,\n})"
            }
        ],
        "functions": [
            {
                "name": "compareRecords",
                "file": "src/app/models/record.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "record",
                        "type": "Record",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "recordToCompare",
                        "type": "Record",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "boolean",
                "jsdoctags": [
                    {
                        "name": "record",
                        "type": "Record",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "recordToCompare",
                        "type": "Record",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "recordAdd",
                "file": "src/app/models/record.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Adds a record</p>\n",
                "args": [
                    {
                        "name": "record",
                        "type": "Record",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "key",
                        "type": "K",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "value",
                        "type": "T",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "Record<K, T>",
                "jsdoctags": [
                    {
                        "name": "record",
                        "type": "Record",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "key",
                        "type": "K",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "value",
                        "type": "T",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "recordDelete",
                "file": "src/app/models/record.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Deletes a record</p>\n",
                "args": [
                    {
                        "name": "record",
                        "type": "Record",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "key",
                        "type": "K",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "Record<K, T>",
                "jsdoctags": [
                    {
                        "name": "record",
                        "type": "Record",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "key",
                        "type": "K",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "recordFirstOrDefault",
                "file": "src/app/models/record.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Returns the first record, or a default value</p>\n",
                "args": [
                    {
                        "name": "record",
                        "type": "Record",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "fallback",
                        "type": "T",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "T",
                "jsdoctags": [
                    {
                        "name": "record",
                        "type": "Record",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "fallback",
                        "type": "T",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "recordFirstOrDefaultKey",
                "file": "src/app/models/record.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Gets the key&#39;s name from the provided record</p>\n",
                "args": [
                    {
                        "name": "record",
                        "type": "Record",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "fallback",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "string",
                "jsdoctags": [
                    {
                        "name": "record",
                        "type": "Record",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "fallback",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "recordMap",
                "file": "src/app/models/record.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Converts the list of records into an array, in the form of (key, value)</p>\n",
                "args": [
                    {
                        "name": "record",
                        "type": "Record",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "fn",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "TResult[]",
                "jsdoctags": [
                    {
                        "name": "record",
                        "type": "Record",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "fn",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "recordSize",
                "file": "src/app/models/record.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Gets the length of the records</p>\n",
                "args": [
                    {
                        "name": "record",
                        "type": "Record",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "number",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 1711,
                            "end": 1717,
                            "flags": 4194304,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "record"
                        },
                        "type": "Record",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 1705,
                            "end": 1710,
                            "flags": 4194304,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>The record to get the total length</p>\n"
                    }
                ]
            },
            {
                "name": "recordUpdateKeyName",
                "file": "src/app/models/record.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Updates an existing record with a new key name</p>\n",
                "args": [
                    {
                        "name": "o",
                        "type": "Record",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "oldKey",
                        "type": "K",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "newKey",
                        "type": "K",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "Record<K, T>",
                "jsdoctags": [
                    {
                        "name": "o",
                        "type": "Record",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "oldKey",
                        "type": "K",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "newKey",
                        "type": "K",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        ],
        "typealiases": [],
        "enumerations": [
            {
                "name": "PolicyType",
                "childs": [
                    {
                        "name": "NONE",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "0"
                    },
                    {
                        "name": "DELAYRESPONSE",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Enum representation for different policies</p>\n",
                "file": "src/app/models/mock-definition/scenario/policy.type.ts"
            },
            {
                "name": "ResponseType",
                "childs": [
                    {
                        "name": "NONE",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "0"
                    },
                    {
                        "name": "CUSTOM",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "TEMPLATED",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Enum representation for different response types</p>\n",
                "file": "src/app/models/mock-definition/scenario/response.type.ts"
            },
            {
                "name": "RuleType",
                "childs": [
                    {
                        "name": "NONE",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "0"
                    },
                    {
                        "name": "REGEX",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "TEXTSTARTSWITH",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "TEXTENDSWITH",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "TEXTCONTAINS",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "TEXTEQUALS",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "JSONPATH",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "JSONEQUALITY",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "JSONCONTAINS",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "JSONSCHEMA",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "ACCEPTALL",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Enum representation for different comparers</p>\n",
                "file": "src/app/models/mock-definition/scenario/rule.type.ts"
            },
            {
                "name": "VerbType",
                "childs": [
                    {
                        "name": "GET",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "0"
                    },
                    {
                        "name": "PUT",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "1"
                    },
                    {
                        "name": "DELETE",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "2"
                    },
                    {
                        "name": "POST",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "3"
                    },
                    {
                        "name": "HEAD",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "4"
                    },
                    {
                        "name": "TRACE",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "5"
                    },
                    {
                        "name": "PATCH",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "6"
                    },
                    {
                        "name": "CONNECT",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "7"
                    },
                    {
                        "name": "OPTIONS",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "8"
                    },
                    {
                        "name": "CUSTOM",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "9"
                    },
                    {
                        "name": "NONE",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "255"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Enum representation of different type of http verb</p>\n",
                "file": "src/app/models/verb.type.ts"
            }
        ],
        "groupedVariables": {
            "src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any"
                }
            ],
            "src/app/models/mock-definition/scenario/body-rule.model.ts": [
                {
                    "name": "defaultBodyRule",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/models/mock-definition/scenario/body-rule.model.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BodyRule",
                    "defaultValue": "{\n  type: RuleType.NONE,\n  rule: {}\n}"
                }
            ],
            "src/app/models/mock-definition/metadata.model.ts": [
                {
                    "name": "defaultMetadata",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/models/mock-definition/metadata.model.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Metadata",
                    "defaultValue": "{\n  title: '',\n  description: ''\n}"
                }
            ],
            "src/app/models/mock-definition/mock-definition.model.ts": [
                {
                    "name": "defaultMockDefinition",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/models/mock-definition/mock-definition.model.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MockDefinition",
                    "defaultValue": "{\n  metadata: defaultMetadata,\n  host: '',\n  basePath: '',\n  scenarios: [emptyScenario],\n  openApi: {} as OpenAPIV2.Document\n}"
                }
            ],
            "src/app/models/mock-definition/scenario/policy.model.ts": [
                {
                    "name": "defaultPolicy",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/models/mock-definition/scenario/policy.model.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Policy",
                    "defaultValue": "{\n  type: PolicyType.NONE,\n  attributes: {}\n}"
                }
            ],
            "src/app/models/mock-definition/scenario/response.model.ts": [
                {
                    "name": "defaultResponse",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/models/mock-definition/scenario/response.model.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Response",
                    "defaultValue": "{\n  headers: {},\n  body: '',\n  status: 200,\n  type: ResponseType.CUSTOM\n}"
                }
            ],
            "src/app/models/mock-definition/scenario/request-match-rule.model.ts": [
                {
                    "name": "defaultRquestMatchRule",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/models/mock-definition/scenario/request-match-rule.model.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "RequestMatchRule",
                    "defaultValue": "{\n  headerRules: [],\n  queryRules: [],\n  bodyRules: [],\n  urlRules: []\n}"
                }
            ],
            "src/app/models/mock-definition/scenario/scenario.model.ts": [
                {
                    "name": "emptyScenario",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/models/mock-definition/scenario/scenario.model.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Scenario",
                    "defaultValue": "{\n  id: uuid.v4(),\n  metadata: defaultMetadata,\n  verb: VerbType.GET,\n  path: '',\n  response: defaultResponse,\n  requestMatchRules: defaultRquestMatchRule,\n  policies: [],\n  defaultScenario: false\n}"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  production: true\n}"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  production: false\n}"
                }
            ],
            "src/stories/Button.stories.ts": [
                {
                    "name": "Large",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Secondary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Small",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<Button>",
                    "defaultValue": "(args: Button) => ({\n  props: args,\n})"
                }
            ],
            "src/stories/Header.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<Header>",
                    "defaultValue": "(args: Header) => ({\n  props: args,\n})"
                }
            ],
            "src/stories/Page.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<Page>",
                    "defaultValue": "(args: Page) => ({\n  props: args,\n})"
                }
            ]
        },
        "groupedFunctions": {
            "src/app/models/record.ts": [
                {
                    "name": "compareRecords",
                    "file": "src/app/models/record.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "record",
                            "type": "Record",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "recordToCompare",
                            "type": "Record",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "boolean",
                    "jsdoctags": [
                        {
                            "name": "record",
                            "type": "Record",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "recordToCompare",
                            "type": "Record",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "recordAdd",
                    "file": "src/app/models/record.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Adds a record</p>\n",
                    "args": [
                        {
                            "name": "record",
                            "type": "Record",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "key",
                            "type": "K",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "value",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "Record<K, T>",
                    "jsdoctags": [
                        {
                            "name": "record",
                            "type": "Record",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "key",
                            "type": "K",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "value",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "recordDelete",
                    "file": "src/app/models/record.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Deletes a record</p>\n",
                    "args": [
                        {
                            "name": "record",
                            "type": "Record",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "key",
                            "type": "K",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "Record<K, T>",
                    "jsdoctags": [
                        {
                            "name": "record",
                            "type": "Record",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "key",
                            "type": "K",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "recordFirstOrDefault",
                    "file": "src/app/models/record.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Returns the first record, or a default value</p>\n",
                    "args": [
                        {
                            "name": "record",
                            "type": "Record",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "fallback",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "T",
                    "jsdoctags": [
                        {
                            "name": "record",
                            "type": "Record",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "fallback",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "recordFirstOrDefaultKey",
                    "file": "src/app/models/record.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Gets the key&#39;s name from the provided record</p>\n",
                    "args": [
                        {
                            "name": "record",
                            "type": "Record",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "fallback",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "string",
                    "jsdoctags": [
                        {
                            "name": "record",
                            "type": "Record",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "fallback",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "recordMap",
                    "file": "src/app/models/record.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Converts the list of records into an array, in the form of (key, value)</p>\n",
                    "args": [
                        {
                            "name": "record",
                            "type": "Record",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "fn",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "TResult[]",
                    "jsdoctags": [
                        {
                            "name": "record",
                            "type": "Record",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "fn",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "recordSize",
                    "file": "src/app/models/record.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Gets the length of the records</p>\n",
                    "args": [
                        {
                            "name": "record",
                            "type": "Record",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "number",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1711,
                                "end": 1717,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "record"
                            },
                            "type": "Record",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1705,
                                "end": 1710,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>The record to get the total length</p>\n"
                        }
                    ]
                },
                {
                    "name": "recordUpdateKeyName",
                    "file": "src/app/models/record.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Updates an existing record with a new key name</p>\n",
                    "args": [
                        {
                            "name": "o",
                            "type": "Record",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "oldKey",
                            "type": "K",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "newKey",
                            "type": "K",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "Record<K, T>",
                    "jsdoctags": [
                        {
                            "name": "o",
                            "type": "Record",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "oldKey",
                            "type": "K",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "newKey",
                            "type": "K",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        "groupedEnumerations": {
            "src/app/models/mock-definition/scenario/policy.type.ts": [
                {
                    "name": "PolicyType",
                    "childs": [
                        {
                            "name": "NONE",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "0"
                        },
                        {
                            "name": "DELAYRESPONSE",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Enum representation for different policies</p>\n",
                    "file": "src/app/models/mock-definition/scenario/policy.type.ts"
                }
            ],
            "src/app/models/mock-definition/scenario/response.type.ts": [
                {
                    "name": "ResponseType",
                    "childs": [
                        {
                            "name": "NONE",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "0"
                        },
                        {
                            "name": "CUSTOM",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "TEMPLATED",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Enum representation for different response types</p>\n",
                    "file": "src/app/models/mock-definition/scenario/response.type.ts"
                }
            ],
            "src/app/models/mock-definition/scenario/rule.type.ts": [
                {
                    "name": "RuleType",
                    "childs": [
                        {
                            "name": "NONE",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "0"
                        },
                        {
                            "name": "REGEX",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "TEXTSTARTSWITH",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "TEXTENDSWITH",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "TEXTCONTAINS",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "TEXTEQUALS",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "JSONPATH",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "JSONEQUALITY",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "JSONCONTAINS",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "JSONSCHEMA",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "ACCEPTALL",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Enum representation for different comparers</p>\n",
                    "file": "src/app/models/mock-definition/scenario/rule.type.ts"
                }
            ],
            "src/app/models/verb.type.ts": [
                {
                    "name": "VerbType",
                    "childs": [
                        {
                            "name": "GET",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "0"
                        },
                        {
                            "name": "PUT",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "1"
                        },
                        {
                            "name": "DELETE",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "2"
                        },
                        {
                            "name": "POST",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "3"
                        },
                        {
                            "name": "HEAD",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "4"
                        },
                        {
                            "name": "TRACE",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "5"
                        },
                        {
                            "name": "PATCH",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "6"
                        },
                        {
                            "name": "CONNECT",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "7"
                        },
                        {
                            "name": "OPTIONS",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "8"
                        },
                        {
                            "name": "CUSTOM",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "9"
                        },
                        {
                            "name": "NONE",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "255"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Enum representation of different type of http verb</p>\n",
                    "file": "src/app/models/verb.type.ts"
                }
            ]
        },
        "groupedTypeAliases": {}
    },
    "routes": {
        "name": "<root>",
        "kind": "module",
        "className": "AppModule",
        "children": [
            {
                "name": "routes",
                "filename": "src/app/app-routing.module.ts",
                "module": "AppRoutingModule",
                "children": [
                    {
                        "path": "create-new-mock",
                        "component": "CreateEditMockViewComponent"
                    },
                    {
                        "path": "import-from-file",
                        "component": "ImportFromFileViewComponent"
                    },
                    {
                        "path": "download-mockdefinitions",
                        "component": "DownloadMockdefinitionsComponent"
                    },
                    {
                        "path": "import-from-server",
                        "component": "ImportFromServerViewComponent"
                    },
                    {
                        "path": "endpoint-view",
                        "component": "EndpointViewComponent",
                        "canActivate": [
                            "OverviewRedirectService"
                        ]
                    },
                    {
                        "path": "scenario-view",
                        "component": "ScenarioViewComponent",
                        "canActivate": [
                            "OverviewRedirectService"
                        ]
                    },
                    {
                        "path": "scenario-editor/:scenarioId",
                        "component": "ScenarioEditorComponent",
                        "canActivate": [
                            "OverviewRedirectService"
                        ]
                    },
                    {
                        "path": "export-to-server",
                        "component": "ExportToServerViewComponent",
                        "canActivate": [
                            "OverviewRedirectService"
                        ]
                    },
                    {
                        "path": "delete-from-server",
                        "component": "DeleteFromServerViewComponent"
                    },
                    {
                        "path": "**",
                        "component": "HomeViewComponent"
                    }
                ],
                "kind": "module"
            }
        ]
    },
    "coverage": {
        "count": 25,
        "status": "low",
        "files": [
            {
                "filePath": "e2e/src/app.po.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AppPage",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/create-new-mock-view/create-new-mock-view.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CreateEditMockViewComponent",
                "coveragePercent": 27,
                "coverageCount": "3/11",
                "status": "medium"
            },
            {
                "filePath": "src/app/components/delete-from-server-view/delete-from-server-view.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DeleteFromServerViewComponent",
                "coveragePercent": 25,
                "coverageCount": "8/31",
                "status": "low"
            },
            {
                "filePath": "src/app/components/download-mockdefinitions/download-mockdefinitions.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DownloadMockdefinitionsComponent",
                "coveragePercent": 30,
                "coverageCount": "4/13",
                "status": "medium"
            },
            {
                "filePath": "src/app/components/endpoint-view/endpoint-list-item/endpoint-list-item.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "EndpointListItemComponent",
                "coveragePercent": 16,
                "coverageCount": "1/6",
                "status": "low"
            },
            {
                "filePath": "src/app/components/endpoint-view/endpoint-list/endpoint-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "EndpointListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/components/endpoint-view/endpoint-view.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "EndpointViewComponent",
                "coveragePercent": 30,
                "coverageCount": "3/10",
                "status": "medium"
            },
            {
                "filePath": "src/app/components/export-to-server-view/export-to-server-view.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ExportToServerViewComponent",
                "coveragePercent": 29,
                "coverageCount": "5/17",
                "status": "medium"
            },
            {
                "filePath": "src/app/components/home-view/home-view.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HomeViewComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/components/import-from-file-view/import-from-file-view.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ImportFromFileViewComponent",
                "coveragePercent": 36,
                "coverageCount": "7/19",
                "status": "medium"
            },
            {
                "filePath": "src/app/components/import-from-server-view/import-from-server-view.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ImportFromServerViewComponent",
                "coveragePercent": 16,
                "coverageCount": "4/24",
                "status": "low"
            },
            {
                "filePath": "src/app/components/orbital-common/dialog-box/dialog-box.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DialogBoxComponent",
                "coveragePercent": 20,
                "coverageCount": "2/10",
                "status": "low"
            },
            {
                "filePath": "src/app/components/orbital-common/file-input/file-input.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FileInputComponent",
                "coveragePercent": 12,
                "coverageCount": "2/16",
                "status": "low"
            },
            {
                "filePath": "src/app/components/orbital-common/kvp-edit/kvp-add/kvp-add.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "KvpAddComponent",
                "coveragePercent": 20,
                "coverageCount": "2/10",
                "status": "low"
            },
            {
                "filePath": "src/app/components/orbital-common/kvp-edit/kvp-edit.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "KvpEditComponent",
                "coveragePercent": 53,
                "coverageCount": "7/13",
                "status": "good"
            },
            {
                "filePath": "src/app/components/orbital-common/kvp-edit/kvp-list-item/kvp-list-item.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "KvpListItemComponent",
                "coveragePercent": 28,
                "coverageCount": "2/7",
                "status": "medium"
            },
            {
                "filePath": "src/app/components/orbital-common/overview-header/overview-header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "OverviewHeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/components/orbital-common/quick-export/quick-export.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "QuickExportComponent",
                "coveragePercent": 10,
                "coverageCount": "1/10",
                "status": "low"
            },
            {
                "filePath": "src/app/components/orbital-common/search-bar/search-bar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SearchBarComponent",
                "coveragePercent": 20,
                "coverageCount": "2/10",
                "status": "low"
            },
            {
                "filePath": "src/app/components/orbital-common/shuttle-list/shuttle-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ShuttleListComponent",
                "coveragePercent": 26,
                "coverageCount": "5/19",
                "status": "medium"
            },
            {
                "filePath": "src/app/components/orbital-common/shuttle-list/shuttle-sub-list/shuttle-sub-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ShuttleSubListComponent",
                "coveragePercent": 35,
                "coverageCount": "6/17",
                "status": "medium"
            },
            {
                "filePath": "src/app/components/orbital-common/side-bar/side-bar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SideBarComponent",
                "coveragePercent": 29,
                "coverageCount": "5/17",
                "status": "medium"
            },
            {
                "filePath": "src/app/components/orbital-common/text-input/text-input.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TextInputComponent",
                "coveragePercent": 10,
                "coverageCount": "1/10",
                "status": "low"
            },
            {
                "filePath": "src/app/components/orbital-common/tool-tip/tool-tip.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ToolTipComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/components/scenario-editor/add-body-rule-edit/add-body-rule-builder/add-body-rule.builder.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AddBodyRuleBuilder",
                "coveragePercent": 60,
                "coverageCount": "3/5",
                "status": "good"
            },
            {
                "filePath": "src/app/components/scenario-editor/add-body-rule-edit/body-add-rule/body-add-rule.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BodyAddRuleComponent",
                "coveragePercent": 25,
                "coverageCount": "3/12",
                "status": "low"
            },
            {
                "filePath": "src/app/components/scenario-editor/add-body-rule-edit/body-edit-rule.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BodyEditRuleComponent",
                "coveragePercent": 45,
                "coverageCount": "5/11",
                "status": "medium"
            },
            {
                "filePath": "src/app/components/scenario-editor/add-body-rule-edit/body-list-item-rule-type/body-list-item-rule-type.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BodyListItemRuleTypeComponent",
                "coveragePercent": 33,
                "coverageCount": "2/6",
                "status": "medium"
            },
            {
                "filePath": "src/app/components/scenario-editor/add-metadata/add-metadata.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AddMetadataComponent",
                "coveragePercent": 35,
                "coverageCount": "7/20",
                "status": "medium"
            },
            {
                "filePath": "src/app/components/scenario-editor/add-request-match-rule/add-request-match-rule.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AddRequestMatchRuleComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/components/scenario-editor/add-response/add-response.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AddResponseComponent",
                "coveragePercent": 36,
                "coverageCount": "8/22",
                "status": "medium"
            },
            {
                "filePath": "src/app/components/scenario-editor/kvp-edit-rule/kvp-add-rule/kvp-add-rule.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "KvpAddRuleComponent",
                "coveragePercent": 14,
                "coverageCount": "2/14",
                "status": "low"
            },
            {
                "filePath": "src/app/components/scenario-editor/kvp-edit-rule/kvp-edit-rule.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "KvpEditRuleComponent",
                "coveragePercent": 50,
                "coverageCount": "6/12",
                "status": "medium"
            },
            {
                "filePath": "src/app/components/scenario-editor/kvp-edit-rule/kvp-list-item-rule-type/kvp-list-item-rule-type.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "KvpListItemRuleTypeComponent",
                "coveragePercent": 41,
                "coverageCount": "5/12",
                "status": "medium"
            },
            {
                "filePath": "src/app/components/scenario-editor/policy-container/policy-add/policy-add.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PolicyAddComponent",
                "coveragePercent": 30,
                "coverageCount": "4/13",
                "status": "medium"
            },
            {
                "filePath": "src/app/components/scenario-editor/policy-container/policy-edit/policy-edit.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PolicyEditComponent",
                "coveragePercent": 40,
                "coverageCount": "4/10",
                "status": "medium"
            },
            {
                "filePath": "src/app/components/scenario-editor/policy-container/policy-form-builder/policy-form.builder.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "PolicyFormBuilder",
                "coveragePercent": 25,
                "coverageCount": "1/4",
                "status": "low"
            },
            {
                "filePath": "src/app/components/scenario-editor/policy-container/policy/policy.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PolicyComponent",
                "coveragePercent": 35,
                "coverageCount": "5/14",
                "status": "medium"
            },
            {
                "filePath": "src/app/components/scenario-editor/scenario-editor.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ScenarioEditorComponent",
                "coveragePercent": 24,
                "coverageCount": "7/29",
                "status": "low"
            },
            {
                "filePath": "src/app/components/scenario-editor/scenario-form-builder/scenario-form.builder.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ScenarioFormBuilder",
                "coveragePercent": 58,
                "coverageCount": "7/12",
                "status": "good"
            },
            {
                "filePath": "src/app/components/scenario-editor/scenario-form-builder/scenario-form.builder.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ScenarioFormMapper",
                "coveragePercent": 50,
                "coverageCount": "4/8",
                "status": "medium"
            },
            {
                "filePath": "src/app/components/scenario-editor/url-edit-rule/url-add-rule/url-add-rule.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "UrlAddRuleComponent",
                "coveragePercent": 27,
                "coverageCount": "3/11",
                "status": "medium"
            },
            {
                "filePath": "src/app/components/scenario-editor/url-edit-rule/url-edit-rule.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "UrlEditRuleComponent",
                "coveragePercent": 45,
                "coverageCount": "5/11",
                "status": "medium"
            },
            {
                "filePath": "src/app/components/scenario-editor/url-edit-rule/url-list-item-rule-type/url-list-item-rule-type.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "UrlListItemRuleTypeComponent",
                "coveragePercent": 37,
                "coverageCount": "3/8",
                "status": "medium"
            },
            {
                "filePath": "src/app/components/scenario-view/scenario-view.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ScenarioViewComponent",
                "coveragePercent": 37,
                "coverageCount": "10/27",
                "status": "medium"
            },
            {
                "filePath": "src/app/models/endpoint.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Endpoint",
                "coveragePercent": 25,
                "coverageCount": "1/4",
                "status": "low"
            },
            {
                "filePath": "src/app/models/mock-definition/metadata.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Metadata",
                "coveragePercent": 33,
                "coverageCount": "1/3",
                "status": "medium"
            },
            {
                "filePath": "src/app/models/mock-definition/metadata.model.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "defaultMetadata",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/models/mock-definition/mock-definition.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "MockDefinition",
                "coveragePercent": 16,
                "coverageCount": "1/6",
                "status": "low"
            },
            {
                "filePath": "src/app/models/mock-definition/mock-definition.model.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "defaultMockDefinition",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/models/mock-definition/scenario/body-rule.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "BodyRule",
                "coveragePercent": 33,
                "coverageCount": "1/3",
                "status": "medium"
            },
            {
                "filePath": "src/app/models/mock-definition/scenario/body-rule.model.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "defaultBodyRule",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/models/mock-definition/scenario/key-value-pair-rule.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "KeyValuePairRule",
                "coveragePercent": 33,
                "coverageCount": "1/3",
                "status": "medium"
            },
            {
                "filePath": "src/app/models/mock-definition/scenario/policy.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Policy",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/models/mock-definition/scenario/policy.model.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "defaultPolicy",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/models/mock-definition/scenario/request-match-rule.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "RequestMatchRule",
                "coveragePercent": 20,
                "coverageCount": "1/5",
                "status": "low"
            },
            {
                "filePath": "src/app/models/mock-definition/scenario/request-match-rule.model.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "defaultRquestMatchRule",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/models/mock-definition/scenario/response.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Response",
                "coveragePercent": 20,
                "coverageCount": "1/5",
                "status": "low"
            },
            {
                "filePath": "src/app/models/mock-definition/scenario/response.model.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "defaultResponse",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/models/mock-definition/scenario/scenario.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Scenario",
                "coveragePercent": 11,
                "coverageCount": "1/9",
                "status": "low"
            },
            {
                "filePath": "src/app/models/mock-definition/scenario/scenario.model.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "emptyScenario",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/models/record.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "compareRecords",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/models/record.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "recordAdd",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "src/app/models/record.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "recordDelete",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "src/app/models/record.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "recordFirstOrDefault",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "src/app/models/record.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "recordFirstOrDefaultKey",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "src/app/models/record.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "recordMap",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "src/app/models/record.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "recordSize",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "src/app/models/record.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "recordUpdateKeyName",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "src/app/pipes/get-endpoint-scenarios/get-endpoint-scenarios.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "GetEndpointScenariosPipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pipes/get-rule-type-string/get-rule-type-string.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "GetRuleTypeStringPipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pipes/get-verb-color/get-verb-color.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "GetVerbColorPipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pipes/get-verb-string/get-verb-string.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "GetVerbStringPipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/services/export-mockdefinition/export-mockdefinition.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ExportMockdefinitionService",
                "coveragePercent": 42,
                "coverageCount": "3/7",
                "status": "medium"
            },
            {
                "filePath": "src/app/services/mock-definition/mock-definition.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "MockDefinitionService",
                "coveragePercent": 57,
                "coverageCount": "4/7",
                "status": "good"
            },
            {
                "filePath": "src/app/services/notification-service/notification.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "NotificationService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/services/openapispecservice/open-api-spec.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "OpenApiSpecService",
                "coveragePercent": 20,
                "coverageCount": "1/5",
                "status": "low"
            },
            {
                "filePath": "src/app/services/orbital-admin/orbital-admin.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "OrbitalAdminService",
                "coveragePercent": 75,
                "coverageCount": "6/8",
                "status": "good"
            },
            {
                "filePath": "src/app/services/overview-redirect/overview-redirect.service.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "OverviewRedirectService",
                "coveragePercent": 33,
                "coverageCount": "1/3",
                "status": "medium"
            },
            {
                "filePath": "src/app/services/read-file/read-file.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ReadFileService",
                "coveragePercent": 33,
                "coverageCount": "1/3",
                "status": "medium"
            },
            {
                "filePath": "src/app/services/valid-json/valid-json.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ValidJsonService",
                "coveragePercent": 50,
                "coverageCount": "2/4",
                "status": "medium"
            },
            {
                "filePath": "src/app/store/designer-store.ts",
                "type": "class",
                "linktype": "classe",
                "name": "DesignerStore",
                "coveragePercent": 50,
                "coverageCount": "8/16",
                "status": "medium"
            },
            {
                "filePath": "src/app/store/designer-store.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "State",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Large",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Secondary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Small",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 83,
                "coverageCount": "5/6",
                "status": "very-good"
            },
            {
                "filePath": "src/stories/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/stories/page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}
