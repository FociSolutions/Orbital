{
    "pipes": [
        {
            "name": "GetEndpointScenariosPipe",
            "id": "pipe-GetEndpointScenariosPipe-005a644dcac40df3b859c268bf7407c83636441b9efe410b6463e19294147ef526a70b9b3b3949fd3355ce3e598cf61f9f2ec3f4955a818a074145b197f4c77e",
            "file": "src/app/pipes/get-endpoint-scenarios/get-endpoint-scenarios.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "scenarios",
                            "type": "Scenario[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "endpoint",
                            "type": "Endpoint",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Scenario[]",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nFilters a list of scenarios, leaving only the scenarios whose path and verb match\nthe path and verb of the endpoint argument\n",
                    "description": "<p>Filters a list of scenarios, leaving only the scenarios whose path and verb match\nthe path and verb of the endpoint argument</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 452,
                                "end": 461,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "scenarios"
                            },
                            "type": "Scenario[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 446,
                                "end": 451,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>The list of scenarios to filter</p>\n"
                        },
                        {
                            "name": {
                                "pos": 506,
                                "end": 514,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "endpoint"
                            },
                            "type": "Endpoint",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 500,
                                "end": 505,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>The endpoint to filter the scenarios against</p>\n"
                        }
                    ]
                }
            ],
            "ngname": "getEndpointScenarios",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\nimport { Scenario } from '../../models/mock-definition/scenario/scenario.model';\nimport { Endpoint } from '../../models/endpoint.model';\n\n@Pipe({\n  name: 'getEndpointScenarios',\n})\nexport class GetEndpointScenariosPipe implements PipeTransform {\n  /**\n   * Filters a list of scenarios, leaving only the scenarios whose path and verb match\n   * the path and verb of the endpoint argument\n   * @param scenarios The list of scenarios to filter\n   * @param endpoint The endpoint to filter the scenarios against\n   */\n  transform(scenarios: Scenario[], endpoint: Endpoint): Scenario[] {\n    if (!endpoint) {\n      return scenarios;\n    }\n    return scenarios.filter(\n      (scenario) =>\n        scenario.path === endpoint.path &&\n        scenario.verb.toString().toUpperCase() === endpoint.verb.toString().toUpperCase()\n    );\n  }\n}\n"
        },
        {
            "name": "GetRuleTypeStringPipe",
            "id": "pipe-GetRuleTypeStringPipe-65af3b88ead6b8d674ea2867657d1cd2f4105b3fe6ca2823cc376ce8f319136ff97abf69cd76b7e5e75e3d22bc78c14d1dc17b332dd7a6826adb9096220be4cb",
            "file": "src/app/pipes/get-rule-type-string/get-rule-type-string.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "ruleType",
                            "type": "RuleType",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nTakes in a ruleType and outputs the corresponding ruleType as a nicely formatted string\n",
                    "description": "<p>Takes in a ruleType and outputs the corresponding ruleType as a nicely formatted string</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 345,
                                "end": 353,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "ruleType"
                            },
                            "type": "RuleType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 339,
                                "end": 344,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>The ruleType to be piped in</p>\n"
                        }
                    ]
                }
            ],
            "ngname": "getRuleTypeString",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\nimport { RuleType } from 'src/app/models/mock-definition/scenario/rule-type';\n\n@Pipe({\n  name: 'getRuleTypeString',\n})\nexport class GetRuleTypeStringPipe implements PipeTransform {\n  /**\n   * Takes in a ruleType and outputs the corresponding ruleType as a nicely formatted string\n   * @param ruleType The ruleType to be piped in\n   */\n  transform(ruleType: RuleType): string {\n    switch (ruleType) {\n      case RuleType.NONE:\n        return 'None';\n      case RuleType.REGEX:\n        return 'Match Regex';\n      case RuleType.TEXTSTARTSWITH:\n        return 'Text: Starts With';\n      case RuleType.TEXTENDSWITH:\n        return 'Text: Ends With';\n      case RuleType.TEXTCONTAINS:\n        return 'Text: Contains';\n      case RuleType.TEXTEQUALS:\n        return 'Text: Equals';\n      case RuleType.JSONPATH:\n        return 'JSON: Path';\n      case RuleType.JSONEQUALITY:\n        return 'JSON: Equality';\n      case RuleType.JSONCONTAINS:\n        return 'JSON: Contains';\n      case RuleType.JSONSCHEMA:\n        return 'JSON: Schema';\n      case RuleType.ACCEPTALL:\n        return 'Accept All';\n      default: {\n        // Cause a type-check error if a case is missed\n        const _: never = ruleType;\n        return 'Invalid Rule';\n      }\n    }\n  }\n}\n"
        },
        {
            "name": "GetStringErrorsPipe",
            "id": "pipe-GetStringErrorsPipe-7579db993862cb6413a9ca950b7c733d821ea86397608bd66912d104ac7e42bd1521d638a4668c664851e3360e74f9c8cfcee6b6afd1938de8cdb48216a2b436",
            "file": "src/app/shared/pipes/get-string-errors/get-string-errors.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "errors",
                            "type": "ValidationErrors",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "string[]",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nConverts a Validation Error object into an array of strings where each string is a validation error message.\nNote: only errors with string values are included, others, i.e. boolean errors are ignored.\n",
                    "description": "<p>Converts a Validation Error object into an array of strings where each string is a validation error message.\nNote: only errors with string values are included, others, i.e. boolean errors are ignored.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 432,
                                "end": 438,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "errors"
                            },
                            "type": "ValidationErrors",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "pos": 426,
                                "end": 431,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>The ValidationErrors object</p>\n"
                        }
                    ]
                }
            ],
            "ngname": "getStringErrors",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\nimport { ValidationErrors } from '@angular/forms';\n\n@Pipe({\n  name: 'getStringErrors',\n})\nexport class GetStringErrorsPipe implements PipeTransform {\n  /**\n   * Converts a Validation Error object into an array of strings where each string is a validation error message.\n   * Note: only errors with string values are included, others, i.e. boolean errors are ignored.\n   * @param errors The ValidationErrors object\n   */\n  transform(errors?: ValidationErrors): string[] {\n    return Object.values(errors ?? {}).filter((x: unknown): x is string => typeof x === 'string');\n  }\n}\n"
        },
        {
            "name": "GetVerbColorPipe",
            "id": "pipe-GetVerbColorPipe-43c7c0bd7bea3a09a8fbd5cb8d6d70f66308d3e1e9ca9615c0ea1463b879189b30c1982680247b8d37f34373d423b6cce6c28a28eedb8c50e2742314d9293713",
            "file": "src/app/pipes/get-verb-color/get-verb-color.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [
                {
                    "name": "blue",
                    "defaultValue": "'rgba(0, 163, 255, 0.25)'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        144
                    ]
                },
                {
                    "name": "green",
                    "defaultValue": "'rgba(30, 255, 160, 0.25)'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        144
                    ]
                },
                {
                    "name": "notSoNavyBlue",
                    "defaultValue": "'rgba(30,144,255 ,1)'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        144
                    ]
                },
                {
                    "name": "orange",
                    "defaultValue": "'rgba(255, 165, 0, 0.25)'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        144
                    ]
                },
                {
                    "name": "purple",
                    "defaultValue": "'rgba(82, 0, 255, 0.25)'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        144
                    ]
                },
                {
                    "name": "red",
                    "defaultValue": "'rgba(255, 0, 0, 0.25)'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        144
                    ]
                },
                {
                    "name": "turquoise",
                    "defaultValue": "'rgba(64,224,208 ,1 )'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        144
                    ]
                },
                {
                    "name": "yellow",
                    "defaultValue": "'rgba(250, 255, 0, 0.25)'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        144
                    ]
                }
            ],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "verb",
                            "type": "VerbType",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "prefix",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "''"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nReturns a string containing the appropriate bootstrap color\nclass for the verb type. If a prefix string is passed into the parameters\nthen the pipe will prefix the color string with the prefix string.\ncolor string with the passed in string\n",
                    "description": "<p>Returns a string containing the appropriate bootstrap color\nclass for the verb type. If a prefix string is passed into the parameters\nthen the pipe will prefix the color string with the prefix string.\ncolor string with the passed in string</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 867,
                                "end": 871,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "verb"
                            },
                            "type": "VerbType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 861,
                                "end": 866,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>The verb whose color we are trying to get</p>\n"
                        },
                        {
                            "name": {
                                "pos": 926,
                                "end": 932,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "prefix"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "''",
                            "tagName": {
                                "pos": 920,
                                "end": 925,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>An optional argument that prefixes the verbs\ncolor string with the passed in string</p>\n"
                        }
                    ]
                }
            ],
            "ngname": "getVerbColor",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\nimport { VerbType } from '../../models/verb-type';\n\n@Pipe({\n  name: 'getVerbColor',\n})\nexport class GetVerbColorPipe implements PipeTransform {\n  readonly blue: string = 'rgba(0, 163, 255, 0.25)';\n  readonly green: string = 'rgba(30, 255, 160, 0.25)';\n  readonly red: string = 'rgba(255, 0, 0, 0.25)';\n  readonly yellow: string = 'rgba(250, 255, 0, 0.25)';\n  readonly orange: string = 'rgba(255, 165, 0, 0.25)';\n  readonly purple: string = 'rgba(82, 0, 255, 0.25)';\n  readonly turquoise: string = 'rgba(64,224,208 ,1 )';\n  readonly notSoNavyBlue: string = 'rgba(30,144,255 ,1)';\n\n  /**\n   * Returns a string containing the appropriate bootstrap color\n   * class for the verb type. If a prefix string is passed into the parameters\n   * then the pipe will prefix the color string with the prefix string.\n   * @param verb The verb whose color we are trying to get\n   * @param prefix An optional argument that prefixes the verbs\n   * color string with the passed in string\n   */\n  transform(verb: VerbType, prefix = ''): string {\n    switch (verb) {\n      case VerbType.DELETE:\n        return prefix + this.red;\n      case VerbType.GET:\n        return prefix + this.blue;\n      case VerbType.POST:\n        return prefix + this.green;\n      case VerbType.PUT:\n        return prefix + this.yellow;\n      case VerbType.HEAD:\n        return prefix + this.purple;\n      case VerbType.OPTIONS:\n        return prefix + this.notSoNavyBlue;\n      case VerbType.PATCH:\n        return prefix + this.turquoise;\n      case VerbType.CONNECT:\n      case VerbType.CUSTOM:\n      case VerbType.NONE:\n      case VerbType.TRACE:\n        return prefix;\n      default: {\n        // Cause a type-check error if a case is missed\n        const _: never = verb;\n      }\n    }\n  }\n}\n"
        },
        {
            "name": "GetVerbStringPipe",
            "id": "pipe-GetVerbStringPipe-8dd4b4e40f99058a6c2c0828a37f953eb13b9b01ef5262190fdfa386c339e5d6f985fd2fafa44483338df1a3eb81e771350dfe449fca216ec3887699d13fcb69",
            "file": "src/app/pipes/get-verb-string/get-verb-string.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "verb",
                            "type": "VerbType",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nTakes in a verbTypes and outputs the corresponding verb as a string\n",
                    "description": "<p>Takes in a verbTypes and outputs the corresponding verb as a string</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 292,
                                "end": 296,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "verb"
                            },
                            "type": "VerbType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 286,
                                "end": 291,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>The verbType to be piped in</p>\n"
                        }
                    ]
                }
            ],
            "ngname": "getVerbString",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\nimport { VerbType } from 'src/app/models/verb-type';\n\n@Pipe({\n  name: 'getVerbString',\n})\nexport class GetVerbStringPipe implements PipeTransform {\n  /**\n   * Takes in a verbTypes and outputs the corresponding verb as a string\n   * @param verb The verbType to be piped in\n   */\n  transform(verb: VerbType): string {\n    switch (verb) {\n      case VerbType.DELETE:\n        return 'DELETE';\n      case VerbType.GET:\n        return 'GET';\n      case VerbType.POST:\n        return 'POST';\n      case VerbType.PUT:\n        return 'PUT';\n      case VerbType.HEAD:\n        return 'HEAD';\n      case VerbType.OPTIONS:\n        return 'OPTIONS';\n      case VerbType.PATCH:\n        return 'PATCH';\n      case VerbType.CONNECT:\n        return 'CONNECT';\n      case VerbType.CUSTOM:\n        return 'CUSTOM';\n      case VerbType.NONE:\n        return 'NONE';\n      case VerbType.TRACE:\n        return 'TRACE';\n      default: {\n        // Cause a type-check error if a case is missed\n        const _: never = verb;\n      }\n    }\n  }\n}\n"
        }
    ],
    "interfaces": [
        {
            "name": "BodyRule",
            "id": "interface-BodyRule-6f2846de1b6d7f6aee40cbf0eb7d38badc9c758c0ac8a7131e1c5a67e3ffa3a2a38949638e286adb748b987f9567d5709dce962b2c60279adebf8b60e9094141",
            "file": "src/app/models/mock-definition/scenario/body-rule.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { RuleType } from './rule-type';\n\n/**\n * Model representation of body matching rule\n */\nexport interface BodyRule {\n  type: RuleType;\n  value: string;\n}\n\nexport const defaultBodyRule: BodyRule = {\n  type: RuleType.JSONCONTAINS,\n  value: '',\n};\n",
            "properties": [
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "RuleType",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "description": "<p>Model representation of body matching rule</p>\n",
            "rawdescription": "\n\nModel representation of body matching rule\n",
            "methods": []
        },
        {
            "name": "BodyRuleItemFormValues",
            "id": "interface-BodyRuleItemFormValues-6b4dc1332b641f62ca7c87bfae9f002d36d1b3151197053dedeecbb0ae87be0b332d8c917588785f3c5a0bfaaab396f2b5a774a355f8d78f2105db82bc0693ee",
            "file": "src/app/components/scenario-editor/body-rule-form/body-rule-item-form/body-rule-item-form.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, EventEmitter, Input, OnDestroy, OnInit, Output, ViewChild, forwardRef } from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport {\n  ControlValueAccessor,\n  FormBuilder,\n  FormControl,\n  FormGroup,\n  NG_VALIDATORS,\n  NG_VALUE_ACCESSOR,\n  ValidationErrors,\n  Validator,\n  Validators,\n} from '@angular/forms';\nimport { RuleType } from 'src/app/models/mock-definition/scenario/rule-type';\nimport { JsonEditorComponent, JsonEditorOptions } from 'ang-jsoneditor';\nimport { ValidJsonService } from 'src/app/services/valid-json/valid-json.service';\nimport {\n  BodyRuleType,\n  InternalBodyRuleItemFormValues,\n  InternalRuleType,\n  JsonRuleCondition,\n  TextRuleCondition,\n} from './body-rule-item-form.types';\n\nexport interface BodyRuleItemFormValues {\n  type: RuleType;\n  value: string;\n}\n\n@Component({\n  selector: 'app-body-rule-item-form',\n  templateUrl: './body-rule-item-form.component.html',\n  styleUrls: ['./body-rule-item-form.component.scss'],\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => BodyRuleItemFormComponent),\n      multi: true,\n    },\n    {\n      provide: NG_VALIDATORS,\n      useExisting: forwardRef(() => BodyRuleItemFormComponent),\n      multi: true,\n    },\n  ],\n})\nexport class BodyRuleItemFormComponent implements ControlValueAccessor, Validator, OnInit, OnDestroy {\n  form: FormGroup;\n\n  get ruleType(): FormControl {\n    // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n    return this.form.get('ruleType') as FormControl;\n  }\n\n  get ruleCondition(): FormControl {\n    // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n    return this.form.get('ruleCondition') as FormControl;\n  }\n\n  get value(): FormControl {\n    // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n    return this.form.get('value') as FormControl;\n  }\n\n  @Output() readonly addItemEvent = new EventEmitter<BodyRuleItemFormValues>();\n  @Output() readonly removeItemEvent = new EventEmitter<void>();\n\n  @Input() readonly title = '';\n  @Input() readonly errors: string[] = [];\n  @Input() mode: 'view' | 'edit' = 'view';\n  @Input() readonly itemIsDuplicatedEvent = new EventEmitter<boolean>();\n  @Input() readonly pathMaxLength = 3000;\n\n  readonly ruleTypes = [\n    { value: BodyRuleType.TEXT, label: 'Text' },\n    { value: BodyRuleType.JSON, label: 'JSON' },\n  ];\n  BodyRuleType = BodyRuleType;\n\n  readonly textRuleConditions = [\n    { value: TextRuleCondition.STARTS_WITH, label: 'Starts With' },\n    { value: TextRuleCondition.ENDS_WITH, label: 'Ends With' },\n    { value: TextRuleCondition.EQUALS, label: 'Equals' },\n    { value: TextRuleCondition.CONTAINS, label: 'Contains' },\n  ];\n\n  readonly jsonRuleConditions = [\n    { value: JsonRuleCondition.CONTAINS, label: 'Contains' },\n    { value: JsonRuleCondition.EQUALITY, label: 'Equality' },\n    { value: JsonRuleCondition.PATH, label: 'Path' },\n    { value: JsonRuleCondition.SCHEMA, label: 'Schema' },\n  ];\n\n  currentMatchConditions: { value: number; label: string }[] = [];\n\n  valueEditorOptions = new JsonEditorOptions();\n  initValueData = {};\n  valueDataWasFocused = false;\n  @ViewChild(JsonEditorComponent, { static: false }) valueEditor: JsonEditorComponent;\n\n  defaults: InternalBodyRuleItemFormValues = {\n    ruleType: null,\n    ruleCondition: null,\n    value: '{}',\n  };\n\n  constructor(private formBuilder: FormBuilder) {}\n\n  ngOnInit(): void {\n    this.form = this.formBuilder.group({\n      ruleType: [this.defaults.ruleType, Validators.required],\n      ruleCondition: [{ value: this.defaults.ruleCondition, disabled: true }, Validators.required],\n      value: [this.defaults.value, Validators.required],\n    });\n\n    this.subscriptions.push(\n      this.form.valueChanges.subscribe((value: InternalBodyRuleItemFormValues | null) => {\n        this.onChange.forEach((fn) => fn(this.adaptInternalFormatToExternal(value)));\n        this.onTouched.forEach((fn) => fn());\n      }),\n\n      this.ruleType.valueChanges.subscribe((value: BodyRuleType | null) => {\n        this.setCurrentMatchConditions(value);\n        this.handleValueSetupForType(value);\n      }),\n\n      this.itemIsDuplicatedEvent.subscribe((isDuplicated) => this.handleIsDuplicatedEvent(isDuplicated))\n    );\n\n    this.valueEditorOptions.mode = 'code';\n    this.valueEditorOptions.modes = ['code', 'text'];\n    this.valueEditorOptions.statusBar = true;\n    this.valueEditorOptions.onFocus = () => (this.valueDataWasFocused = true);\n    this.valueEditorOptions.onBlur = () => this.valueDataWasFocused && this.value.markAsTouched();\n    this.valueEditorOptions.onChangeText = (jsonString: string) => {\n      this.value.markAsDirty();\n      this.value.setValue(jsonString);\n    };\n  }\n\n  adaptInternalFormatToExternal(values: InternalBodyRuleItemFormValues | null): BodyRuleItemFormValues | null {\n    return !values ? null : { type: this.getExternalRuleType(values), value: values.value };\n  }\n\n  adaptExternalFormatToInternal(\n    values: Partial<BodyRuleItemFormValues> | null\n  ): Partial<InternalBodyRuleItemFormValues> | null {\n    return !values ? null : { ...this.getInternalRuleType(values.type), value: values.value };\n  }\n\n  handleIsDuplicatedEvent(isDuplicated: boolean) {\n    if (isDuplicated !== this.form.hasError('duplicate')) {\n      if (isDuplicated) {\n        this.form.setErrors({\n          ...(this.form.errors ?? {}),\n          duplicate: 'This item already exists. Duplicates are not allowed.',\n        });\n      } else {\n        const { duplicate: _, ...errors } = this.form.errors;\n        this.form.setErrors(Object.keys(errors).length ? errors : null);\n      }\n    }\n  }\n\n  handleValueSetupForType(bodyRuleType: BodyRuleType | null) {\n    switch (bodyRuleType) {\n      case BodyRuleType.TEXT:\n        this.value.clearValidators();\n        this.value.addValidators(Validators.required);\n        this.value.updateValueAndValidity({ emitEvent: false });\n        break;\n      case BodyRuleType.JSON: {\n        this.value.clearValidators();\n        this.value.addValidators(ValidJsonService.getValidator());\n        const jsonValue = this.safeParseJson(this.value.value ?? this.defaults.value);\n        this.initValueData = jsonValue;\n        this.value.setValue(JSON.stringify(jsonValue), { emitEvent: false });\n        this.value.updateValueAndValidity({ emitEvent: false });\n        break;\n      }\n      case null:\n        break;\n      default: {\n        const _: never = bodyRuleType;\n      }\n    }\n  }\n\n  setCurrentMatchConditions(value: BodyRuleType | null) {\n    const conditionsPreChange = this.currentMatchConditions;\n    switch (value) {\n      case BodyRuleType.TEXT:\n        this.currentMatchConditions = this.textRuleConditions;\n        break;\n      case BodyRuleType.JSON:\n        this.currentMatchConditions = this.jsonRuleConditions;\n        break;\n      case null:\n        this.currentMatchConditions = [];\n        this.ruleCondition.disable({ emitEvent: false });\n        break;\n      default: {\n        const _: never = value;\n      }\n    }\n\n    if (value !== null) {\n      this.ruleCondition.enable({ emitEvent: false });\n    }\n\n    if (this.currentMatchConditions !== conditionsPreChange) {\n      this.ruleCondition.setValue(null, { emitEvent: false });\n    }\n  }\n\n  getTypeText(type: BodyRuleType | null): string {\n    return Object.values(this.ruleTypes).filter((x) => x.value === type)?.[0]?.label ?? ' ';\n  }\n\n  getConditionText(condition: TextRuleCondition | JsonRuleCondition | null): string {\n    const ruleType: BodyRuleType = this.ruleType.value;\n    switch (ruleType) {\n      case BodyRuleType.TEXT:\n        return Object.values(this.textRuleConditions).filter((x) => x.value === condition)?.[0]?.label ?? ' ';\n      case BodyRuleType.JSON:\n        return Object.values(this.jsonRuleConditions).filter((x) => x.value === condition)?.[0]?.label ?? ' ';\n      default: {\n        const _: never = ruleType;\n        return ' ';\n      }\n    }\n  }\n\n  saveItem() {\n    this.mode = 'view';\n    this.initValueData = this.safeParseJson(this.value.value ?? this.defaults.value);\n  }\n\n  editItem() {\n    this.mode = 'edit';\n  }\n\n  removeItem() {\n    this.removeItemEvent.emit();\n  }\n\n  validate(_: FormControl): ValidationErrors | null {\n    return this.form.valid ? null : { body_rule_item: true };\n  }\n\n  setDisabledState(isDisabled: boolean): void {\n    isDisabled ? this.form.disable() : this.form.enable();\n  }\n\n  writeValue(value?: Partial<BodyRuleItemFormValues> | null): void {\n    if (value === null || value === undefined) {\n      this.form.reset(this.defaults, { emitEvent: false });\n    } else {\n      const int_value = this.adaptExternalFormatToInternal(value);\n      this.setCurrentMatchConditions(int_value.ruleType);\n      this.handleValueSetupForType(int_value.ruleType);\n      this.form.patchValue(int_value, { emitEvent: false });\n    }\n    this.initValueData = this.safeParseJson(this.value.value ?? this.defaults.value);\n    this.onValidationChange.forEach((fn) => fn());\n  }\n\n  safeParseJson(json: string): object {\n    try {\n      return JSON.parse(json);\n    } catch (e) {\n      return {};\n    }\n  }\n\n  static buildForm(item: Partial<BodyRuleItemFormValues>): FormGroup {\n    // Note: this form only needs the structure to propagate values, no functionality required\n    const fb = new FormBuilder();\n    const schema: BodyRuleItemFormValues = {\n      type: item.type ?? null,\n      value: item.value ?? null,\n    };\n    return fb.group(schema);\n  }\n\n  getExternalRuleType(rule: Partial<InternalBodyRuleItemFormValues> | null): RuleType {\n    switch (rule?.ruleType) {\n      case BodyRuleType.TEXT:\n        switch (rule?.ruleCondition) {\n          case TextRuleCondition.CONTAINS:\n            return RuleType.TEXTCONTAINS;\n          case TextRuleCondition.EQUALS:\n            return RuleType.TEXTEQUALS;\n          case TextRuleCondition.STARTS_WITH:\n            return RuleType.TEXTSTARTSWITH;\n          case TextRuleCondition.ENDS_WITH:\n            return RuleType.TEXTENDSWITH;\n          default: {\n            const _: never = rule;\n          }\n        }\n        break;\n      case BodyRuleType.JSON:\n        switch (rule?.ruleCondition) {\n          case JsonRuleCondition.CONTAINS:\n            return RuleType.JSONCONTAINS;\n          case JsonRuleCondition.EQUALITY:\n            return RuleType.JSONEQUALITY;\n          case JsonRuleCondition.PATH:\n            return RuleType.JSONPATH;\n          case JsonRuleCondition.SCHEMA:\n            return RuleType.JSONSCHEMA;\n          default: {\n            const _: never = rule;\n          }\n        }\n        break;\n      default: {\n        const _: never = rule;\n      }\n    }\n    return null;\n  }\n\n  getInternalRuleType(type: RuleType): InternalRuleType {\n    switch (type) {\n      case RuleType.NONE:\n      case RuleType.REGEX:\n      case RuleType.ACCEPTALL:\n      case RuleType.JSONCONTAINS:\n        return { ruleType: BodyRuleType.JSON, ruleCondition: JsonRuleCondition.CONTAINS };\n      case RuleType.JSONEQUALITY:\n        return { ruleType: BodyRuleType.JSON, ruleCondition: JsonRuleCondition.EQUALITY };\n      case RuleType.JSONPATH:\n        return { ruleType: BodyRuleType.JSON, ruleCondition: JsonRuleCondition.PATH };\n      case RuleType.JSONSCHEMA:\n        return { ruleType: BodyRuleType.JSON, ruleCondition: JsonRuleCondition.SCHEMA };\n      case RuleType.TEXTCONTAINS:\n        return { ruleType: BodyRuleType.TEXT, ruleCondition: TextRuleCondition.CONTAINS };\n      case RuleType.TEXTEQUALS:\n        return { ruleType: BodyRuleType.TEXT, ruleCondition: TextRuleCondition.EQUALS };\n      case RuleType.TEXTSTARTSWITH:\n        return { ruleType: BodyRuleType.TEXT, ruleCondition: TextRuleCondition.STARTS_WITH };\n      case RuleType.TEXTENDSWITH:\n        return { ruleType: BodyRuleType.TEXT, ruleCondition: TextRuleCondition.ENDS_WITH };\n      default: {\n        const _: never = type;\n      }\n    }\n  }\n\n  /*\n   * Boilerplate Code Below Here\n   */\n\n  private readonly subscriptions: Subscription[] = [];\n\n  ngOnDestroy(): void {\n    this.subscriptions.forEach((s) => s.unsubscribe());\n  }\n\n  readonly onChange: Array<(value: BodyRuleItemFormValues) => void> = [];\n  readonly onTouched: Array<() => void> = [];\n  readonly onValidationChange: Array<() => void> = [];\n\n  registerOnChange(fn: (value: BodyRuleItemFormValues) => void): void {\n    this.onChange.push(fn);\n  }\n\n  registerOnTouched(fn: () => void): void {\n    this.onTouched.push(fn);\n  }\n\n  registerOnValidatorChange(fn: () => void): void {\n    this.onValidationChange.push(fn);\n  }\n}\n",
            "properties": [
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "RuleType",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 27
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "DelayResponsePolicy",
            "id": "interface-DelayResponsePolicy-3e3b83cd11516a81f511fc15337eb4fb11830e9e3d5b0724dc82de75b2ae15d4766b2852d43c14a59f22186c0abeeda53928889e11883ed7084f3d3e45d8e49a",
            "file": "src/app/models/mock-definition/scenario/policy.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { PolicyType } from './policy-type';\n\nexport interface NonePolicy {\n  type: PolicyType.NONE;\n}\n\nexport interface DelayResponsePolicy {\n  type: PolicyType.DELAY_RESPONSE;\n  value: number;\n}\n\nexport type Policy = DelayResponsePolicy | NonePolicy;\n\nexport const defaultPolicy: Policy = {\n  type: PolicyType.NONE,\n};\n",
            "properties": [
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PolicyType.DELAY_RESPONSE",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "Endpoint",
            "id": "interface-Endpoint-3b9b0bc8bb2e1dd7cdf8ef4f68b3b1bc2b46a848f20b899df396646e2b84b27daa8f70821b7de31ea4cf5b39fe322b4cbf266b9b3fef90e1e8583f2f550c4a64",
            "file": "src/app/models/endpoint.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { OpenAPIV2 } from 'openapi-types';\nimport { VerbType } from './verb-type';\n\n/**\n * Model representation of an endpoint\n */\nexport interface Endpoint {\n  path: string;\n  verb: VerbType;\n  spec: OpenAPIV2.OperationObject;\n}\n",
            "properties": [
                {
                    "name": "path",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "spec",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "OpenAPIV2.OperationObject",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "verb",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "VerbType",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "description": "<p>Model representation of an endpoint</p>\n",
            "rawdescription": "\n\nModel representation of an endpoint\n",
            "methods": []
        },
        {
            "name": "InternalResponseFormValues",
            "id": "interface-InternalResponseFormValues-d3a420ebdd23829a907d2400d6eb4bf68e796c56180f782145e32b899467b1c8b31958e38f29550dcab7064c369c8cc1969bb18669b061cf04f602f0de54c583",
            "file": "src/app/components/scenario-editor/response-form/response-form.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, OnDestroy, OnInit, forwardRef } from '@angular/core';\nimport { ValidJsonService } from 'src/app/services/valid-json/valid-json.service';\nimport HttpStatusCodes, { StatusCodes } from 'http-status-codes';\nimport {\n  AbstractControl,\n  ControlValueAccessor,\n  FormBuilder,\n  FormControl,\n  FormGroup,\n  NG_VALIDATORS,\n  NG_VALUE_ACCESSOR,\n  ValidationErrors,\n  Validator,\n  Validators,\n} from '@angular/forms';\nimport { Subscription } from 'rxjs';\nimport { ResponseType } from 'src/app/models/mock-definition/scenario/response-type';\nimport { JsonEditorOptions } from 'ang-jsoneditor';\nimport { KeyValuePairFormValues } from 'src/app/shared/components/key-value-pair-form/key-value-pair-form.component';\n\nexport interface ResponseFormValues {\n  type: ResponseType;\n  status: number;\n  headers: Record<string, string>;\n  body: string;\n}\n\nexport interface InternalResponseFormValues {\n  type: ResponseType;\n  status: number;\n  headers: KeyValuePairFormValues;\n  body: string;\n}\n\n@Component({\n  selector: 'app-response-form',\n  templateUrl: './response-form.component.html',\n  styleUrls: ['./response-form.component.scss'],\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => ResponseFormComponent),\n      multi: true,\n    },\n    {\n      provide: NG_VALIDATORS,\n      useExisting: forwardRef(() => ResponseFormComponent),\n      multi: true,\n    },\n  ],\n})\nexport class ResponseFormComponent implements ControlValueAccessor, Validator, OnInit, OnDestroy {\n  form: FormGroup;\n\n  get type(): FormControl {\n    // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n    return this.form.get('type') as FormControl;\n  }\n  get status(): FormControl {\n    // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n    return this.form.get('status') as FormControl;\n  }\n  get headers(): FormControl {\n    // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n    return this.form.get('headers') as FormControl;\n  }\n  get body(): FormControl {\n    // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n    return this.form.get('body') as FormControl;\n  }\n\n  readonly responseTypes = [\n    { value: ResponseType.CUSTOM, label: 'Custom' },\n    { value: ResponseType.TEMPLATED, label: 'Templated' },\n  ];\n\n  bodyEditorOptions = new JsonEditorOptions();\n\n  defaults: InternalResponseFormValues = {\n    type: ResponseType.CUSTOM,\n    status: StatusCodes.OK,\n    headers: [],\n    body: '{}',\n  };\n\n  initBodyData = {};\n  bodyDataWasFocused = false;\n\n  constructor(private formBuilder: FormBuilder) {}\n\n  ngOnInit(): void {\n    this.form = this.formBuilder.group({\n      type: [this.defaults.type, Validators.required],\n      status: [this.defaults.status, [Validators.required, ResponseFormComponent.statusCodeValidator]],\n      headers: this.defaults.headers,\n      body: [this.defaults.body, [ValidJsonService.getValidator(false)]],\n    });\n\n    this.subscriptions.push(\n      this.form.valueChanges.subscribe((value: InternalResponseFormValues | null) => {\n        this.onChange.forEach((fn) => fn(this.adaptInternalFormatToExternal(value)));\n        this.onTouched.forEach((fn) => fn());\n      })\n    );\n\n    this.bodyEditorOptions.mode = 'code';\n    this.bodyEditorOptions.modes = ['code', 'text'];\n    this.bodyEditorOptions.statusBar = true;\n    this.bodyEditorOptions.onFocus = () => (this.bodyDataWasFocused = true);\n    this.bodyEditorOptions.onBlur = () => this.bodyDataWasFocused && this.body.markAsTouched();\n    this.bodyEditorOptions.onChangeText = (jsonString: string) => {\n      this.body.markAsDirty();\n      this.body.setValue(jsonString);\n    };\n  }\n\n  adaptInternalFormatToExternal(values: InternalResponseFormValues | null): ResponseFormValues | null {\n    return !values\n      ? null\n      : {\n          ...values,\n          headers: values.headers.reduce((out, { key, value }) => ({ ...out, [key]: value }), {}),\n        };\n  }\n\n  adaptExternalFormatToInternal(\n    values: Partial<ResponseFormValues> | null\n  ): Partial<InternalResponseFormValues> | null {\n    return !values\n      ? null\n      : {\n          ...values,\n          headers: !values.headers ? undefined : Object.entries(values.headers).map(([key, value]) => ({ key, value })),\n        };\n  }\n\n  setDisabledState(isDisabled: boolean): void {\n    isDisabled ? this.form.disable() : this.form.enable();\n  }\n\n  writeValue(value?: Partial<ResponseFormValues> | null): void {\n    if (value === null || value === undefined) {\n      this.form.reset(this.defaults, { emitEvent: false });\n    } else {\n      this.form.patchValue(this.adaptExternalFormatToInternal(value), { emitEvent: false });\n    }\n    this.initBodyData = this.safeParseJson(this.body.value);\n  }\n\n  safeParseJson(json: string): object {\n    try {\n      return JSON.parse(json);\n    } catch (e) {\n      return {};\n    }\n  }\n\n  getStatusDescription(code: number | null): string {\n    if (code === null) {\n      return 'Enter a Status Code';\n    }\n    try {\n      return HttpStatusCodes.getStatusText(Number(code));\n    } catch (e: unknown) {\n      return '';\n    }\n  }\n\n  static statusCodeValidator(control: AbstractControl): ValidationErrors | null {\n    try {\n      if (control.value !== null && control.value.toString() !== '') {\n        HttpStatusCodes.getStatusText(control.value);\n      }\n    } catch (e: unknown) {\n      return { invalid: 'Invalid Status Code' };\n    }\n    return null;\n  }\n\n  /*\n   * Boilerplate Code Below Here\n   */\n\n  validate(_: FormControl): ValidationErrors | null {\n    return this.form.valid ? null : { response: true };\n  }\n\n  private readonly subscriptions: Subscription[] = [];\n\n  ngOnDestroy(): void {\n    this.subscriptions.forEach((s) => s.unsubscribe());\n  }\n\n  readonly onChange: Array<(value: ResponseFormValues) => void> = [];\n  readonly onTouched: Array<() => void> = [];\n\n  registerOnChange(fn: (value: ResponseFormValues) => void): void {\n    this.onChange.push(fn);\n  }\n\n  registerOnTouched(fn: () => void): void {\n    this.onTouched.push(fn);\n  }\n}\n",
            "properties": [
                {
                    "name": "body",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "headers",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "KeyValuePairFormValues",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "status",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ResponseType",
                    "optional": false,
                    "description": "",
                    "line": 29
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "JsonBodyRule",
            "id": "interface-JsonBodyRule-de1f0c256e176d04a9527a19b81fab30741c042799cb1f29a609701d5c04f7724e8410e1f56cc838e22e476887aa9e31b4a125681aeac2848663bc32f43087d9",
            "file": "src/app/components/scenario-editor/body-rule-form/body-rule-item-form/body-rule-item-form.types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export enum JsonRuleCondition {\n  PATH = 0,\n  EQUALITY,\n  CONTAINS,\n  SCHEMA,\n}\n\nexport enum TextRuleCondition {\n  STARTS_WITH = 0,\n  ENDS_WITH,\n  CONTAINS,\n  EQUALS,\n}\n\nexport enum BodyRuleType {\n  JSON = 1,\n  TEXT,\n}\n\nexport interface JsonBodyRule {\n  ruleType: BodyRuleType.JSON;\n  ruleCondition: JsonRuleCondition;\n  value: string;\n}\n\nexport interface TextBodyRule {\n  ruleType: BodyRuleType.TEXT;\n  ruleCondition: TextRuleCondition;\n  value: string;\n}\n\nexport type InternalRuleType =\n  | Pick<TextBodyRule, 'ruleType' | 'ruleCondition'>\n  | Pick<JsonBodyRule, 'ruleType' | 'ruleCondition'>;\n\nexport type InternalBodyRuleItemFormValues = JsonBodyRule | TextBodyRule;\n",
            "properties": [
                {
                    "name": "ruleCondition",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "JsonRuleCondition",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "ruleType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BodyRuleType.JSON",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 23
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "KeyValuePairItemFormValues",
            "id": "interface-KeyValuePairItemFormValues-1d924693fdadeab3a73ff07813adf611672ab61fcdf794073d1c9a216cba5b49ab6ea299d1e503274f7ffa32dda1b98a72f4472245a5330c727719775a87117f",
            "file": "src/app/shared/components/key-value-pair-form/key-value-pair-item-form/key-value-pair-item-form.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, EventEmitter, Input, OnDestroy, OnInit, Output, forwardRef } from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport {\n  ControlValueAccessor,\n  FormBuilder,\n  FormControl,\n  FormGroup,\n  NG_VALIDATORS,\n  NG_VALUE_ACCESSOR,\n  ValidationErrors,\n  Validator,\n  Validators,\n} from '@angular/forms';\n\nexport interface KeyValuePairItemFormValues {\n  key: string;\n  value: string;\n}\n\n@Component({\n  selector: 'app-key-value-pair-item-form',\n  templateUrl: './key-value-pair-item-form.component.html',\n  styleUrls: ['./key-value-pair-item-form.component.scss'],\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => KeyValuePairItemFormComponent),\n      multi: true,\n    },\n    {\n      provide: NG_VALIDATORS,\n      useExisting: forwardRef(() => KeyValuePairItemFormComponent),\n      multi: true,\n    },\n  ],\n})\nexport class KeyValuePairItemFormComponent implements ControlValueAccessor, Validator, OnInit, OnDestroy {\n  form: FormGroup;\n\n  get key(): FormControl {\n    // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n    return this.form.get('key') as FormControl;\n  }\n  get value(): FormControl {\n    // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n    return this.form.get('value') as FormControl;\n  }\n\n  @Output() readonly addItemEvent = new EventEmitter<KeyValuePairItemFormValues>();\n  @Output() readonly removeItemEvent = new EventEmitter<void>();\n\n  @Input() readonly title = '';\n  @Input() readonly errors: string[] = [];\n  @Input() readonly mode: 'add' | 'edit' = 'edit';\n  @Input() readonly itemIsDuplicatedEvent = new EventEmitter<boolean>();\n\n  constructor(private formBuilder: FormBuilder) {}\n\n  ngOnInit(): void {\n    this.form = this.formBuilder.group({\n      key: [null, Validators.required],\n      value: [null, Validators.required],\n    });\n\n    this.subscriptions.push(\n      this.form.valueChanges.subscribe((value: KeyValuePairItemFormValues | null) => {\n        this.onChange.forEach((fn) => fn(value));\n        this.onTouched.forEach((fn) => fn());\n      }),\n\n      this.itemIsDuplicatedEvent.subscribe((isDuplicated) => this.handleIsDuplicatedEvent(isDuplicated))\n    );\n  }\n\n  handleIsDuplicatedEvent(isDuplicated: boolean) {\n    if (isDuplicated !== this.form.hasError('duplicate')) {\n      if (isDuplicated) {\n        this.form.setErrors({\n          ...(this.form.errors ?? {}),\n          duplicate: 'This item already exists. Duplicates are not allowed.',\n        });\n      } else {\n        const { duplicate: _, ...errors } = this.form.errors;\n        this.form.setErrors(Object.keys(errors).length ? errors : null);\n      }\n    }\n  }\n\n  addItem() {\n    if (this.form.valid) {\n      this.addItemEvent.emit(this.form.value);\n    }\n  }\n\n  removeItem() {\n    this.removeItemEvent.emit();\n  }\n\n  setDisabledState(isDisabled: boolean): void {\n    isDisabled ? this.form.disable() : this.form.enable();\n  }\n\n  writeValue(value?: Partial<KeyValuePairItemFormValues> | null): void {\n    if (value === null || value === undefined) {\n      this.form.reset({ value: null }, { emitEvent: false });\n    } else {\n      this.form.patchValue(value, { emitEvent: false });\n    }\n  }\n\n  static buildForm(item: Partial<KeyValuePairItemFormValues>): FormGroup {\n    // Note: this forms only needs the structure to propagate values, no functionality required\n    const fb = new FormBuilder();\n    return fb.group({ key: item.key ?? null, value: item.value ?? null });\n  }\n\n  /*\n   * Boilerplate Code Below Here\n   */\n\n  validate(_: FormControl): ValidationErrors | null {\n    return this.form.valid ? null : { key_value_pair_item: true };\n  }\n\n  private subscriptions: Subscription[] = [];\n\n  ngOnDestroy(): void {\n    this.subscriptions.forEach((s) => s.unsubscribe());\n  }\n\n  readonly onChange: Array<(value: KeyValuePairItemFormValues) => void> = [];\n  readonly onTouched: Array<() => void> = [];\n\n  registerOnChange(fn: (value: KeyValuePairItemFormValues) => void): void {\n    this.onChange.push(fn);\n  }\n\n  registerOnTouched(fn: () => void): void {\n    this.onTouched.push(fn);\n  }\n}\n",
            "properties": [
                {
                    "name": "key",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 17
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "KeyValueRule",
            "id": "interface-KeyValueRule-b25a1573e0faf9c8d37299144333629373d5e5bac2afef9d1628ed8b352a7fb9fca4b305eb2b87626d3f80c31bd91ddfc3204f8b80d203b1b9219fd44232ece3",
            "file": "src/app/models/mock-definition/scenario/key-value-rule.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { RuleType } from './rule-type';\n\n/**\n * Model representation of KeyValue pair matching rule\n */\nexport interface KeyValueRule {\n  type: RuleType;\n  key: string;\n  value: string;\n}\n",
            "properties": [
                {
                    "name": "key",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "RuleType",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "description": "<p>Model representation of KeyValue pair matching rule</p>\n",
            "rawdescription": "\n\nModel representation of KeyValue pair matching rule\n",
            "methods": []
        },
        {
            "name": "KeyValueRuleItemFormValues",
            "id": "interface-KeyValueRuleItemFormValues-e05143b7c2c83b54e746eb6a5126c7f784f99e8fed59bfc59375b55a8b84574d3c6103905c0693a9c1c4c4ad35a0614b526ff4b301d41add73476e1b77b0944e",
            "file": "src/app/shared/components/key-value-rule-form/key-value-rule-item-form/key-value-rule-item-form.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {\n  Component,\n  EventEmitter,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Output,\n  SimpleChanges,\n  forwardRef,\n} from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport {\n  AbstractControl,\n  ControlValueAccessor,\n  FormBuilder,\n  FormControl,\n  FormGroup,\n  NG_VALIDATORS,\n  NG_VALUE_ACCESSOR,\n  ValidationErrors,\n  Validator,\n  Validators,\n} from '@angular/forms';\nimport { RuleType } from 'src/app/models/mock-definition/scenario/rule-type';\n\nexport interface KeyValueRuleItemFormValues {\n  key: string;\n  value: string;\n  type: RuleType;\n}\n\n@Component({\n  selector: 'app-key-value-rule-item-form',\n  templateUrl: './key-value-rule-item-form.component.html',\n  styleUrls: ['./key-value-rule-item-form.component.scss'],\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => KeyValueRuleItemFormComponent),\n      multi: true,\n    },\n    {\n      provide: NG_VALIDATORS,\n      useExisting: forwardRef(() => KeyValueRuleItemFormComponent),\n      multi: true,\n    },\n  ],\n})\nexport class KeyValueRuleItemFormComponent implements ControlValueAccessor, Validator, OnInit, OnChanges, OnDestroy {\n  form: FormGroup;\n\n  get key(): FormControl {\n    // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n    return this.form.get('key') as FormControl;\n  }\n  get value(): FormControl {\n    // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n    return this.form.get('value') as FormControl;\n  }\n  get type(): FormControl {\n    // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n    return this.form.get('type') as FormControl;\n  }\n\n  @Output() addItemEvent = new EventEmitter<KeyValueRuleItemFormValues>();\n  @Output() removeItemEvent = new EventEmitter<void>();\n\n  @Input() readonly title = '';\n  @Input() readonly errors: string[] = [];\n  @Input() mode: 'add' | 'edit' = 'edit';\n  @Input() readonly itemIsDuplicatedEvent = new EventEmitter<boolean>();\n  @Input() readonly keyMaxLength = 200;\n  @Input() readonly valueMaxLength = 3000;\n  @Input() allowKeyWhitespace = false;\n\n  readonly ruleTypes = [\n    { value: RuleType.REGEX, label: 'Matches Regex' },\n    { value: RuleType.TEXTSTARTSWITH, label: 'Starts With' },\n    { value: RuleType.TEXTENDSWITH, label: 'Ends With' },\n    { value: RuleType.TEXTCONTAINS, label: 'Contains' },\n    { value: RuleType.TEXTEQUALS, label: 'Equals' },\n  ];\n\n  constructor(private formBuilder: FormBuilder) {}\n\n  ngOnInit(): void {\n    this.form = this.formBuilder.group({\n      key: [null, [Validators.required, KeyValueRuleItemFormComponent.noWhiteSpaceValidator]],\n      value: [null, [Validators.required]],\n      type: [null, Validators.required],\n    });\n\n    this.subscriptions.push(\n      this.form.valueChanges.subscribe((value: KeyValueRuleItemFormValues | null) => {\n        this.onChange.forEach((fn) => fn(value));\n        this.onTouched.forEach((fn) => fn());\n      }),\n\n      this.itemIsDuplicatedEvent.subscribe((isDuplicated) => this.handleIsDuplicatedEvent(isDuplicated))\n    );\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.allowKeyWhitespace && !changes.allowKeyWhitespace.firstChange) {\n      if (changes.allowKeyWhitespace.currentValue) {\n        this.key.removeValidators(KeyValueRuleItemFormComponent.noWhiteSpaceValidator);\n      } else {\n        this.key.addValidators(KeyValueRuleItemFormComponent.noWhiteSpaceValidator);\n      }\n    }\n  }\n\n  handleIsDuplicatedEvent(isDuplicated: boolean) {\n    if (isDuplicated !== this.form.hasError('duplicate')) {\n      if (isDuplicated) {\n        this.form.setErrors({\n          ...(this.form.errors ?? {}),\n          duplicate: 'This item already exists. Duplicates are not allowed.',\n        });\n      } else {\n        const { duplicate: _, ...errors } = this.form.errors;\n        this.form.setErrors(Object.keys(errors).length ? errors : null);\n      }\n    }\n  }\n\n  addItem() {\n    if (this.form.valid) {\n      this.addItemEvent.emit(this.form.value);\n    }\n  }\n\n  removeItem() {\n    this.removeItemEvent.emit();\n  }\n\n  setDisabledState(isDisabled: boolean): void {\n    isDisabled ? this.form.disable() : this.form.enable();\n  }\n\n  writeValue(value?: Partial<KeyValueRuleItemFormValues> | null): void {\n    if (value === null || value === undefined) {\n      this.form.reset({ value: null }, { emitEvent: false });\n    } else {\n      this.form.patchValue(value, { emitEvent: false });\n    }\n  }\n\n  /**\n   * Control validator that disallows whitespace in a string value control\n   * @param control the form control\n   * @returns a ValidationErrors object if the value contains whitespace, otherwise null\n   */\n  static noWhiteSpaceValidator(control: AbstractControl): ValidationErrors | null {\n    return /\\s/.test(control.value) ? { whitespace: 'Cannot contain whitespace' } : null;\n  }\n\n  static buildForm(item: Partial<KeyValueRuleItemFormValues>): FormGroup {\n    // Note: this forms only needs the structure to propagate values, no functionality required\n    const fb = new FormBuilder();\n    return fb.group({ key: item.key ?? null, value: item.value ?? null, type: item.type ?? null });\n  }\n\n  /*\n   * Boilerplate Code Below Here\n   */\n\n  validate(_: FormControl): ValidationErrors | null {\n    return this.form.valid ? null : { key_value_rule_item: true };\n  }\n\n  private readonly subscriptions: Subscription[] = [];\n\n  ngOnDestroy(): void {\n    this.subscriptions.forEach((s) => s.unsubscribe());\n  }\n\n  readonly onChange: Array<(value: KeyValueRuleItemFormValues) => void> = [];\n  readonly onTouched: Array<() => void> = [];\n\n  registerOnChange(fn: (value: KeyValueRuleItemFormValues) => void): void {\n    this.onChange.push(fn);\n  }\n\n  registerOnTouched(fn: () => void): void {\n    this.onTouched.push(fn);\n  }\n}\n",
            "properties": [
                {
                    "name": "key",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "RuleType",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 29
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "Metadata",
            "id": "interface-Metadata-3cc4359e933895d3ef8481809d9010e0ca40504f2dbc1a7a69f78ec0886bdcb1ebf2777acabc75dfbb49b82a66ba46b2d90e8afdb373c9bd68022494b2b80561",
            "file": "src/app/models/mock-definition/metadata.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface Metadata {\n  title: string;\n  description: string;\n}\n\nexport const defaultMetadata: Metadata = {\n  title: '',\n  description: '',\n};\n",
            "properties": [
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "description": "<p>Model representation of mock definition metadata</p>\n",
            "rawdescription": "\n\nModel representation of mock definition metadata\n",
            "methods": []
        },
        {
            "name": "MetadataFormValues",
            "id": "interface-MetadataFormValues-187df9c789ef076d264fb7e0006738fad83c1a6b41b5143d2048fc4f532e86e02db88c047f6f738d189355f395b7691093688349a374498bdb403551952c799c",
            "file": "src/app/components/scenario-editor/metadata-form/metadata-form.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, Input, OnDestroy, OnInit, forwardRef } from '@angular/core';\nimport {\n  AbstractControl,\n  ControlValueAccessor,\n  FormBuilder,\n  FormControl,\n  FormGroup,\n  NG_VALIDATORS,\n  NG_VALUE_ACCESSOR,\n  ValidationErrors,\n  Validator,\n  Validators,\n} from '@angular/forms';\nimport { Subscription } from 'rxjs';\n\nexport interface MetadataFormValues {\n  title: string;\n  description: string;\n}\n\n@Component({\n  selector: 'app-metadata-form',\n  templateUrl: './metadata-form.component.html',\n  styleUrls: ['./metadata-form.component.scss'],\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => MetadataFormComponent),\n      multi: true,\n    },\n    {\n      provide: NG_VALIDATORS,\n      useExisting: forwardRef(() => MetadataFormComponent),\n      multi: true,\n    },\n  ],\n})\nexport class MetadataFormComponent implements ControlValueAccessor, Validator, OnInit, OnDestroy {\n  form: FormGroup;\n\n  @Input() readonly title_maxlength = 50;\n  @Input() readonly description_maxlength = 500;\n\n  get title(): FormControl {\n    // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n    return this.form.get('title') as FormControl;\n  }\n  get description(): FormControl {\n    // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n    return this.form.get('description') as FormControl;\n  }\n\n  constructor(private formBuilder: FormBuilder) {}\n\n  ngOnInit(): void {\n    this.form = this.formBuilder.group({\n      title: [\n        null,\n        [\n          Validators.required,\n          Validators.maxLength(this.title_maxlength),\n          MetadataFormComponent.notOnlyWhiteSpaceValidator,\n        ],\n      ],\n      description: [null, [Validators.maxLength(this.description_maxlength)]],\n    });\n\n    this.subscriptions.push(\n      this.form.valueChanges.subscribe((value: MetadataFormValues | null) => {\n        this.onChange.forEach((fn) => fn(value));\n        this.onTouched.forEach((fn) => fn());\n      })\n    );\n  }\n\n  setDisabledState(isDisabled: boolean): void {\n    isDisabled ? this.form.disable() : this.form.enable();\n  }\n\n  writeValue(value?: Partial<MetadataFormValues> | null): void {\n    if (value === null || value === undefined) {\n      this.form.reset({ value: null }, { emitEvent: false });\n    } else {\n      this.form.patchValue(value, { emitEvent: false });\n    }\n  }\n\n  static notOnlyWhiteSpaceValidator(control: AbstractControl): ValidationErrors | null {\n    if (/^\\s+$/.test(control.value)) {\n      return { whitespace: 'Must contain at least one character that is not a space.' };\n    }\n    return null;\n  }\n\n  /*\n   * Boilerplate Code Below Here\n   */\n\n  validate(_: FormControl): ValidationErrors | null {\n    return this.form.valid ? null : { metadata: true };\n  }\n\n  private readonly subscriptions: Subscription[] = [];\n\n  ngOnDestroy(): void {\n    this.subscriptions.forEach((s) => s.unsubscribe());\n  }\n\n  readonly onChange: Array<(value: MetadataFormValues) => void> = [];\n  readonly onTouched: Array<() => void> = [];\n\n  registerOnChange(fn: (value: MetadataFormValues) => void): void {\n    this.onChange.push(fn);\n  }\n\n  registerOnTouched(fn: () => void): void {\n    this.onTouched.push(fn);\n  }\n}\n",
            "properties": [
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 17
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "MockDefinition",
            "id": "interface-MockDefinition-1f0c14aeaa76a457a94c60a7264e6faada4fbce3a72e8af100dbd11e96e292cd5da6c97218b9e9a3899a0381982a97880fdde15c14b6b2f83170c2466064f9e9",
            "file": "src/app/models/mock-definition/mock-definition.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Metadata, defaultMetadata } from './metadata.model';\nimport { Scenario, emptyScenario } from './scenario/scenario.model';\nimport { OpenAPIV2 } from 'openapi-types';\nimport * as uuid from 'uuid';\n\n/**\n * Model representation of mock definition\n */\nexport interface MockDefinition {\n  id: string;\n  metadata: Metadata;\n  tokenValidation: boolean;\n  host?: string;\n  basePath?: string;\n  scenarios: Scenario[];\n  openApi: OpenAPIV2.Document;\n}\n\nexport const defaultMockDefinition: MockDefinition = {\n  id: uuid.v4(),\n  metadata: defaultMetadata,\n  tokenValidation: false,\n  host: '',\n  basePath: '',\n  scenarios: [emptyScenario],\n  openApi: {\n    info: { title: '', version: '' },\n    paths: {},\n    swagger: '',\n  },\n};\n",
            "properties": [
                {
                    "name": "basePath",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "host",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "metadata",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Metadata",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "openApi",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "OpenAPIV2.Document",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "scenarios",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Scenario[]",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "tokenValidation",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "description": "<p>Model representation of mock definition</p>\n",
            "rawdescription": "\n\nModel representation of mock definition\n",
            "methods": []
        },
        {
            "name": "NonePolicy",
            "id": "interface-NonePolicy-3e3b83cd11516a81f511fc15337eb4fb11830e9e3d5b0724dc82de75b2ae15d4766b2852d43c14a59f22186c0abeeda53928889e11883ed7084f3d3e45d8e49a",
            "file": "src/app/models/mock-definition/scenario/policy.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { PolicyType } from './policy-type';\n\nexport interface NonePolicy {\n  type: PolicyType.NONE;\n}\n\nexport interface DelayResponsePolicy {\n  type: PolicyType.DELAY_RESPONSE;\n  value: number;\n}\n\nexport type Policy = DelayResponsePolicy | NonePolicy;\n\nexport const defaultPolicy: Policy = {\n  type: PolicyType.NONE,\n};\n",
            "properties": [
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PolicyType.NONE",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "RequestFormValues",
            "id": "interface-RequestFormValues-d51df5c52d78501474a7ddc70a5c69f66c0a7b4a25448dc9b77f6dc9a54a204257b232542ece80e43a46add5e0e4fe96962f23565d15b31f7144586b7624d32a",
            "file": "src/app/components/scenario-editor/request-form/request-form.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, OnDestroy, OnInit, forwardRef } from '@angular/core';\nimport {\n  ControlValueAccessor,\n  FormBuilder,\n  FormControl,\n  FormGroup,\n  NG_VALIDATORS,\n  NG_VALUE_ACCESSOR,\n  ValidationErrors,\n  Validator,\n} from '@angular/forms';\nimport { Subscription } from 'rxjs';\nimport { KeyValueRuleFormValues } from 'src/app/shared/components/key-value-rule-form/key-value-rule-form.component';\nimport { UrlRuleFormValues } from 'src/app/shared/components/url-rule-form/url-rule-form.component';\nimport { BodyRuleFormValues } from '../body-rule-form/body-rule-form.component';\n\nexport interface RequestFormValues {\n  requestMatchRules: {\n    headerRules: KeyValueRuleFormValues;\n    queryRules: KeyValueRuleFormValues;\n    bodyRules: BodyRuleFormValues;\n    urlRules: UrlRuleFormValues;\n  };\n  tokenRules: KeyValueRuleFormValues;\n}\n\n@Component({\n  selector: 'app-request-form',\n  templateUrl: './request-form.component.html',\n  styleUrls: ['./request-form.component.scss'],\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => RequestFormComponent),\n      multi: true,\n    },\n    {\n      provide: NG_VALIDATORS,\n      useExisting: forwardRef(() => RequestFormComponent),\n      multi: true,\n    },\n  ],\n})\nexport class RequestFormComponent implements ControlValueAccessor, Validator, OnInit, OnDestroy {\n  form: FormGroup;\n\n  get requestMatchRules(): FormGroup {\n    // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n    return this.form.get('requestMatchRules') as FormGroup;\n  }\n\n  get headerRules(): FormControl {\n    // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n    return this.form.get('requestMatchRules.headerRules') as FormControl;\n  }\n  get queryRules(): FormControl {\n    // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n    return this.form.get('requestMatchRules.queryRules') as FormControl;\n  }\n  get bodyRules(): FormControl {\n    // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n    return this.form.get('requestMatchRules.bodyRules') as FormControl;\n  }\n  get urlRules(): FormControl {\n    // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n    return this.form.get('requestMatchRules.urlRules') as FormControl;\n  }\n  get tokenRules(): FormControl {\n    // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n    return this.form.get('tokenRules') as FormControl;\n  }\n\n  static readonly ruleTypesStatic = {\n    header: 'Header Match Rules',\n    query: 'Query Param Match Rules',\n    url: 'URL Match Rules',\n    body: 'Body Match Rules',\n    token_payload: 'Token Payload Match Rules',\n  } as const;\n\n  readonly ruleTypes = RequestFormComponent.ruleTypesStatic;\n\n  currentRuleType: keyof typeof RequestFormComponent.ruleTypesStatic = 'header';\n\n  defaults: RequestFormValues = {\n    requestMatchRules: {\n      headerRules: null,\n      queryRules: null,\n      bodyRules: null,\n      urlRules: null,\n    },\n    tokenRules: null,\n  };\n\n  constructor(private formBuilder: FormBuilder) {}\n\n  ngOnInit(): void {\n    this.form = this.formBuilder.group({\n      requestMatchRules: this.formBuilder.group({\n        headerRules: null,\n        queryRules: null,\n        bodyRules: null,\n        urlRules: null,\n      }),\n      tokenRules: null,\n    });\n\n    this.subscriptions.push(\n      this.form.valueChanges.subscribe((value: RequestFormValues | null) => {\n        this.onChange.forEach((fn) => fn(value));\n        this.onTouched.forEach((fn) => fn());\n      })\n    );\n  }\n\n  writeValue(value?: Partial<RequestFormValues> | null): void {\n    if (value === null || value === undefined) {\n      this.form.reset(this.defaults, { emitEvent: false });\n    } else {\n      this.form.patchValue(value, { emitEvent: false });\n    }\n  }\n\n  setDisabledState(isDisabled: boolean): void {\n    if (isDisabled) {\n      this.form.disable();\n      this.requestMatchRules.disable();\n    } else {\n      this.form.enable();\n      this.requestMatchRules.enable();\n    }\n  }\n\n  /**\n   * A sort comparison function that treats all objects as having the same order.\n   * Needed until angular ticket 42490 is implemented: https://github.com/angular/angular/issues/42490\n   * @returns 0\n   */\n  compareAllEqual(_a: unknown, _b: unknown) {\n    return 0;\n  }\n\n  /*\n   * Boilerplate Code Below Here\n   */\n\n  validate(_: FormControl): ValidationErrors | null {\n    return this.form.valid ? null : { request: true };\n  }\n\n  private readonly subscriptions: Subscription[] = [];\n\n  ngOnDestroy(): void {\n    this.subscriptions.forEach((s) => s.unsubscribe());\n  }\n\n  readonly onChange: Array<(value: RequestFormValues) => void> = [];\n  readonly onTouched: Array<() => void> = [];\n\n  registerOnChange(fn: (value: RequestFormValues) => void): void {\n    this.onChange.push(fn);\n  }\n\n  registerOnTouched(fn: () => void): void {\n    this.onTouched.push(fn);\n  }\n}\n",
            "properties": [
                {
                    "name": "requestMatchRules",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "tokenRules",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "KeyValueRuleFormValues",
                    "optional": false,
                    "description": "",
                    "line": 24
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "RequestMatchRules",
            "id": "interface-RequestMatchRules-4b9a0f0ee6d40d2aa8fa01ba3a0ca1e4cfbdf361e86edd34c3dfc41a3cc67d653cfda6885531898aea74e0ade1e3312a6e655253062adf07ec8020c9b10ac217",
            "file": "src/app/models/mock-definition/scenario/request-match-rules.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { BodyRule } from './body-rule.model';\nimport { KeyValueRule } from './key-value-rule.model';\nimport { UrlRule } from './url-rule.model';\n\n/**\n * Model representation of a request matching rule\n */\nexport interface RequestMatchRules {\n  headerRules: KeyValueRule[];\n  queryRules: KeyValueRule[];\n  bodyRules: BodyRule[];\n  urlRules: UrlRule[];\n}\n\nexport const defaultRequestMatchRule: RequestMatchRules = {\n  headerRules: [],\n  queryRules: [],\n  bodyRules: [],\n  urlRules: [],\n};\n",
            "properties": [
                {
                    "name": "bodyRules",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BodyRule[]",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "headerRules",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "KeyValueRule[]",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "queryRules",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "KeyValueRule[]",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "urlRules",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "UrlRule[]",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "description": "<p>Model representation of a request matching rule</p>\n",
            "rawdescription": "\n\nModel representation of a request matching rule\n",
            "methods": []
        },
        {
            "name": "Response",
            "id": "interface-Response-61b65bd51a9b61237edad661cde766cdb38f7e270f027bae85424cc789c93bb09a6749286a2c629b66be7f5f8656e9efa4ffda81b358302141a505e14178775c",
            "file": "src/app/models/mock-definition/scenario/response.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { ResponseType } from './response-type';\n\n/**\n * Model representation of a mock response\n */\nexport interface Response {\n  headers: Record<string, string>;\n  body: string;\n  status: number;\n  type: ResponseType;\n}\n\nexport const defaultResponse: Response = {\n  headers: {},\n  body: '',\n  status: 200,\n  type: ResponseType.CUSTOM,\n};\n",
            "properties": [
                {
                    "name": "body",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "headers",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Record<string | string>",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "status",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ResponseType",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "description": "<p>Model representation of a mock response</p>\n",
            "rawdescription": "\n\nModel representation of a mock response\n",
            "methods": []
        },
        {
            "name": "ResponseFormValues",
            "id": "interface-ResponseFormValues-d3a420ebdd23829a907d2400d6eb4bf68e796c56180f782145e32b899467b1c8b31958e38f29550dcab7064c369c8cc1969bb18669b061cf04f602f0de54c583",
            "file": "src/app/components/scenario-editor/response-form/response-form.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, OnDestroy, OnInit, forwardRef } from '@angular/core';\nimport { ValidJsonService } from 'src/app/services/valid-json/valid-json.service';\nimport HttpStatusCodes, { StatusCodes } from 'http-status-codes';\nimport {\n  AbstractControl,\n  ControlValueAccessor,\n  FormBuilder,\n  FormControl,\n  FormGroup,\n  NG_VALIDATORS,\n  NG_VALUE_ACCESSOR,\n  ValidationErrors,\n  Validator,\n  Validators,\n} from '@angular/forms';\nimport { Subscription } from 'rxjs';\nimport { ResponseType } from 'src/app/models/mock-definition/scenario/response-type';\nimport { JsonEditorOptions } from 'ang-jsoneditor';\nimport { KeyValuePairFormValues } from 'src/app/shared/components/key-value-pair-form/key-value-pair-form.component';\n\nexport interface ResponseFormValues {\n  type: ResponseType;\n  status: number;\n  headers: Record<string, string>;\n  body: string;\n}\n\nexport interface InternalResponseFormValues {\n  type: ResponseType;\n  status: number;\n  headers: KeyValuePairFormValues;\n  body: string;\n}\n\n@Component({\n  selector: 'app-response-form',\n  templateUrl: './response-form.component.html',\n  styleUrls: ['./response-form.component.scss'],\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => ResponseFormComponent),\n      multi: true,\n    },\n    {\n      provide: NG_VALIDATORS,\n      useExisting: forwardRef(() => ResponseFormComponent),\n      multi: true,\n    },\n  ],\n})\nexport class ResponseFormComponent implements ControlValueAccessor, Validator, OnInit, OnDestroy {\n  form: FormGroup;\n\n  get type(): FormControl {\n    // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n    return this.form.get('type') as FormControl;\n  }\n  get status(): FormControl {\n    // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n    return this.form.get('status') as FormControl;\n  }\n  get headers(): FormControl {\n    // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n    return this.form.get('headers') as FormControl;\n  }\n  get body(): FormControl {\n    // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n    return this.form.get('body') as FormControl;\n  }\n\n  readonly responseTypes = [\n    { value: ResponseType.CUSTOM, label: 'Custom' },\n    { value: ResponseType.TEMPLATED, label: 'Templated' },\n  ];\n\n  bodyEditorOptions = new JsonEditorOptions();\n\n  defaults: InternalResponseFormValues = {\n    type: ResponseType.CUSTOM,\n    status: StatusCodes.OK,\n    headers: [],\n    body: '{}',\n  };\n\n  initBodyData = {};\n  bodyDataWasFocused = false;\n\n  constructor(private formBuilder: FormBuilder) {}\n\n  ngOnInit(): void {\n    this.form = this.formBuilder.group({\n      type: [this.defaults.type, Validators.required],\n      status: [this.defaults.status, [Validators.required, ResponseFormComponent.statusCodeValidator]],\n      headers: this.defaults.headers,\n      body: [this.defaults.body, [ValidJsonService.getValidator(false)]],\n    });\n\n    this.subscriptions.push(\n      this.form.valueChanges.subscribe((value: InternalResponseFormValues | null) => {\n        this.onChange.forEach((fn) => fn(this.adaptInternalFormatToExternal(value)));\n        this.onTouched.forEach((fn) => fn());\n      })\n    );\n\n    this.bodyEditorOptions.mode = 'code';\n    this.bodyEditorOptions.modes = ['code', 'text'];\n    this.bodyEditorOptions.statusBar = true;\n    this.bodyEditorOptions.onFocus = () => (this.bodyDataWasFocused = true);\n    this.bodyEditorOptions.onBlur = () => this.bodyDataWasFocused && this.body.markAsTouched();\n    this.bodyEditorOptions.onChangeText = (jsonString: string) => {\n      this.body.markAsDirty();\n      this.body.setValue(jsonString);\n    };\n  }\n\n  adaptInternalFormatToExternal(values: InternalResponseFormValues | null): ResponseFormValues | null {\n    return !values\n      ? null\n      : {\n          ...values,\n          headers: values.headers.reduce((out, { key, value }) => ({ ...out, [key]: value }), {}),\n        };\n  }\n\n  adaptExternalFormatToInternal(\n    values: Partial<ResponseFormValues> | null\n  ): Partial<InternalResponseFormValues> | null {\n    return !values\n      ? null\n      : {\n          ...values,\n          headers: !values.headers ? undefined : Object.entries(values.headers).map(([key, value]) => ({ key, value })),\n        };\n  }\n\n  setDisabledState(isDisabled: boolean): void {\n    isDisabled ? this.form.disable() : this.form.enable();\n  }\n\n  writeValue(value?: Partial<ResponseFormValues> | null): void {\n    if (value === null || value === undefined) {\n      this.form.reset(this.defaults, { emitEvent: false });\n    } else {\n      this.form.patchValue(this.adaptExternalFormatToInternal(value), { emitEvent: false });\n    }\n    this.initBodyData = this.safeParseJson(this.body.value);\n  }\n\n  safeParseJson(json: string): object {\n    try {\n      return JSON.parse(json);\n    } catch (e) {\n      return {};\n    }\n  }\n\n  getStatusDescription(code: number | null): string {\n    if (code === null) {\n      return 'Enter a Status Code';\n    }\n    try {\n      return HttpStatusCodes.getStatusText(Number(code));\n    } catch (e: unknown) {\n      return '';\n    }\n  }\n\n  static statusCodeValidator(control: AbstractControl): ValidationErrors | null {\n    try {\n      if (control.value !== null && control.value.toString() !== '') {\n        HttpStatusCodes.getStatusText(control.value);\n      }\n    } catch (e: unknown) {\n      return { invalid: 'Invalid Status Code' };\n    }\n    return null;\n  }\n\n  /*\n   * Boilerplate Code Below Here\n   */\n\n  validate(_: FormControl): ValidationErrors | null {\n    return this.form.valid ? null : { response: true };\n  }\n\n  private readonly subscriptions: Subscription[] = [];\n\n  ngOnDestroy(): void {\n    this.subscriptions.forEach((s) => s.unsubscribe());\n  }\n\n  readonly onChange: Array<(value: ResponseFormValues) => void> = [];\n  readonly onTouched: Array<() => void> = [];\n\n  registerOnChange(fn: (value: ResponseFormValues) => void): void {\n    this.onChange.push(fn);\n  }\n\n  registerOnTouched(fn: () => void): void {\n    this.onTouched.push(fn);\n  }\n}\n",
            "properties": [
                {
                    "name": "body",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "headers",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Record<string | string>",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "status",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ResponseType",
                    "optional": false,
                    "description": "",
                    "line": 22
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "Scenario",
            "id": "interface-Scenario-9097d8368c6397e7e6d8d6064000d006803e7755075bd052caea225ecae2a0c6fed1877d5e7ee513cf87d35f953ebcb1866bfc95261136cb7be361805d0222e9",
            "file": "src/app/models/mock-definition/scenario/scenario.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { RequestMatchRules, defaultRequestMatchRule } from './request-match-rules.model';\nimport { Metadata, defaultMetadata } from '../metadata.model';\nimport { VerbType } from '../../verb-type';\nimport { Response, defaultResponse } from './response.model';\nimport * as uuid from 'uuid';\nimport { Policy } from './policy.model';\nimport { TokenRule, defaultTokenRule } from './token-rule.model';\n\n/**\n * Model representation of a scenario\n */\nexport interface Scenario {\n  id: string;\n  metadata: Metadata;\n  verb: VerbType;\n  path: string;\n  response: Response;\n  requestMatchRules: RequestMatchRules;\n  policies: Policy[];\n  defaultScenario: boolean;\n  tokenRule: TokenRule;\n}\n\nexport const emptyScenario: Scenario = {\n  id: uuid.v4(),\n  metadata: defaultMetadata,\n  verb: VerbType.GET,\n  path: '',\n  response: defaultResponse,\n  requestMatchRules: defaultRequestMatchRule,\n  policies: [],\n  defaultScenario: false,\n  tokenRule: defaultTokenRule,\n};\n\nexport interface ScenarioParams {\n  title: string;\n  description: string;\n  path: string;\n  verb: VerbType;\n  status: number;\n}\n",
            "properties": [
                {
                    "name": "defaultScenario",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "metadata",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Metadata",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "path",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "policies",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Policy[]",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "requestMatchRules",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "RequestMatchRules",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "response",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Response",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "tokenRule",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TokenRule",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "verb",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "VerbType",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "description": "<p>Model representation of a scenario</p>\n",
            "rawdescription": "\n\nModel representation of a scenario\n",
            "methods": []
        },
        {
            "name": "ScenarioEditorFormValues",
            "id": "interface-ScenarioEditorFormValues-2f1f903458d8316af0a658b794493b6e0ecaaccc034cfd8dbb05c38717e5d01646e80ac6647d1b0447ef90acb562c70a861fcf58f0ba387a57a5e0cc16a2e1b6",
            "file": "src/app/components/scenario-editor/scenario-editor.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { ActivatedRoute, Params, Router } from '@angular/router';\nimport { DesignerStore } from 'src/app/store/designer-store';\nimport { Scenario } from 'src/app/models/mock-definition/scenario/scenario.model';\nimport { NGXLogger } from 'ngx-logger';\nimport { Subscription } from 'rxjs';\nimport { VerbType } from 'src/app/models/verb-type';\nimport { cloneDeep } from 'lodash';\nimport { FormBuilder, FormControl, FormGroup } from '@angular/forms';\nimport { ResponseType } from 'src/app/models/mock-definition/scenario/response-type';\nimport { MetadataFormValues } from './metadata-form/metadata-form.component';\nimport { PolicyType } from 'src/app/models/mock-definition/scenario/policy-type';\nimport { PoliciesFormValues } from './policies-form/policies-form.component';\nimport { ResponseFormValues } from './response-form/response-form.component';\nimport { Response, defaultResponse } from 'src/app/models/mock-definition/scenario/response.model';\nimport { RequestFormValues } from './request-form/request-form.component';\nimport { Policy } from 'src/app/models/mock-definition/scenario/policy.model';\nimport { MockDefinitionService } from 'src/app/services/mock-definition/mock-definition.service';\n\nexport interface ScenarioEditorFormValues {\n  metadata: MetadataFormValues;\n  request: RequestFormValues;\n  response: ResponseFormValues;\n  policies: PoliciesFormValues;\n}\n\n@Component({\n  selector: 'app-scenario-editor',\n  templateUrl: './scenario-editor.component.html',\n  styleUrls: ['./scenario-editor.component.scss'],\n})\nexport class ScenarioEditorComponent implements OnInit, OnDestroy {\n  subscriptions: Subscription[] = [];\n\n  // The new formGroup that the controls will be migrated into\n  scenarioForm: FormGroup;\n\n  get metadata(): FormControl {\n    // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n    return this.scenarioForm.get('metadata') as FormControl;\n  }\n\n  get request(): FormControl {\n    // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n    return this.scenarioForm.get('request') as FormControl;\n  }\n\n  get response(): FormControl {\n    // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n    return this.scenarioForm.get('response') as FormControl;\n  }\n\n  get policies(): FormControl {\n    // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n    return this.scenarioForm.get('policies') as FormControl;\n  }\n\n  scenarioId: string;\n  selectedScenario: Scenario;\n  triggerOpenCancelBox: boolean;\n  endpointVerb: VerbType;\n  endpointPath: string;\n\n  constructor(\n    private router: Router,\n    private store: DesignerStore,\n    private logger: NGXLogger,\n    private activatedRoute: ActivatedRoute,\n    private formBuilder: FormBuilder,\n    private mockDefService: MockDefinitionService\n  ) {}\n\n  /**\n   * Runs when the app is initialized\n   */\n  ngOnInit(): void {\n    this.scenarioForm = this.formBuilder.group({\n      metadata: null,\n      response: null,\n      request: null,\n      policies: null,\n    });\n\n    this.triggerOpenCancelBox = false;\n\n    this.subscriptions.push(\n      this.activatedRoute.params.subscribe((param: Params) => {\n        this.scenarioId = param.scenarioId;\n        this.logger.debug('ScenarioEditorComponent:ngOnInit: Retrieved Scenario ID from URL', param.scenarioId);\n        this.retrieveScenario(param.scenarioId);\n        this.store.selectedScenario = this.selectedScenario;\n\n        this.scenarioForm.setValue(this.convertScenarioToFormData(this.selectedScenario));\n      }),\n\n      this.store.state$.subscribe((state) => {\n        if (state.mockDefinition && state.selectedEndpoint) {\n          this.endpointVerb = state.selectedEndpoint.verb;\n          this.endpointPath = state.selectedEndpoint.path;\n        }\n      })\n    );\n  }\n\n  convertScenarioToFormData(scenario?: Scenario): ScenarioEditorFormValues {\n    const response: ResponseFormValues = this.convertResponseDataToFormValues(scenario?.response ?? defaultResponse);\n    const policies: PoliciesFormValues = this.convertPoliciesDataToFormValues(scenario?.policies ?? []);\n    return {\n      metadata: scenario?.metadata ?? null,\n      request: {\n        requestMatchRules: scenario?.requestMatchRules ?? null,\n        tokenRules: scenario?.tokenRule.rules ?? [],\n      },\n      response,\n      policies,\n    };\n  }\n\n  convertResponseDataToFormValues(response: Response): ResponseFormValues {\n    if (response.type === ResponseType.NONE) {\n      response.type = ResponseType.CUSTOM;\n    }\n    return response;\n  }\n\n  convertPoliciesDataToFormValues(policies: Policy[]): PoliciesFormValues {\n    return policies\n      .map((p) => {\n        switch (p.type) {\n          case PolicyType.DELAY_RESPONSE:\n            return p;\n          case PolicyType.NONE:\n          default: {\n            const _: PolicyType.NONE = p.type;\n            return null;\n          }\n        }\n      })\n      .filter((p) => p !== null);\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.forEach((s) => s.unsubscribe());\n  }\n\n  save(): void {\n    this.logger.debug('save() - form validity:', {\n      scenarioForm: this.scenarioForm.valid,\n      metadata: this.metadata.valid,\n      request: this.request.valid,\n      response: this.response.valid,\n      policies: this.policies.valid,\n    });\n\n    this.logger.debug('save() - this.scenarioForm.value:', this.scenarioForm.value);\n\n    if (this.scenarioForm.valid) {\n      this.logger.debug(\n        'ScenarioEditorComponent:saveScenario: Attempt to update the provided scenario',\n        this.selectedScenario\n      );\n\n      const formData: ScenarioEditorFormValues = this.scenarioForm.value;\n      this.insertFormDataIntoScenario(formData, this.selectedScenario);\n\n      this.store.addOrUpdateScenario(this.selectedScenario);\n\n      this.logger.debug('ScenarioEditorComponent:saveScenario: Updated the provided scenario', this.selectedScenario);\n\n      this.router.navigateByUrl('/scenario-view');\n    }\n  }\n\n  insertFormDataIntoScenario(formData: ScenarioEditorFormValues, scenario: Scenario) {\n    scenario.metadata = formData.metadata;\n    scenario.requestMatchRules = formData.request.requestMatchRules;\n    scenario.tokenRule.rules = formData.request.tokenRules;\n    scenario.response = formData.response;\n    scenario.policies = formData.policies;\n  }\n\n  /*\n   * Opens the cancel box\n   */\n  cancel(): void {\n    if (this.scenarioForm.dirty) {\n      this.logger.debug('Opened cancel box for scenario-editor');\n      this.triggerOpenCancelBox = true;\n    } else {\n      this.router.navigateByUrl('/scenario-view');\n    }\n  }\n\n  /**\n   * Handles the response from the cancel box\n   * @param shouldCancel The button pressed for the cancel box\n   */\n  onCancelDialogAction(shouldCancel: boolean): void {\n    this.logger.debug('User answer for scenario-editor cancel box:', shouldCancel);\n    this.triggerOpenCancelBox = false;\n    if (shouldCancel) {\n      this.logger.debug('The user has cancelled; navigating to endpoint-view');\n      this.router.navigateByUrl('/scenario-view');\n    }\n  }\n\n  /**\n   * Retrieve scenario from store using the provided scenario ID;\n   * If not found, create a new empty scenario\n   * @param scenarioId Scenario ID\n   */\n  private retrieveScenario(scenarioId: string): void {\n    const currentMock = this.store.state.mockDefinition;\n    if (!currentMock) {\n      return;\n    }\n\n    const selected = currentMock.scenarios.find((s) => s.id === scenarioId);\n    if (selected) {\n      this.selectedScenario = cloneDeep(selected);\n\n      this.logger.debug(\n        'ScenarioEditorComponent:retrieveScenario: Scenario found for the provided scenario ID',\n        this.selectedScenario\n      );\n    } else {\n      const endpointVerb = this.store.state.selectedEndpoint.verb;\n      const endpointPath = this.store.state.selectedEndpoint.path;\n      this.selectedScenario = this.createEmptyScenario(scenarioId, endpointVerb, endpointPath);\n      this.logger.debug(\n        `ScenarioEditorComponent:retrieveScenario: Scenario not found, new scenario was created for (${endpointPath}, ${endpointVerb})`,\n        this.selectedScenario\n      );\n    }\n  }\n\n  /**\n   * Create an empty scenario using the provided information\n   * @param id Scenario ID of the empty scenario\n   * @param verb Verb of the scenario\n   * @param path Path of the scenario\n   */\n  private createEmptyScenario(id: string, verb: VerbType, path: string): Scenario {\n    const newScenario: Scenario = this.mockDefService.generateNewScenario({\n      title: '',\n      description: '',\n      path,\n      verb,\n      status: 200,\n    });\n    newScenario.id = id;\n    return newScenario;\n  }\n}\n",
            "properties": [
                {
                    "name": "metadata",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MetadataFormValues",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "policies",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PoliciesFormValues",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "request",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "RequestFormValues",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "response",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ResponseFormValues",
                    "optional": false,
                    "description": "",
                    "line": 23
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ScenarioParams",
            "id": "interface-ScenarioParams-9097d8368c6397e7e6d8d6064000d006803e7755075bd052caea225ecae2a0c6fed1877d5e7ee513cf87d35f953ebcb1866bfc95261136cb7be361805d0222e9",
            "file": "src/app/models/mock-definition/scenario/scenario.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { RequestMatchRules, defaultRequestMatchRule } from './request-match-rules.model';\nimport { Metadata, defaultMetadata } from '../metadata.model';\nimport { VerbType } from '../../verb-type';\nimport { Response, defaultResponse } from './response.model';\nimport * as uuid from 'uuid';\nimport { Policy } from './policy.model';\nimport { TokenRule, defaultTokenRule } from './token-rule.model';\n\n/**\n * Model representation of a scenario\n */\nexport interface Scenario {\n  id: string;\n  metadata: Metadata;\n  verb: VerbType;\n  path: string;\n  response: Response;\n  requestMatchRules: RequestMatchRules;\n  policies: Policy[];\n  defaultScenario: boolean;\n  tokenRule: TokenRule;\n}\n\nexport const emptyScenario: Scenario = {\n  id: uuid.v4(),\n  metadata: defaultMetadata,\n  verb: VerbType.GET,\n  path: '',\n  response: defaultResponse,\n  requestMatchRules: defaultRequestMatchRule,\n  policies: [],\n  defaultScenario: false,\n  tokenRule: defaultTokenRule,\n};\n\nexport interface ScenarioParams {\n  title: string;\n  description: string;\n  path: string;\n  verb: VerbType;\n  status: number;\n}\n",
            "properties": [
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "path",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "status",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "verb",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "VerbType",
                    "optional": false,
                    "description": "",
                    "line": 40
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "State",
            "id": "interface-State-a15f44f82eddee628c7736a45ac1f431f3b946bf55b8e7210c0eb965111473418df6e91d2e15ef6b0ada9c7322b397e6a4d29d216378155f8c43b77ab0df84e4",
            "file": "src/app/store/designer-store.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Endpoint } from '../models/endpoint.model';\nimport { Scenario } from '../models/mock-definition/scenario/scenario.model';\nimport { MockDefinition } from '../models/mock-definition/mock-definition.model';\nimport { Store } from 'rxjs-observable-store';\nimport { Injectable } from '@angular/core';\nimport { OpenAPIV2 } from 'openapi-types';\nimport { VerbType } from '../models/verb-type';\nimport { Metadata } from '../models/mock-definition/metadata.model';\nimport { NGXLogger } from 'ngx-logger';\nimport { cloneDeep } from 'lodash';\n\nexport interface State {\n  selectedEndpoint: Endpoint;\n  selectedScenario: Scenario;\n  mockDefinition: MockDefinition;\n  mockDefinitions: Record<string, MockDefinition>;\n  endpoints: Endpoint[];\n}\n\nInjectable();\n@Injectable()\nexport class DesignerStore extends Store<State> {\n  private static readonly mockDefinitionStoreKey = 'orbital_state_mockDefinition';\n  private static readonly mockDefinitionsStoreKey = 'orbital_state_mockDefinitions';\n  private static readonly endpointsStoreKey = 'orbital_state_endpoints';\n  private static readonly selectedEndpointStoreKey = 'orbital_state_selectedEndpoint';\n  private static readonly selectedScenarioStoreKey = 'orbital_state_selectedScenario';\n\n  constructor(private logger: NGXLogger) {\n    super({\n      selectedEndpoint: JSON.parse(localStorage.getItem(DesignerStore.selectedEndpointStoreKey)),\n      selectedScenario: JSON.parse(localStorage.getItem(DesignerStore.selectedScenarioStoreKey)),\n      mockDefinition: JSON.parse(localStorage.getItem(DesignerStore.mockDefinitionStoreKey)),\n      mockDefinitions: JSON.parse(localStorage.getItem(DesignerStore.mockDefinitionsStoreKey)) || {},\n      endpoints: JSON.parse(localStorage.getItem(DesignerStore.endpointsStoreKey)) || [],\n    });\n\n    this.state$.subscribe((state) => {\n      const clonedDefinition = cloneDeep(state.mockDefinition);\n      const clonedDefinitions = cloneDeep(state.mockDefinitions);\n      localStorage.setItem(DesignerStore.mockDefinitionStoreKey, JSON.stringify(clonedDefinition));\n      localStorage.setItem(DesignerStore.mockDefinitionsStoreKey, JSON.stringify(clonedDefinitions));\n      localStorage.setItem(DesignerStore.endpointsStoreKey, JSON.stringify(state.endpoints));\n      localStorage.setItem(DesignerStore.selectedEndpointStoreKey, JSON.stringify(state.selectedEndpoint));\n      localStorage.setItem(DesignerStore.selectedScenarioStoreKey, JSON.stringify(state.selectedScenario));\n    });\n  }\n\n  /**\n   * This setter updates the Mockdefinitions map with the Mockdefinitions parameter\n   * It creates a new Map for the store in order to trigger any render changes relying on this map.\n   * Also updates the mockDefinition to the first mockDefinition in the list\n   */\n  set mockDefinitions(mockDefinitions: MockDefinition[]) {\n    this.logger.debug('Setting mockDefinitions to ', mockDefinitions);\n    this.setState({\n      ...this.state,\n      mockDefinitions: mockDefinitions.reduce<Record<string, MockDefinition>>((dictionary, mockDef) => {\n        dictionary[mockDef.metadata.title] = mockDef;\n        return dictionary;\n      }, {}),\n    });\n    this.mockDefinition = mockDefinitions[0];\n  }\n\n  /**\n   * Deletes a mock definition by title\n   */\n  deleteMockDefinitionByTitle(mockTitle: string) {\n    if (this.state.mockDefinitions[mockTitle]) {\n      this.logger.debug('Deleting mock ', mockTitle);\n      const { [mockTitle]: _, ...mockDefinitions } = this.state.mockDefinitions;\n      this.state.mockDefinitions = mockDefinitions;\n      this.setState({ ...this.state });\n\n      const mockDefNames = Object.keys(this.state.mockDefinitions ?? {});\n      if (mockTitle === this.mockDefinition?.metadata?.title && mockDefNames.length) {\n        this.logger.debug(\n          'Mock store contains at least one mock; setting first mock to one in store ',\n          this.state.mockDefinitions\n        );\n        this.mockDefinition = this.state.mockDefinitions[mockDefNames[0]];\n        this.selectedEndpoint = null;\n        this.selectedScenario = null;\n      }\n    }\n  }\n\n  /**\n   * Updates a mock definition by title\n   */\n  private updateMockDefinitionsState(mockDefinition: MockDefinition) {\n    this.logger.debug('Updating mock ', mockDefinition.metadata.title);\n    this.state.mockDefinitions[mockDefinition.metadata.title] = mockDefinition;\n    this.setState({ ...this.state });\n  }\n\n  /**\n   * Appends a mock definition to the store; if one with the same name already exists\n   * it will be overwritten\n   */\n  appendMockDefinition(mockDefinition: MockDefinition) {\n    this.logger.debug('Appending mock definition', mockDefinition);\n    this.updateMockDefinitionsState(mockDefinition);\n\n    this.logger.debug('New state after appending', this.state);\n    this.mockDefinition = Object.values(this.state.mockDefinitions)?.[0] ?? null;\n\n    if (this.state.mockDefinition) {\n      this.selectedEndpoint = null;\n      this.selectedScenario = null;\n    }\n  }\n\n  /**\n   * This setter updates the selected endpoint for the designer store\n   */\n  set selectedEndpoint(endpoint: Endpoint) {\n    this.logger.debug('setting selectedEndpoint to ', endpoint);\n    this.setState({\n      ...this.state,\n      selectedEndpoint: {\n        ...endpoint,\n      },\n    });\n  }\n\n  /**\n   * This setter updates the selected scenario for the designer store\n   */\n  set selectedScenario(scenario: Scenario) {\n    this.logger.debug('setting selectedScenario to ', scenario);\n    this.setState({\n      ...this.state,\n      selectedScenario: {\n        ...scenario,\n      },\n    });\n  }\n\n  /**\n   * setEndpoints reads the details of the endpoints specified in the Open Api document\n   * and updates the state of the designer store.\n   * @param doc The parsed Open Api document to extrapolate the endpoints from\n   * @param clearStore Whether to clear the store before clearing the endpoints\n   */\n  setEndpoints(doc: OpenAPIV2.Document, clearStore = true): void {\n    this.logger.debug('Clearing current endpoints: ', clearStore);\n    const pathStrings = Object.keys(doc.paths);\n    let endpoints = [];\n    for (const path of pathStrings) {\n      const pathObject: OpenAPIV2.PathItemObject = doc.paths[path];\n      const newEndpoints = Object.keys(VerbType)\n        .map((verb) => ({ verb: VerbType[verb], lowerVerb: verb.toLowerCase() }))\n        .map(({ verb, lowerVerb }) => (pathObject[lowerVerb] ? { path, verb, spec: pathObject[lowerVerb] } : null))\n        .filter((endpoint) => endpoint);\n      endpoints = [...endpoints, ...newEndpoints];\n    }\n    this.logger.debug('Endpoints from openApi document ', endpoints);\n    this.setState({\n      ...this.state,\n      endpoints: clearStore ? [...endpoints] : [...this.state.endpoints, ...endpoints],\n    });\n  }\n\n  /**\n   * Setter method used to updated the MockDefinition in the designer store and the endpoints list\n   * @param mockDefinition The MockDefinition used to update the store\n   */\n  set mockDefinition(mockDefinition: MockDefinition) {\n    const mockDefinitionCopy = { ...mockDefinition };\n    this.state.mockDefinitions[mockDefinition.metadata.title] = mockDefinitionCopy;\n    this.logger.debug('Setting mockDefinition to ', mockDefinition);\n    this.setState({ ...this.state, mockDefinition: mockDefinitionCopy });\n    this.setEndpoints(mockDefinition.openApi);\n  }\n\n  /**\n   * This method updates Metadata for the MockDefinition in the designer store\n   *\n   * @param metadata The metadata to update\n   */\n  updateMetadata(metadata: Metadata): void {\n    this.logger.debug('Setting metadata to ', metadata);\n    this.setState({\n      ...this.state,\n      mockDefinition: {\n        ...this.state.mockDefinition,\n        metadata: {\n          ...metadata,\n        },\n      },\n    });\n  }\n\n  /**\n   * Add the provided scenario to current mock definition;\n   * If scenario already exist, update the existing scenario\n   * @param scenario Scenario to add to current mock definition\n   */\n  addOrUpdateScenario(scenario: Scenario) {\n    const currentMock = this.state.mockDefinition;\n    if (currentMock) {\n      let current = currentMock.scenarios.find((s) => s.id === scenario.id);\n      if (current) {\n        this.logger.debug(\n          'DesignerStore:AddOrUpdateScenario: Provided scenario already exist in the mock definition',\n          current,\n          scenario\n        );\n        current.metadata.title = scenario.metadata.title;\n        current.metadata.description = scenario.metadata.description;\n\n        current.requestMatchRules.bodyRules = scenario.requestMatchRules.bodyRules;\n        current.requestMatchRules.headerRules = scenario.requestMatchRules.headerRules;\n        current.requestMatchRules.queryRules = scenario.requestMatchRules.queryRules;\n        current.requestMatchRules.urlRules = scenario.requestMatchRules.urlRules;\n        current.defaultScenario = scenario.defaultScenario;\n\n        current.policies = scenario.policies;\n\n        current.response.body = scenario.response.body;\n        current.response.headers = scenario.response.headers;\n        current.response.status = scenario.response.status;\n        current.response.type = scenario.response.type;\n\n        current.tokenRule = scenario.tokenRule;\n      } else {\n        this.logger.debug(\n          'DesignerStore:AddOrUpdateScenario: Unable to find provided scenario in the mock definition, Append it to the end of the list',\n          scenario\n        );\n        current = scenario;\n        currentMock.scenarios.push(current);\n      }\n      this.updateMockDefinitionsState(currentMock);\n    }\n  }\n\n  /**\n   * This method updates the host,basePath and openAPI spec of the MockDefinition in the designer store\n   * @param host The string representing the host\n   * @param basePath The string representing endpoint path\n   * @param openApi The string representing openSpecAPI file contents\n   */\n  updateApiInformation(host: string, basePath: string, openApi: OpenAPIV2.Document): void {\n    this.logger.debug('Setting host to ', host);\n    this.logger.debug('Setting basePath to ', basePath);\n    this.logger.debug('Setting openApi to ', openApi);\n    this.setState({\n      ...this.state,\n      mockDefinition: {\n        ...this.state.mockDefinition,\n        host,\n        basePath,\n        openApi: { ...openApi },\n      },\n    });\n  }\n\n  /**\n   * This method updates scenario array for the MockDefinition in the designer store\n   * @param scenarios The list of scenarios to update\n   */\n  updateScenarios(scenarios: Scenario[]) {\n    this.logger.debug('Setting scenarios to ', scenarios);\n    this.mockDefinition = {\n      ...this.state.mockDefinition,\n      scenarios: [...scenarios],\n    };\n  }\n\n  deleteScenario(scenarioId: string) {\n    this.mockDefinition = {\n      ...this.state.mockDefinition,\n      scenarios: this.state.mockDefinition.scenarios.filter((s) => s.id !== scenarioId),\n    };\n  }\n}\n",
            "properties": [
                {
                    "name": "endpoints",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Endpoint[]",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "mockDefinition",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MockDefinition",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "mockDefinitions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Record<string | MockDefinition>",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "selectedEndpoint",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Endpoint",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "selectedScenario",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Scenario",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "TextBodyRule",
            "id": "interface-TextBodyRule-de1f0c256e176d04a9527a19b81fab30741c042799cb1f29a609701d5c04f7724e8410e1f56cc838e22e476887aa9e31b4a125681aeac2848663bc32f43087d9",
            "file": "src/app/components/scenario-editor/body-rule-form/body-rule-item-form/body-rule-item-form.types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export enum JsonRuleCondition {\n  PATH = 0,\n  EQUALITY,\n  CONTAINS,\n  SCHEMA,\n}\n\nexport enum TextRuleCondition {\n  STARTS_WITH = 0,\n  ENDS_WITH,\n  CONTAINS,\n  EQUALS,\n}\n\nexport enum BodyRuleType {\n  JSON = 1,\n  TEXT,\n}\n\nexport interface JsonBodyRule {\n  ruleType: BodyRuleType.JSON;\n  ruleCondition: JsonRuleCondition;\n  value: string;\n}\n\nexport interface TextBodyRule {\n  ruleType: BodyRuleType.TEXT;\n  ruleCondition: TextRuleCondition;\n  value: string;\n}\n\nexport type InternalRuleType =\n  | Pick<TextBodyRule, 'ruleType' | 'ruleCondition'>\n  | Pick<JsonBodyRule, 'ruleType' | 'ruleCondition'>;\n\nexport type InternalBodyRuleItemFormValues = JsonBodyRule | TextBodyRule;\n",
            "properties": [
                {
                    "name": "ruleCondition",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TextRuleCondition",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "ruleType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BodyRuleType.TEXT",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 29
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "TokenRule",
            "id": "interface-TokenRule-64bb4bdc677f8db133d36cb1c96d98f7134fd0803a1d32fc044949810b3f45d38fd3532002debb3d644667a4a1e1b694b1503629defbd44ae1576db1c500c812",
            "file": "src/app/models/mock-definition/scenario/token-rule.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { KeyValueRule } from './key-value-rule.model';\n\n/**\n * Model representation of a token rule\n */\nexport interface TokenRule {\n  validationType: ValidationType;\n  rules: KeyValueRule[];\n}\n\nexport enum ValidationType {\n  NONE,\n  JWT_VALIDATION,\n  JWT_VALIDATION_AND_REQUEST_MATCH,\n  CONTENT,\n}\n\nexport const defaultTokenRule: TokenRule = {\n  validationType: ValidationType.NONE,\n  rules: [],\n};\n",
            "properties": [
                {
                    "name": "rules",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "KeyValueRule[]",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "validationType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ValidationType",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "description": "<p>Model representation of a token rule</p>\n",
            "rawdescription": "\n\nModel representation of a token rule\n",
            "methods": []
        },
        {
            "name": "UrlRule",
            "id": "interface-UrlRule-8455fdbe2a1e7a6b818b32957a67dfa332bfb97944c30afb14d5ee18443509b574d70e6aefdab06679517c18157c049402bb903dda331294c912dbfdf6fe7816",
            "file": "src/app/models/mock-definition/scenario/url-rule.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { RuleType } from './rule-type';\n\n/**\n * Model representation of a Url matching rule\n */\nexport interface UrlRule {\n  type: RuleType;\n  path: string;\n}\n\nexport const defaultUrlRule: UrlRule = {\n  type: RuleType.TEXTEQUALS,\n  path: '',\n};\n",
            "properties": [
                {
                    "name": "path",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "RuleType",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "description": "<p>Model representation of a Url matching rule</p>\n",
            "rawdescription": "\n\nModel representation of a Url matching rule\n",
            "methods": []
        },
        {
            "name": "UrlRuleItemFormValues",
            "id": "interface-UrlRuleItemFormValues-51fbeb4b9cb7f336cdcb90ac72c8b85fd80c4978f27da861ba496e581b6063e283f644c894502e7a8a4f2764d444511dc5c435396a1494e8cfc02f3afc70e09a",
            "file": "src/app/shared/components/url-rule-form/url-rule-item-form/url-rule-item-form.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, EventEmitter, Input, OnDestroy, OnInit, Output, forwardRef } from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport {\n  ControlValueAccessor,\n  FormBuilder,\n  FormControl,\n  FormGroup,\n  NG_VALIDATORS,\n  NG_VALUE_ACCESSOR,\n  ValidationErrors,\n  Validator,\n  Validators,\n} from '@angular/forms';\nimport { RuleType } from 'src/app/models/mock-definition/scenario/rule-type';\n\nexport interface UrlRuleItemFormValues {\n  type: RuleType;\n  path: string;\n}\n\n@Component({\n  selector: 'app-url-rule-item-form',\n  templateUrl: './url-rule-item-form.component.html',\n  styleUrls: ['./url-rule-item-form.component.scss'],\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => UrlRuleItemFormComponent),\n      multi: true,\n    },\n    {\n      provide: NG_VALIDATORS,\n      useExisting: forwardRef(() => UrlRuleItemFormComponent),\n      multi: true,\n    },\n  ],\n})\nexport class UrlRuleItemFormComponent implements ControlValueAccessor, Validator, OnInit, OnDestroy {\n  form: FormGroup;\n\n  get type(): FormControl {\n    // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n    return this.form.get('type') as FormControl;\n  }\n\n  get path(): FormControl {\n    // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n    return this.form.get('path') as FormControl;\n  }\n\n  @Output() readonly addItemEvent = new EventEmitter<UrlRuleItemFormValues>();\n  @Output() readonly removeItemEvent = new EventEmitter<void>();\n\n  @Input() readonly title = '';\n  @Input() readonly errors: string[] = [];\n  @Input() readonly mode: 'add' | 'edit' = 'edit';\n  @Input() readonly itemIsDuplicatedEvent = new EventEmitter<boolean>();\n  @Input() readonly pathMaxLength = 3000;\n\n  readonly ruleTypes = [\n    { value: RuleType.ACCEPTALL, label: 'Accept All' },\n    { value: RuleType.REGEX, label: 'Matches Regex' },\n    { value: RuleType.TEXTEQUALS, label: 'Equals' },\n  ];\n  ruleType = RuleType;\n\n  constructor(private formBuilder: FormBuilder) {}\n\n  ngOnInit(): void {\n    this.form = this.formBuilder.group({\n      type: [null, Validators.required],\n      path: [{ value: null, disabled: true }, Validators.required],\n    });\n\n    this.subscriptions.push(\n      this.form.valueChanges.subscribe((value: UrlRuleItemFormValues | null) => {\n        const adjustedValue = this.adjustFormValue(value);\n        this.onChange.forEach((fn) => fn(adjustedValue));\n        this.onTouched.forEach((fn) => fn());\n        // Must be after the callbacks since it triggers another event on this observable\n        if (value) {\n          this.handleDisablingPathField(value.type);\n        }\n      }),\n\n      this.itemIsDuplicatedEvent.subscribe((isDuplicated) => this.handleIsDuplicatedEvent(isDuplicated))\n    );\n  }\n\n  adjustFormValue(value: UrlRuleItemFormValues | null): UrlRuleItemFormValues | null {\n    if (!value) {\n      return null;\n    }\n    const newValue = { ...value };\n    if (!value.path || value?.type === RuleType.ACCEPTALL) {\n      newValue.path = '';\n    }\n    return newValue;\n  }\n\n  handleDisablingPathField(type: RuleType | null) {\n    if (!type || type === RuleType.ACCEPTALL) {\n      if (this.path.enabled) {\n        this.path.disable();\n      }\n    } else {\n      if (this.path.disabled) {\n        this.path.enable({ emitEvent: false });\n        this.path.setValue(this.path.value);\n      }\n    }\n  }\n\n  handleIsDuplicatedEvent(isDuplicated: boolean) {\n    if (isDuplicated !== this.form.hasError('duplicate')) {\n      if (isDuplicated) {\n        this.form.setErrors({\n          ...(this.form.errors ?? {}),\n          duplicate: 'This item already exists. Duplicates are not allowed.',\n        });\n      } else {\n        const { duplicate: _, ...errors } = this.form.errors;\n        this.form.setErrors(Object.keys(errors).length ? errors : null);\n      }\n    }\n  }\n\n  addItem() {\n    if (this.form.valid) {\n      this.addItemEvent.emit(this.adjustFormValue(this.form.value));\n    }\n  }\n\n  removeItem() {\n    this.removeItemEvent.emit();\n  }\n\n  setDisabledState(isDisabled: boolean): void {\n    isDisabled ? this.form.disable() : this.form.enable();\n  }\n\n  writeValue(value?: Partial<UrlRuleItemFormValues> | null): void {\n    if (value === null || value === undefined) {\n      this.form.reset({ value: null }, { emitEvent: false });\n      this.path.disable({ emitEvent: false });\n    } else {\n      this.form.patchValue(value);\n    }\n  }\n\n  static buildForm(item: Partial<UrlRuleItemFormValues>): FormGroup {\n    // Note: this forms only needs the structure to propagate values, no functionality required\n    const fb = new FormBuilder();\n    return fb.group({ type: item.type ?? null, path: item.path ?? null });\n  }\n\n  /*\n   * Boilerplate Code Below Here\n   */\n\n  validate(_: FormControl): ValidationErrors | null {\n    return this.form.valid ? null : { url_rule_item: true };\n  }\n\n  private subscriptions: Subscription[] = [];\n\n  ngOnDestroy(): void {\n    this.subscriptions.forEach((s) => s.unsubscribe());\n  }\n\n  readonly onChange: Array<(value: UrlRuleItemFormValues) => void> = [];\n  readonly onTouched: Array<() => void> = [];\n\n  registerOnChange(fn: (value: UrlRuleItemFormValues) => void): void {\n    this.onChange.push(fn);\n  }\n\n  registerOnTouched(fn: () => void): void {\n    this.onTouched.push(fn);\n  }\n}\n",
            "properties": [
                {
                    "name": "path",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "RuleType",
                    "optional": false,
                    "description": "",
                    "line": 17
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        }
    ],
    "injectables": [
        {
            "name": "DesignerStore",
            "id": "injectable-DesignerStore-a15f44f82eddee628c7736a45ac1f431f3b946bf55b8e7210c0eb965111473418df6e91d2e15ef6b0ada9c7322b397e6a4d29d216378155f8c43b77ab0df84e4",
            "file": "src/app/store/designer-store.ts",
            "properties": [
                {
                    "name": "endpointsStoreKey",
                    "defaultValue": "'orbital_state_endpoints'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        121,
                        124,
                        144
                    ]
                },
                {
                    "name": "mockDefinitionsStoreKey",
                    "defaultValue": "'orbital_state_mockDefinitions'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        121,
                        124,
                        144
                    ]
                },
                {
                    "name": "mockDefinitionStoreKey",
                    "defaultValue": "'orbital_state_mockDefinition'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        121,
                        124,
                        144
                    ]
                },
                {
                    "name": "selectedEndpointStoreKey",
                    "defaultValue": "'orbital_state_selectedEndpoint'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        121,
                        124,
                        144
                    ]
                },
                {
                    "name": "selectedScenarioStoreKey",
                    "defaultValue": "'orbital_state_selectedScenario'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        121,
                        124,
                        144
                    ]
                }
            ],
            "methods": [
                {
                    "name": "addOrUpdateScenario",
                    "args": [
                        {
                            "name": "scenario",
                            "type": "Scenario",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 201,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAdd the provided scenario to current mock definition;\nIf scenario already exist, update the existing scenario\n",
                    "description": "<p>Add the provided scenario to current mock definition;\nIf scenario already exist, update the existing scenario</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 7851,
                                "end": 7859,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "scenario"
                            },
                            "type": "Scenario",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 7845,
                                "end": 7850,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>Scenario to add to current mock definition</p>\n"
                        }
                    ]
                },
                {
                    "name": "appendMockDefinition",
                    "args": [
                        {
                            "name": "mockDefinition",
                            "type": "MockDefinition",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 102,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAppends a mock definition to the store; if one with the same name already exists\nit will be overwritten\n",
                    "description": "<p>Appends a mock definition to the store; if one with the same name already exists\nit will be overwritten</p>\n",
                    "jsdoctags": [
                        {
                            "name": "mockDefinition",
                            "type": "MockDefinition",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteMockDefinitionByTitle",
                    "args": [
                        {
                            "name": "mockTitle",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 69,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDeletes a mock definition by title\n",
                    "description": "<p>Deletes a mock definition by title</p>\n",
                    "jsdoctags": [
                        {
                            "name": "mockTitle",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteScenario",
                    "args": [
                        {
                            "name": "scenarioId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 273,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "scenarioId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setEndpoints",
                    "args": [
                        {
                            "name": "doc",
                            "type": "OpenAPIV2.Document",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "clearStore",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 147,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nsetEndpoints reads the details of the endpoints specified in the Open Api document\nand updates the state of the designer store.\n",
                    "description": "<p>setEndpoints reads the details of the endpoints specified in the Open Api document\nand updates the state of the designer store.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 5700,
                                "end": 5703,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "doc"
                            },
                            "type": "OpenAPIV2.Document",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 5694,
                                "end": 5699,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>The parsed Open Api document to extrapolate the endpoints from</p>\n"
                        },
                        {
                            "name": {
                                "pos": 5779,
                                "end": 5789,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "clearStore"
                            },
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "true",
                            "tagName": {
                                "pos": 5773,
                                "end": 5778,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>Whether to clear the store before clearing the endpoints</p>\n"
                        }
                    ]
                },
                {
                    "name": "updateApiInformation",
                    "args": [
                        {
                            "name": "host",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "basePath",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "openApi",
                            "type": "OpenAPIV2.Document",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 246,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThis method updates the host,basePath and openAPI spec of the MockDefinition in the designer store\n",
                    "description": "<p>This method updates the host,basePath and openAPI spec of the MockDefinition in the designer store</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 9640,
                                "end": 9644,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "host"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 9634,
                                "end": 9639,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>The string representing the host</p>\n"
                        },
                        {
                            "name": {
                                "pos": 9690,
                                "end": 9698,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "basePath"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 9684,
                                "end": 9689,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>The string representing endpoint path</p>\n"
                        },
                        {
                            "name": {
                                "pos": 9749,
                                "end": 9756,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "openApi"
                            },
                            "type": "OpenAPIV2.Document",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 9743,
                                "end": 9748,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>The string representing openSpecAPI file contents</p>\n"
                        }
                    ]
                },
                {
                    "name": "updateMetadata",
                    "args": [
                        {
                            "name": "metadata",
                            "type": "Metadata",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 183,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThis method updates Metadata for the MockDefinition in the designer store\n\n",
                    "description": "<p>This method updates Metadata for the MockDefinition in the designer store</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 7394,
                                "end": 7402,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "metadata"
                            },
                            "type": "Metadata",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 7388,
                                "end": 7393,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>The metadata to update</p>\n"
                        }
                    ]
                },
                {
                    "name": "updateMockDefinitionsState",
                    "args": [
                        {
                            "name": "mockDefinition",
                            "type": "MockDefinition",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 92,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nUpdates a mock definition by title\n",
                    "description": "<p>Updates a mock definition by title</p>\n",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "mockDefinition",
                            "type": "MockDefinition",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateScenarios",
                    "args": [
                        {
                            "name": "scenarios",
                            "type": "Scenario[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 265,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThis method updates scenario array for the MockDefinition in the designer store\n",
                    "description": "<p>This method updates scenario array for the MockDefinition in the designer store</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 10359,
                                "end": 10368,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "scenarios"
                            },
                            "type": "Scenario[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 10353,
                                "end": 10358,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>The list of scenarios to update</p>\n"
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Endpoint } from '../models/endpoint.model';\nimport { Scenario } from '../models/mock-definition/scenario/scenario.model';\nimport { MockDefinition } from '../models/mock-definition/mock-definition.model';\nimport { Store } from 'rxjs-observable-store';\nimport { Injectable } from '@angular/core';\nimport { OpenAPIV2 } from 'openapi-types';\nimport { VerbType } from '../models/verb-type';\nimport { Metadata } from '../models/mock-definition/metadata.model';\nimport { NGXLogger } from 'ngx-logger';\nimport { cloneDeep } from 'lodash';\n\nexport interface State {\n  selectedEndpoint: Endpoint;\n  selectedScenario: Scenario;\n  mockDefinition: MockDefinition;\n  mockDefinitions: Record<string, MockDefinition>;\n  endpoints: Endpoint[];\n}\n\nInjectable();\n@Injectable()\nexport class DesignerStore extends Store<State> {\n  private static readonly mockDefinitionStoreKey = 'orbital_state_mockDefinition';\n  private static readonly mockDefinitionsStoreKey = 'orbital_state_mockDefinitions';\n  private static readonly endpointsStoreKey = 'orbital_state_endpoints';\n  private static readonly selectedEndpointStoreKey = 'orbital_state_selectedEndpoint';\n  private static readonly selectedScenarioStoreKey = 'orbital_state_selectedScenario';\n\n  constructor(private logger: NGXLogger) {\n    super({\n      selectedEndpoint: JSON.parse(localStorage.getItem(DesignerStore.selectedEndpointStoreKey)),\n      selectedScenario: JSON.parse(localStorage.getItem(DesignerStore.selectedScenarioStoreKey)),\n      mockDefinition: JSON.parse(localStorage.getItem(DesignerStore.mockDefinitionStoreKey)),\n      mockDefinitions: JSON.parse(localStorage.getItem(DesignerStore.mockDefinitionsStoreKey)) || {},\n      endpoints: JSON.parse(localStorage.getItem(DesignerStore.endpointsStoreKey)) || [],\n    });\n\n    this.state$.subscribe((state) => {\n      const clonedDefinition = cloneDeep(state.mockDefinition);\n      const clonedDefinitions = cloneDeep(state.mockDefinitions);\n      localStorage.setItem(DesignerStore.mockDefinitionStoreKey, JSON.stringify(clonedDefinition));\n      localStorage.setItem(DesignerStore.mockDefinitionsStoreKey, JSON.stringify(clonedDefinitions));\n      localStorage.setItem(DesignerStore.endpointsStoreKey, JSON.stringify(state.endpoints));\n      localStorage.setItem(DesignerStore.selectedEndpointStoreKey, JSON.stringify(state.selectedEndpoint));\n      localStorage.setItem(DesignerStore.selectedScenarioStoreKey, JSON.stringify(state.selectedScenario));\n    });\n  }\n\n  /**\n   * This setter updates the Mockdefinitions map with the Mockdefinitions parameter\n   * It creates a new Map for the store in order to trigger any render changes relying on this map.\n   * Also updates the mockDefinition to the first mockDefinition in the list\n   */\n  set mockDefinitions(mockDefinitions: MockDefinition[]) {\n    this.logger.debug('Setting mockDefinitions to ', mockDefinitions);\n    this.setState({\n      ...this.state,\n      mockDefinitions: mockDefinitions.reduce<Record<string, MockDefinition>>((dictionary, mockDef) => {\n        dictionary[mockDef.metadata.title] = mockDef;\n        return dictionary;\n      }, {}),\n    });\n    this.mockDefinition = mockDefinitions[0];\n  }\n\n  /**\n   * Deletes a mock definition by title\n   */\n  deleteMockDefinitionByTitle(mockTitle: string) {\n    if (this.state.mockDefinitions[mockTitle]) {\n      this.logger.debug('Deleting mock ', mockTitle);\n      const { [mockTitle]: _, ...mockDefinitions } = this.state.mockDefinitions;\n      this.state.mockDefinitions = mockDefinitions;\n      this.setState({ ...this.state });\n\n      const mockDefNames = Object.keys(this.state.mockDefinitions ?? {});\n      if (mockTitle === this.mockDefinition?.metadata?.title && mockDefNames.length) {\n        this.logger.debug(\n          'Mock store contains at least one mock; setting first mock to one in store ',\n          this.state.mockDefinitions\n        );\n        this.mockDefinition = this.state.mockDefinitions[mockDefNames[0]];\n        this.selectedEndpoint = null;\n        this.selectedScenario = null;\n      }\n    }\n  }\n\n  /**\n   * Updates a mock definition by title\n   */\n  private updateMockDefinitionsState(mockDefinition: MockDefinition) {\n    this.logger.debug('Updating mock ', mockDefinition.metadata.title);\n    this.state.mockDefinitions[mockDefinition.metadata.title] = mockDefinition;\n    this.setState({ ...this.state });\n  }\n\n  /**\n   * Appends a mock definition to the store; if one with the same name already exists\n   * it will be overwritten\n   */\n  appendMockDefinition(mockDefinition: MockDefinition) {\n    this.logger.debug('Appending mock definition', mockDefinition);\n    this.updateMockDefinitionsState(mockDefinition);\n\n    this.logger.debug('New state after appending', this.state);\n    this.mockDefinition = Object.values(this.state.mockDefinitions)?.[0] ?? null;\n\n    if (this.state.mockDefinition) {\n      this.selectedEndpoint = null;\n      this.selectedScenario = null;\n    }\n  }\n\n  /**\n   * This setter updates the selected endpoint for the designer store\n   */\n  set selectedEndpoint(endpoint: Endpoint) {\n    this.logger.debug('setting selectedEndpoint to ', endpoint);\n    this.setState({\n      ...this.state,\n      selectedEndpoint: {\n        ...endpoint,\n      },\n    });\n  }\n\n  /**\n   * This setter updates the selected scenario for the designer store\n   */\n  set selectedScenario(scenario: Scenario) {\n    this.logger.debug('setting selectedScenario to ', scenario);\n    this.setState({\n      ...this.state,\n      selectedScenario: {\n        ...scenario,\n      },\n    });\n  }\n\n  /**\n   * setEndpoints reads the details of the endpoints specified in the Open Api document\n   * and updates the state of the designer store.\n   * @param doc The parsed Open Api document to extrapolate the endpoints from\n   * @param clearStore Whether to clear the store before clearing the endpoints\n   */\n  setEndpoints(doc: OpenAPIV2.Document, clearStore = true): void {\n    this.logger.debug('Clearing current endpoints: ', clearStore);\n    const pathStrings = Object.keys(doc.paths);\n    let endpoints = [];\n    for (const path of pathStrings) {\n      const pathObject: OpenAPIV2.PathItemObject = doc.paths[path];\n      const newEndpoints = Object.keys(VerbType)\n        .map((verb) => ({ verb: VerbType[verb], lowerVerb: verb.toLowerCase() }))\n        .map(({ verb, lowerVerb }) => (pathObject[lowerVerb] ? { path, verb, spec: pathObject[lowerVerb] } : null))\n        .filter((endpoint) => endpoint);\n      endpoints = [...endpoints, ...newEndpoints];\n    }\n    this.logger.debug('Endpoints from openApi document ', endpoints);\n    this.setState({\n      ...this.state,\n      endpoints: clearStore ? [...endpoints] : [...this.state.endpoints, ...endpoints],\n    });\n  }\n\n  /**\n   * Setter method used to updated the MockDefinition in the designer store and the endpoints list\n   * @param mockDefinition The MockDefinition used to update the store\n   */\n  set mockDefinition(mockDefinition: MockDefinition) {\n    const mockDefinitionCopy = { ...mockDefinition };\n    this.state.mockDefinitions[mockDefinition.metadata.title] = mockDefinitionCopy;\n    this.logger.debug('Setting mockDefinition to ', mockDefinition);\n    this.setState({ ...this.state, mockDefinition: mockDefinitionCopy });\n    this.setEndpoints(mockDefinition.openApi);\n  }\n\n  /**\n   * This method updates Metadata for the MockDefinition in the designer store\n   *\n   * @param metadata The metadata to update\n   */\n  updateMetadata(metadata: Metadata): void {\n    this.logger.debug('Setting metadata to ', metadata);\n    this.setState({\n      ...this.state,\n      mockDefinition: {\n        ...this.state.mockDefinition,\n        metadata: {\n          ...metadata,\n        },\n      },\n    });\n  }\n\n  /**\n   * Add the provided scenario to current mock definition;\n   * If scenario already exist, update the existing scenario\n   * @param scenario Scenario to add to current mock definition\n   */\n  addOrUpdateScenario(scenario: Scenario) {\n    const currentMock = this.state.mockDefinition;\n    if (currentMock) {\n      let current = currentMock.scenarios.find((s) => s.id === scenario.id);\n      if (current) {\n        this.logger.debug(\n          'DesignerStore:AddOrUpdateScenario: Provided scenario already exist in the mock definition',\n          current,\n          scenario\n        );\n        current.metadata.title = scenario.metadata.title;\n        current.metadata.description = scenario.metadata.description;\n\n        current.requestMatchRules.bodyRules = scenario.requestMatchRules.bodyRules;\n        current.requestMatchRules.headerRules = scenario.requestMatchRules.headerRules;\n        current.requestMatchRules.queryRules = scenario.requestMatchRules.queryRules;\n        current.requestMatchRules.urlRules = scenario.requestMatchRules.urlRules;\n        current.defaultScenario = scenario.defaultScenario;\n\n        current.policies = scenario.policies;\n\n        current.response.body = scenario.response.body;\n        current.response.headers = scenario.response.headers;\n        current.response.status = scenario.response.status;\n        current.response.type = scenario.response.type;\n\n        current.tokenRule = scenario.tokenRule;\n      } else {\n        this.logger.debug(\n          'DesignerStore:AddOrUpdateScenario: Unable to find provided scenario in the mock definition, Append it to the end of the list',\n          scenario\n        );\n        current = scenario;\n        currentMock.scenarios.push(current);\n      }\n      this.updateMockDefinitionsState(currentMock);\n    }\n  }\n\n  /**\n   * This method updates the host,basePath and openAPI spec of the MockDefinition in the designer store\n   * @param host The string representing the host\n   * @param basePath The string representing endpoint path\n   * @param openApi The string representing openSpecAPI file contents\n   */\n  updateApiInformation(host: string, basePath: string, openApi: OpenAPIV2.Document): void {\n    this.logger.debug('Setting host to ', host);\n    this.logger.debug('Setting basePath to ', basePath);\n    this.logger.debug('Setting openApi to ', openApi);\n    this.setState({\n      ...this.state,\n      mockDefinition: {\n        ...this.state.mockDefinition,\n        host,\n        basePath,\n        openApi: { ...openApi },\n      },\n    });\n  }\n\n  /**\n   * This method updates scenario array for the MockDefinition in the designer store\n   * @param scenarios The list of scenarios to update\n   */\n  updateScenarios(scenarios: Scenario[]) {\n    this.logger.debug('Setting scenarios to ', scenarios);\n    this.mockDefinition = {\n      ...this.state.mockDefinition,\n      scenarios: [...scenarios],\n    };\n  }\n\n  deleteScenario(scenarioId: string) {\n    this.mockDefinition = {\n      ...this.state.mockDefinition,\n      scenarios: this.state.mockDefinition.scenarios.filter((s) => s.id !== scenarioId),\n    };\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "logger",
                        "type": "NGXLogger",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 27,
                "jsdoctags": [
                    {
                        "name": "logger",
                        "type": "NGXLogger",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "mockDefinitions": {
                    "name": "mockDefinitions",
                    "setSignature": {
                        "name": "mockDefinitions",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "mockDefinitions",
                                "type": "MockDefinition[]",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 54,
                        "rawdescription": "\n\nThis setter updates the Mockdefinitions map with the Mockdefinitions parameter\nIt creates a new Map for the store in order to trigger any render changes relying on this map.\nAlso updates the mockDefinition to the first mockDefinition in the list\n",
                        "description": "<p>This setter updates the Mockdefinitions map with the Mockdefinitions parameter\nIt creates a new Map for the store in order to trigger any render changes relying on this map.\nAlso updates the mockDefinition to the first mockDefinition in the list</p>\n",
                        "jsdoctags": [
                            {
                                "name": "mockDefinitions",
                                "type": "MockDefinition[]",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "selectedEndpoint": {
                    "name": "selectedEndpoint",
                    "setSignature": {
                        "name": "selectedEndpoint",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "endpoint",
                                "type": "Endpoint",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 118,
                        "rawdescription": "\n\nThis setter updates the selected endpoint for the designer store\n",
                        "description": "<p>This setter updates the selected endpoint for the designer store</p>\n",
                        "jsdoctags": [
                            {
                                "name": "endpoint",
                                "type": "Endpoint",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "selectedScenario": {
                    "name": "selectedScenario",
                    "setSignature": {
                        "name": "selectedScenario",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "scenario",
                                "type": "Scenario",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 131,
                        "rawdescription": "\n\nThis setter updates the selected scenario for the designer store\n",
                        "description": "<p>This setter updates the selected scenario for the designer store</p>\n",
                        "jsdoctags": [
                            {
                                "name": "scenario",
                                "type": "Scenario",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "mockDefinition": {
                    "name": "mockDefinition",
                    "setSignature": {
                        "name": "mockDefinition",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "mockDefinition",
                                "type": "MockDefinition",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 170,
                        "rawdescription": "\n\nSetter method used to updated the MockDefinition in the designer store and the endpoints list\n",
                        "description": "<p>Setter method used to updated the MockDefinition in the designer store and the endpoints list</p>\n",
                        "jsdoctags": [
                            {
                                "name": {
                                    "pos": 6839,
                                    "end": 6853,
                                    "flags": 4227072,
                                    "modifierFlagsCache": 0,
                                    "transformFlags": 0,
                                    "kind": 79,
                                    "escapedText": "mockDefinition"
                                },
                                "type": "MockDefinition",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "pos": 6833,
                                    "end": 6838,
                                    "flags": 4227072,
                                    "modifierFlagsCache": 0,
                                    "transformFlags": 0,
                                    "kind": 79,
                                    "escapedText": "param"
                                },
                                "comment": "<p>The MockDefinition used to update the store</p>\n"
                            }
                        ]
                    }
                }
            },
            "extends": "Store",
            "type": "injectable"
        },
        {
            "name": "ExportMockdefinitionService",
            "id": "injectable-ExportMockdefinitionService-cc27c12503e4b07d4913b277526150b91d775286653beb2521c10e76ccf7ce62ebbea69a34203600ba25c440c03ada510b9deb6e41574211996eab7f3901208b",
            "file": "src/app/services/export-mockdefinition/export-mockdefinition.service.ts",
            "properties": [
                {
                    "name": "mockdefinitionCache",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MockDefinition",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "urlCache",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "methods": [
                {
                    "name": "exportMockDefinition",
                    "args": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "mockdefinition",
                            "type": "MockDefinition",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nPOSTs a Mockdefinition to the server\n",
                    "description": "<p>POSTs a Mockdefinition to the server</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1128,
                                "end": 1131,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "url"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1122,
                                "end": 1127,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>The url to post the mockdefinition to</p>\n"
                        },
                        {
                            "name": {
                                "pos": 1182,
                                "end": 1196,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "mockdefinition"
                            },
                            "type": "MockDefinition",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1176,
                                "end": 1181,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>The mockdefinition to be posted</p>\n"
                        }
                    ]
                },
                {
                    "name": "getMockdefinition",
                    "args": [],
                    "optional": false,
                    "returnType": "MockDefinition",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAccess to Mockdefinition for Quick Export\n",
                    "description": "<p>Access to Mockdefinition for Quick Export</p>\n"
                },
                {
                    "name": "getUrl",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAccess to Url for Quick Export\n",
                    "description": "<p>Access to Url for Quick Export</p>\n"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { MockDefinition } from 'src/app/models/mock-definition/mock-definition.model';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { NGXLogger } from 'ngx-logger';\nimport { cloneDeep } from 'lodash';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { DesignerStore } from '../../store/designer-store';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ExportMockdefinitionService {\n  urlCache: string;\n  mockdefinitionCache: MockDefinition;\n  constructor(private store: DesignerStore, private httpClient: HttpClient, private logger: NGXLogger) {\n    this.store.state$.subscribe((state) => {\n      if (state.mockDefinition) {\n        this.mockdefinitionCache = state.mockDefinition;\n      }\n    });\n  }\n\n  /**\n   * Access to Url for Quick Export\n   */\n  getUrl(): string {\n    return this.urlCache;\n  }\n\n  /**\n   * Access to Mockdefinition for Quick Export\n   */\n  getMockdefinition(): MockDefinition {\n    return this.mockdefinitionCache;\n  }\n\n  /**\n   * POSTs a Mockdefinition to the server\n   * @param url The url to post the mockdefinition to\n   * @param mockdefinition The mockdefinition to be posted\n   */\n  exportMockDefinition(url: string, mockdefinition: MockDefinition): Observable<boolean> {\n    this.logger.debug('Mockdefinition has been exported: ', mockdefinition);\n    const mockDefinitionToExport = cloneDeep(mockdefinition);\n\n    this.logger.debug('Mockdefinition in JSON format: ', mockDefinitionToExport);\n    this.urlCache = url;\n    this.mockdefinitionCache = mockDefinitionToExport;\n    return this.httpClient\n      .post<boolean>(url, mockDefinitionToExport, {\n        headers: new HttpHeaders({\n          'Content-Type': 'application/json; charset=utf-8',\n        }),\n      })\n      .pipe(\n        catchError((error) => {\n          return throwError(error);\n        })\n      );\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "DesignerStore",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "httpClient",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "logger",
                        "type": "NGXLogger",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "DesignerStore",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "httpClient",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "logger",
                        "type": "NGXLogger",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "MockDefinitionService",
            "id": "injectable-MockDefinitionService-0250653b7c6bfbd3a08cc1dfb966418c0d954f3ab742b11df6b80b85665ea29e4b049494f879489954744eeaf0752e866671cf373e5c986ce62effc32644d2da",
            "file": "src/app/services/mock-definition/mock-definition.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "AddMockDefinitionToStore",
                    "args": [
                        {
                            "name": "mockDefinition",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nParse provided string to mock definition, save it in the store and make it the current mockdefinition in the store.\n",
                    "description": "<p>Parse provided string to mock definition, save it in the store and make it the current mockdefinition in the store.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1041,
                                "end": 1055,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "mockDefinition"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1035,
                                "end": 1040,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>String representation of mock definition</p>\n"
                        }
                    ]
                },
                {
                    "name": "cloneScenario",
                    "args": [
                        {
                            "name": "mockId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "scenario",
                            "type": "Scenario",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 86,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "mockId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "scenario",
                            "type": "Scenario",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "defaultScenarioParams",
                    "args": [
                        {
                            "name": "path",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "verb",
                            "type": "VerbType",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "status",
                            "type": "HttpStatus.StatusCodes",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "HttpStatus.StatusCodes.OK"
                        },
                        {
                            "name": "title",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'Default OK Scenario'"
                        }
                    ],
                    "optional": false,
                    "returnType": "ScenarioParams",
                    "typeParameters": [],
                    "line": 195,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "path",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "verb",
                            "type": "VerbType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "status",
                            "type": "HttpStatus.StatusCodes",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "HttpStatus.StatusCodes.OK",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "title",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'Default OK Scenario'",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "generateNewScenario",
                    "args": [
                        {
                            "name": "scenario",
                            "type": "ScenarioParams",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "defaultScenario",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false"
                        }
                    ],
                    "optional": false,
                    "returnType": "Scenario",
                    "typeParameters": [],
                    "line": 224,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGenerates a new Scenario based on the path and verb.\n\n",
                    "description": "<p>Generates a new Scenario based on the path and verb.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "scenario",
                            "type": "ScenarioParams",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "defaultScenario",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getDefaultScenarios",
                    "args": [
                        {
                            "name": "endpoints",
                            "type": "OpenAPIV2.PathsObject",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "validation",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false"
                        }
                    ],
                    "optional": false,
                    "returnType": "Scenario[]",
                    "typeParameters": [],
                    "line": 133,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGenerate default Scenarios based on the endpoints provided.\n\n",
                    "description": "<p>Generate default Scenarios based on the endpoints provided.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 5080,
                                "end": 5089,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "endpoints"
                            },
                            "type": "OpenAPIV2.PathsObject",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 5074,
                                "end": 5079,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>list of endpoints from the imported openapi document</p>\n"
                        },
                        {
                            "name": "validation",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getDefaultValidationScenarios",
                    "args": [
                        {
                            "name": "scenarios",
                            "type": "Scenario[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Scenario[]",
                    "typeParameters": [],
                    "line": 155,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "scenarios",
                            "type": "Scenario[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getEndpointVerbTypes",
                    "args": [
                        {
                            "name": "endpoint",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "VerbType[]",
                    "typeParameters": [],
                    "line": 210,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "endpoint",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "mapUnauthorizedScenarios",
                    "args": [
                        {
                            "name": "scenarios",
                            "type": "Scenario[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Record<string, any>",
                    "typeParameters": [],
                    "line": 180,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "scenarios",
                            "type": "Scenario[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "validateMockDefinition",
                    "args": [
                        {
                            "name": "mockDefinition",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 69,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nValidates if a string is a valid mockdefinition.\n",
                    "description": "<p>Validates if a string is a valid mockdefinition.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2557,
                                "end": 2571,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "mockDefinition"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2551,
                                "end": 2556,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>String representation of mock definition</p>\n"
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Scenario, ScenarioParams } from 'src/app/models/mock-definition/scenario/scenario.model';\nimport { Injectable } from '@angular/core';\nimport { DesignerStore } from 'src/app/store/designer-store';\nimport { NGXLogger } from 'ngx-logger';\nimport { Observable } from 'rxjs';\nimport * as uuid from 'uuid';\nimport * as _ from 'lodash';\nimport { VerbType } from 'src/app/models/verb-type';\nimport { OpenAPIV2 } from 'openapi-types';\nimport { ResponseType } from 'src/app/models/mock-definition/scenario/response-type';\nimport { defaultTokenRule } from 'src/app/models/mock-definition/scenario/token-rule.model';\nimport * as HttpStatus from 'http-status-codes';\nimport { MockDefinition } from 'src/app/models/mock-definition/mock-definition.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class MockDefinitionService {\n  constructor(private store: DesignerStore, private logger: NGXLogger) {}\n\n  /**\n   * Parse provided string to mock definition, save it in the store and make it the current mockdefinition in the store.\n   * @param mockDefinition String representation of mock definition\n   */\n  AddMockDefinitionToStore(mockDefinition: string): Observable<boolean> {\n    return new Observable((observer) => {\n      try {\n        let content: MockDefinition = JSON.parse(mockDefinition);\n        content = {\n          ...content,\n          scenarios: content.scenarios.map(\n            (s: Scenario): Scenario => ({\n              ...s,\n              response: {\n                ...s.response,\n                headers: s.response.headers,\n                type: s.response.type ?? ResponseType.CUSTOM,\n              },\n              requestMatchRules: {\n                headerRules: s.requestMatchRules?.headerRules ?? [],\n                queryRules: s.requestMatchRules?.queryRules ?? [],\n                bodyRules: s.requestMatchRules?.bodyRules ?? [],\n                urlRules: s.requestMatchRules?.urlRules ?? [],\n              },\n              policies: s.policies ?? [],\n              tokenRule: {\n                ...s.tokenRule,\n                rules: s.tokenRule?.rules ?? [],\n              },\n              defaultScenario: s.defaultScenario ?? false,\n            })\n          ),\n        };\n        this.store.appendMockDefinition(content);\n        this.store.mockDefinition = content;\n        this.store.state.mockDefinition = content;\n        observer.next(true);\n      } catch (error) {\n        observer.error(error);\n      }\n      observer.complete();\n    });\n  }\n\n  /**\n   * Validates if a string is a valid mockdefinition.\n   * @param mockDefinition String representation of mock definition\n   */\n  validateMockDefinition(mockDefinition: string): Observable<boolean> {\n    return new Observable((observer) => {\n      try {\n        JSON.parse(mockDefinition);\n        observer.next(true);\n      } catch (error) {\n        observer.error(error);\n      }\n      observer.complete();\n    });\n  }\n\n  /*\n   * Clones the provided scenario and updates the mock definition in the store with the new copy scenario\n   * @param mockId  string representation of mock definition's id\n   * @param scenario Object representation of the scenario to be cloned\n   */\n  cloneScenario(mockId: string, scenario: Scenario): Observable<boolean> {\n    return new Observable((observer) => {\n      try {\n        if (!scenario || !scenario.id || !scenario.metadata || !scenario.metadata.title) {\n          this.logger.warn('Scenario not cloned because it contains undefined attributes');\n          observer.next(false);\n          return;\n        }\n\n        // copy scenario using deep copy\n        const clonedScenario = _.cloneDeep(scenario);\n        clonedScenario.defaultScenario = false;\n        clonedScenario.id = uuid.v4();\n        clonedScenario.metadata.title = `${clonedScenario.metadata.title}-copy`;\n        const scenarioMockDefinition = this.store.state.mockDefinitions[mockId];\n        this.store.state.mockDefinition = scenarioMockDefinition;\n        const originalScenarioIndex = scenarioMockDefinition.scenarios.indexOf(scenario);\n\n        // ensure that there are no naming conflicts; if there are, repeat until a name is found\n        if (scenarioMockDefinition.scenarios.find((x) => x.metadata.title === clonedScenario.metadata.title)) {\n          let copyCounter = 2;\n          while (\n            scenarioMockDefinition.scenarios.find(\n              (x) => x.metadata.title === `${clonedScenario.metadata.title} ${copyCounter}`\n            )\n          ) {\n            copyCounter++;\n          }\n\n          clonedScenario.metadata.title = `${clonedScenario.metadata.title} ${copyCounter}`;\n        }\n        scenarioMockDefinition.scenarios.splice(originalScenarioIndex + 1, 0, clonedScenario);\n        this.store.updateScenarios([...scenarioMockDefinition.scenarios]);\n        this.logger.warn('Scenario successfully cloned: ', clonedScenario);\n        observer.next(true);\n      } catch (error) {\n        observer.error(error);\n      }\n      observer.complete();\n    });\n  }\n\n  /**\n   * Generate default Scenarios based on the endpoints provided.\n   *\n   * @param endpoints list of endpoints from the imported openapi document\n   */\n  getDefaultScenarios(endpoints: OpenAPIV2.PathsObject, validation = false): Scenario[] {\n    const defaultScenariosPerEndpoint = [];\n    const keyArrayOfEndpoints = Object.keys(endpoints);\n\n    keyArrayOfEndpoints.forEach((pathName) => {\n      const endpoint = endpoints[pathName];\n      const types = this.getEndpointVerbTypes(endpoint);\n\n      types.forEach((type) => {\n        const newScenarioGet = this.generateNewScenario(this.defaultScenarioParams(pathName, type), true);\n        defaultScenariosPerEndpoint.push(newScenarioGet);\n        if (validation) {\n          const tokenScenarioGet = this.generateNewScenario(\n            this.defaultScenarioParams(pathName, type, HttpStatus.StatusCodes.UNAUTHORIZED, 'Invalid-Token Scenario')\n          );\n          defaultScenariosPerEndpoint.push(tokenScenarioGet);\n        }\n      });\n    });\n    return defaultScenariosPerEndpoint;\n  }\n\n  getDefaultValidationScenarios(scenarios: Scenario[]): Scenario[] {\n    const scenarioList: Scenario[] = [];\n    const scenarioDict = this.mapUnauthorizedScenarios(scenarios);\n\n    for (const endpoint in scenarioDict) {\n      for (const verb in scenarioDict[endpoint]) {\n        if (scenarioDict[endpoint][verb] === false) {\n          const verbInt = parseInt(verb);\n          scenarioList.push(\n            this.generateNewScenario(\n              this.defaultScenarioParams(\n                endpoint,\n                verbInt,\n                HttpStatus.StatusCodes.UNAUTHORIZED,\n                'Invalid-Token Scenario'\n              )\n            )\n          );\n        }\n      }\n    }\n    return scenarioList;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private mapUnauthorizedScenarios(scenarios: Scenario[]): Record<string, any> {\n    const scenarioDict = {};\n    for (const scenario of scenarios) {\n      let isUnauthorized: boolean = scenario.response.status === HttpStatus.StatusCodes.UNAUTHORIZED;\n\n      if (scenarioDict[scenario.path]) {\n        isUnauthorized = scenarioDict[scenario.path][scenario.verb] ? true : isUnauthorized;\n      } else {\n        scenarioDict[scenario.path] = {};\n      }\n      scenarioDict[scenario.path][scenario.verb] = isUnauthorized;\n    }\n    return scenarioDict;\n  }\n\n  defaultScenarioParams(\n    path: string,\n    verb: VerbType,\n    status: HttpStatus.StatusCodes = HttpStatus.StatusCodes.OK,\n    title: string = 'Default OK Scenario'\n  ): ScenarioParams {\n    return {\n      title,\n      description: '',\n      path,\n      status,\n      verb,\n    };\n  }\n\n  private getEndpointVerbTypes(endpoint: unknown): VerbType[] {\n    const verbs: VerbType[] = [];\n    const verbKeys = Object.keys(endpoint);\n    verbKeys.forEach((key) => {\n      const type = VerbType[key.toUpperCase()];\n      verbs.push(type);\n    });\n    return verbs;\n  }\n\n  /**\n   * Generates a new Scenario based on the path and verb.\n   *\n   */\n  generateNewScenario(scenario: ScenarioParams, defaultScenario = false): Scenario {\n    return {\n      id: uuid.v4(),\n      metadata: {\n        title: scenario.title,\n        description: scenario.description,\n      },\n      verb: scenario.verb,\n      path: scenario.path,\n      response: {\n        headers: {},\n        body: '{}',\n        status: scenario.status,\n        type: ResponseType.CUSTOM,\n      },\n      requestMatchRules: {\n        headerRules: [],\n        queryRules: [],\n        bodyRules: [],\n        urlRules: [],\n      },\n      policies: [],\n      defaultScenario,\n      tokenRule: defaultTokenRule,\n    };\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "DesignerStore",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "logger",
                        "type": "NGXLogger",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 18,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "DesignerStore",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "logger",
                        "type": "NGXLogger",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "NotificationService",
            "id": "injectable-NotificationService-14f232a66cc6b7f214c3bd09fbb1fb3e5b3a08a6f29d48db9311d999cd617e059b03715e742ed1fe2b08f996a7b0116b574eec6d1a5804dbd02b7d80305882ba",
            "file": "src/app/services/notification-service/notification.service.ts",
            "properties": [
                {
                    "name": "default_snackbar_duration_ms",
                    "defaultValue": "3000",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        144
                    ]
                }
            ],
            "methods": [
                {
                    "name": "open",
                    "args": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "action",
                            "type": "null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "null"
                        },
                        {
                            "name": "duration",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "this.default_snackbar_duration_ms"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n\n",
                    "description": "",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 329,
                                "end": 336,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "message"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 323,
                                "end": 328,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>The message to display</p>\n"
                        },
                        {
                            "name": {
                                "pos": 372,
                                "end": 378,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "action"
                            },
                            "type": "null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "null",
                            "tagName": {
                                "pos": 366,
                                "end": 371,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>The name of the button which dismisses the snackbar</p>\n"
                        },
                        {
                            "name": {
                                "pos": 443,
                                "end": 451,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "duration"
                            },
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "this.default_snackbar_duration_ms",
                            "tagName": {
                                "pos": 437,
                                "end": 442,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>How long in milliseconds to show the snackbar for</p>\n"
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable, NgZone } from '@angular/core';\nimport { MatSnackBar } from '@angular/material/snack-bar';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class NotificationService {\n  readonly default_snackbar_duration_ms = 3000;\n\n  constructor(private snackBar: MatSnackBar, private zone: NgZone) {}\n\n  /**\n   *\n   * @param message The message to display\n   * @param action The name of the button which dismisses the snackbar\n   * @param duration How long in milliseconds to show the snackbar for\n   */\n  open(message: string, action = null, duration = this.default_snackbar_duration_ms) {\n    this.zone.run(() => {\n      this.snackBar.open(message, action, { duration });\n    });\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "snackBar",
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "zone",
                        "type": "NgZone",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 8,
                "jsdoctags": [
                    {
                        "name": "snackBar",
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "zone",
                        "type": "NgZone",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "OpenApiSpecService",
            "id": "injectable-OpenApiSpecService-b206807fb6ff78cd519daf337d1bc92ab138a7f2a99185bba37f69c6bc6d2df04d19816135f10a8410bfe59557bc3051c48d1a4d0dad4656ecbbc441f1564963",
            "file": "src/app/services/openapispecservice/open-api-spec.service.ts",
            "properties": [
                {
                    "name": "validatorV2",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "OpenAPISchemaValidator",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "validatorV3",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "OpenAPISchemaValidator",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "methods": [
                {
                    "name": "readOpenApiSpec",
                    "args": [
                        {
                            "name": "openApiString",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<OpenAPIV2.Document>",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nTakes a string as input and returns an observable of type OpenAPIV2.Document\n",
                    "description": "<p>Takes a string as input and returns an observable of type OpenAPIV2.Document</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 627,
                                "end": 640,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "openApiString"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 621,
                                "end": 626,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>a string representing the open api file and turn contents into an OpenApiSpec</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 725,
                                "end": 732,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "returns"
                            },
                            "comment": "<p>observable object of type Open Api Document</p>\n"
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport OpenAPISchemaValidator from 'openapi-schema-validator';\nimport { OpenAPIV2 } from 'openapi-types';\nimport { Observable } from 'rxjs';\nimport * as yaml from 'js-yaml';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OpenApiSpecService {\n  validatorV2: OpenAPISchemaValidator;\n  validatorV3: OpenAPISchemaValidator;\n  constructor() {\n    this.validatorV2 = new OpenAPISchemaValidator({ version: 2 });\n    this.validatorV3 = new OpenAPISchemaValidator({ version: 3 });\n  }\n\n  /**\n   * Takes a string as input and returns an observable of type OpenAPIV2.Document\n   * @param openApiString a string representing the open api file and turn contents into an OpenApiSpec\n   * @returns observable object of type Open Api Document\n   */\n  readOpenApiSpec(openApiString: string): Observable<OpenAPIV2.Document> {\n    return new Observable((observer) => {\n      try {\n        // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n        const content: OpenAPIV2.Document = yaml.load(openApiString) as OpenAPIV2.Document;\n        const result =\n          content.swagger === '2.0' ? this.validatorV2.validate(content) : this.validatorV3.validate(content);\n\n        if (result.errors.length) {\n          observer.error(result.errors.map((err) => `${err.instancePath} ${err.message}`.trim()));\n        } else {\n          observer.next(content);\n        }\n      } catch (error) {\n        observer.error(['file content is invalid yaml']);\n      }\n      observer.complete();\n    });\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 12
            },
            "type": "injectable"
        },
        {
            "name": "OrbitalAdminService",
            "id": "injectable-OrbitalAdminService-8dcc4b58f5ea87baaefc5fb433e1d8a8105c4c40b71999147ed62f1161a2c947fd03e5f1e004c539d051200cfd08036717724c87636f19b8d0410169868f6479",
            "file": "src/app/services/orbital-admin/orbital-admin.service.ts",
            "properties": [
                {
                    "name": "http_request_timeout_ms",
                    "defaultValue": "3000",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        144
                    ]
                }
            ],
            "methods": [
                {
                    "name": "deleteMockDefinition",
                    "args": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "mockDefId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 78,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRemoves the specified mock definition from the orbital server\n\n",
                    "description": "<p>Removes the specified mock definition from the orbital server</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2652,
                                "end": 2655,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "url"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2646,
                                "end": 2651,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>the orbital server url</p>\n"
                        },
                        {
                            "name": {
                                "pos": 2691,
                                "end": 2700,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "mockDefId"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2685,
                                "end": 2690,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>the title of the mock definition that will be removed</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 2761,
                                "end": 2768,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "returns"
                            },
                            "comment": "<p>a boolean indicating if the mockdefinition was removed successfully both the orbital server.</p>\n"
                        }
                    ]
                },
                {
                    "name": "deleteMockDefinitions",
                    "args": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "mockdefinitions",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<boolean[]>",
                    "typeParameters": [],
                    "line": 97,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDeletes a list of Mockdefinitions to the server\n",
                    "description": "<p>Deletes a list of Mockdefinitions to the server</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 3376,
                                "end": 3379,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "url"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 3370,
                                "end": 3375,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>The url to delete the Mockdefinitions from\nDeletes a list of Mockdefinitions to the server</p>\n"
                        },
                        {
                            "name": {
                                "pos": 3488,
                                "end": 3503,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "mockdefinitions"
                            },
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 3482,
                                "end": 3487,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>The mockdefinitions to delete</p>\n"
                        }
                    ]
                },
                {
                    "name": "exportMockDefinition",
                    "args": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "mockdefinition",
                            "type": "MockDefinition",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nPOSTs a Mockdefinition to the server\n",
                    "description": "<p>POSTs a Mockdefinition to the server</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1451,
                                "end": 1454,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "url"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1445,
                                "end": 1450,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>The url to post the mockdefinition to</p>\n"
                        },
                        {
                            "name": {
                                "pos": 1505,
                                "end": 1519,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "mockdefinition"
                            },
                            "type": "MockDefinition",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1499,
                                "end": 1504,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>The mockdefinition to be posted</p>\n"
                        }
                    ]
                },
                {
                    "name": "exportMockDefinitions",
                    "args": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "mockdefinitions",
                            "type": "MockDefinition[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<boolean[]>",
                    "typeParameters": [],
                    "line": 67,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nPOSTs a list of Mockdefinitions to the server\n",
                    "description": "<p>POSTs a list of Mockdefinitions to the server</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2192,
                                "end": 2195,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "url"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2186,
                                "end": 2191,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>The url to post the Mockdefinitions to\nPOSTs a list of Mockdefinitions to the server</p>\n"
                        },
                        {
                            "name": {
                                "pos": 2298,
                                "end": 2313,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "mockdefinitions"
                            },
                            "type": "MockDefinition[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2292,
                                "end": 2297,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>The mockdefinitions to export</p>\n"
                        }
                    ]
                },
                {
                    "name": "get",
                    "args": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<MockDefinition>",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSends a GET request to get a mock definition; the URL should not have a trailing slash\n",
                    "description": "<p>Sends a GET request to get a mock definition; the URL should not have a trailing slash</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 742,
                                "end": 745,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "url"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 736,
                                "end": 741,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>The url to send the GET request to</p>\n"
                        },
                        {
                            "name": {
                                "pos": 793,
                                "end": 795,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "id"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 787,
                                "end": 792,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>The mock definition id to get</p>\n"
                        }
                    ]
                },
                {
                    "name": "getAll",
                    "args": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<MockDefinition[]>",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSends a GET all request to a specified server\n",
                    "description": "<p>Sends a GET all request to a specified server</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1134,
                                "end": 1137,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "url"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1128,
                                "end": 1133,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>The url to send the GET request to</p>\n"
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { NGXLogger } from 'ngx-logger';\nimport { MockDefinition } from 'src/app/models/mock-definition/mock-definition.model';\nimport { Observable, forkJoin, throwError } from 'rxjs';\nimport { catchError, map, timeout } from 'rxjs/operators';\nimport { cloneDeep } from 'lodash';\nimport * as HttpStatus from 'http-status-codes';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OrbitalAdminService {\n  readonly http_request_timeout_ms = 3000;\n\n  constructor(private httpClient: HttpClient, private logger: NGXLogger) {}\n\n  /**\n   * Sends a GET request to get a mock definition; the URL should not have a trailing slash\n   * @param url The url to send the GET request to\n   * @param id The mock definition id to get\n   */\n  get(url: string, id: string): Observable<MockDefinition> {\n    this.logger.debug(`Sent GET request to ${url}/${id}`);\n    return this.httpClient.get<MockDefinition>(`${url}/${id}`).pipe(timeout(this.http_request_timeout_ms));\n  }\n\n  /**\n   * Sends a GET all request to a specified server\n   * @param url The url to send the GET request to\n   */\n  getAll(url: string): Observable<MockDefinition[]> {\n    this.logger.debug(`Sent GET request to ${url}`);\n\n    return this.httpClient.get<MockDefinition[]>(url).pipe(timeout(this.http_request_timeout_ms));\n  }\n\n  /**\n   * POSTs a Mockdefinition to the server\n   * @param url The url to post the mockdefinition to\n   * @param mockdefinition The mockdefinition to be posted\n   */\n  exportMockDefinition(url: string, mockdefinition: MockDefinition): Observable<boolean> {\n    this.logger.debug('Mockdefinition has been exported: ', mockdefinition);\n    const mockDefinitionToExport = cloneDeep(mockdefinition);\n\n    this.logger.debug('Mockdefinition in JSON format: ', mockDefinitionToExport);\n\n    return this.httpClient\n      .post<boolean>(url, mockDefinitionToExport, {\n        headers: new HttpHeaders({\n          'Content-Type': 'application/json; charset=utf-8',\n        }),\n      })\n      .pipe(\n        catchError((error) => {\n          return throwError(error);\n        })\n      );\n  }\n\n  /**\n   * @param url The url to post the Mockdefinitions to\n   * POSTs a list of Mockdefinitions to the server\n   * @param mockdefinitions The mockdefinitions to export\n   */\n  exportMockDefinitions(url: string, mockdefinitions: MockDefinition[]): Observable<boolean[]> {\n    return forkJoin(mockdefinitions.map((mockdefinition) => this.exportMockDefinition(url, mockdefinition)));\n  }\n\n  /**\n   * Removes the specified mock definition from the orbital server\n   *\n   * @param url the orbital server url\n   * @param mockDefId the title of the mock definition that will be removed\n   * @returns a boolean indicating if the mockdefinition was removed successfully both the orbital server.\n   */\n  deleteMockDefinition(url: string, mockDefId: string): Observable<boolean> {\n    const fullURL = `${url}/${mockDefId}`;\n\n    return this.httpClient\n      .delete<boolean>(fullURL, { headers: new HttpHeaders({}), observe: 'response', responseType: 'json' })\n      .pipe(\n        catchError((error) => {\n          this.logger.error(error);\n          return throwError(error);\n        }),\n        map((deleteMockResult) => deleteMockResult.status === HttpStatus.StatusCodes.OK)\n      );\n  }\n\n  /**\n   * @param url The url to delete the Mockdefinitions from\n   * Deletes a list of Mockdefinitions to the server\n   * @param mockdefinitions The mockdefinitions to delete\n   */\n  deleteMockDefinitions(url: string, mockdefinitions: string[]): Observable<boolean[]> {\n    return forkJoin(mockdefinitions.map((mockdefinition) => this.deleteMockDefinition(url, mockdefinition)));\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "httpClient",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "logger",
                        "type": "NGXLogger",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "httpClient",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "logger",
                        "type": "NGXLogger",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ReadFileService",
            "id": "injectable-ReadFileService-3a7b19d2da7052f62a4a508f667ad0717aa133933098c1428f298a03bb9407ad7b8160e6f5aea81488949bddbb08af434486a78544922511f254702623f341f8",
            "file": "src/app/services/read-file/read-file.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "read",
                    "args": [
                        {
                            "name": "file",
                            "type": "File",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<string>",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nTakes a file as input and returns a promise that will resolve to a string representing\nthe contents of the file\n",
                    "description": "<p>Takes a file as input and returns a promise that will resolve to a string representing\nthe contents of the file</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 375,
                                "end": 379,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "file"
                            },
                            "type": "File",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 369,
                                "end": 374,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>an Object representing the file to read</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 426,
                                "end": 433,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "returns"
                            },
                            "comment": "<p>a promise containing a string representing the file contents</p>\n"
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { NGXLogger } from 'ngx-logger';\nimport { Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ReadFileService {\n  constructor(private logger: NGXLogger) {}\n\n  /**\n   * Takes a file as input and returns a promise that will resolve to a string representing\n   * the contents of the file\n   * @param file an Object representing the file to read\n   * @returns a promise containing a string representing the file contents\n   */\n  read(file: File): Observable<string> {\n    const fileReader = new FileReader();\n    return new Observable((observer) => {\n      fileReader.readAsText(file);\n      fileReader.onload = () => {\n        // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n        const contentString = fileReader.result as string;\n        this.logger.debug('File read succeeded');\n        observer.next(contentString);\n      };\n      fileReader.onerror = (ev: ProgressEvent): void => {\n        this.logger.debug('There was an error reading the file');\n        observer.error(ev);\n      };\n    });\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "logger",
                        "type": "NGXLogger",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 8,
                "jsdoctags": [
                    {
                        "name": "logger",
                        "type": "NGXLogger",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ValidJsonService",
            "id": "injectable-ValidJsonService-652847baac44382bf290918c9175b7724884c57affc77f86bdc6f0ceaff91fb898b19c0ca1757a30e063e38a8f3ea3f0a8589ae38b7a95cd7a2aaa45e27e4fea",
            "file": "src/app/services/valid-json/valid-json.service.ts",
            "properties": [
                {
                    "name": "getValidator",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        124
                    ]
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { AbstractControl, ValidationErrors } from '@angular/forms';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ValidJsonService {\n  static getValidator =\n    (required: boolean = true) =>\n    (control: AbstractControl): ValidationErrors | null => {\n      if (!control.value) {\n        return required ? { required: true } : null;\n      }\n\n      try {\n        const value = JSON.parse(control.value);\n\n        // Yes, `typeof []` and `typeof null` returns 'object'\n        if (typeof value !== 'object' || Array.isArray(value) || value === null) {\n          return { top_level_object: 'The top-level JSON must be an object' };\n        }\n\n        if (!Object.keys(value).length && required) {\n          return { empty: 'The top-level JSON object cannot be empty' };\n        }\n      } catch (error: unknown) {\n        return { invalid: 'The content is not valid JSON' };\n      }\n\n      return null;\n    };\n}\n",
            "type": "injectable"
        }
    ],
    "guards": [
        {
            "name": "OverviewRedirectService",
            "id": "injectable-OverviewRedirectService-39232f06d2ef391c3727809e698def3db63ce66d5349077ff582e415873a701d1d27c3a8cb336385071fd08106d9f0648ba0b5a77d3bcdc56981ffb17cdcd84e",
            "file": "src/app/services/overview-redirect/overview-redirect.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "canActivate",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nNavigates to the homepage if the mock definition store is not initialized;\nalways returns true\n",
                    "description": "<p>Navigates to the homepage if the mock definition store is not initialized;\nalways returns true</p>\n"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { CanActivate, Router } from '@angular/router';\nimport { DesignerStore } from '../../store/designer-store';\n\n@Injectable({\n  providedIn: 'root',\n})\n\n/**\n * Redirects to the homepage if the user goes to an internal route which requires\n * a mock definition to be loaded\n */\nexport class OverviewRedirectService implements CanActivate {\n  constructor(private store: DesignerStore, private router: Router) {}\n\n  /**\n   * Navigates to the homepage if the mock definition store is not initialized;\n   * always returns true\n   */\n  canActivate() {\n    if (!this.store.state.mockDefinition) {\n      this.router.navigate(['/']);\n    }\n    return true;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "DesignerStore",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "DesignerStore",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "guard"
        }
    ],
    "interceptors": [],
    "classes": [],
    "directives": [],
    "components": [
        {
            "name": "AppComponent",
            "id": "component-AppComponent-894355d2937f09cc0fa367ce1778b752c7f2a80b757bf2ed09617c79715db585546ffc26e3bd99ba7bec79d0b77dec0e2750e34a3f6a70b215312c4c9305b2bb",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss'],\n})\nexport class AppComponent {}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".header {\n  background-color: #e0e0e0;\n  width: 100vw;\n  height: 7.529vh;\n  box-shadow: 0px 4px 4px rgba(0, 0, 0, 0.24), 0px 0px 4px rgba(0, 0, 0, 0.12);\n\n  h5 {\n    margin: 0;\n    font-weight: 500;\n    font-size: 1.5em;\n    line-height: 23px;\n    margin-left: 1.5em;\n  }\n}\n\n.content {\n  width: 100vw;\n  height: auto;\n  min-height: 100vh-7.529vh;\n}\n",
                    "styleUrl": "./app.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<div>\n  <div class=\"header row center-vt\">\n    <h5>\n      <a [routerLink]=\"['/']\"><img src=\"assets/Orbital_Logo.svg\" height=\"50%\" width=\"50%\" /></a>\n    </h5>\n  </div>\n  <div class=\"content row center-hr\">\n    <router-outlet></router-outlet>\n  </div>\n</div>\n"
        },
        {
            "name": "BlankComponent",
            "id": "component-BlankComponent-698d9a983f52f3bae450805005bc76374b6726f5c3794a86c662bcd2e70daabc85e17f9aedd448813c754157fc23a33befef2dcbf814239f7f0df02d01057dd3",
            "file": "src/app/shared/components/test/blank.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-blank-component",
            "styleUrls": [],
            "styles": [],
            "template": "",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-blank-component',\n  template: '',\n})\nexport class BlankComponent {}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "BodyRuleFormComponent",
            "id": "component-BodyRuleFormComponent-72585633a31eafc4a1f94925df7179d71a9c6044d1c6e2937d9c1bab0fc0e809403a6c620ce19ee4f61f8c61a941f0acee8a20004f9dc72a8f92fce8ddd18bf3",
            "file": "src/app/components/scenario-editor/body-rule-form/body-rule-form.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => BodyRuleFormComponent), multi: true,\n}",
                    "type": "component"
                },
                {
                    "name": "{\n    provide: NG_VALIDATORS, useExisting: forwardRef(() => BodyRuleFormComponent), multi: true,\n}",
                    "type": "component"
                }
            ],
            "selector": "app-body-rule-form",
            "styleUrls": [
                "./body-rule-form.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./body-rule-form.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "itemName",
                    "defaultValue": "'Body Match Rule'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 44,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "itemNamePlural",
                    "defaultValue": "'Body Match Rules'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 45,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "form",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "newItemIndex",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "null",
                    "optional": false,
                    "description": "",
                    "line": 47
                },
                {
                    "name": "onChange",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<void>",
                    "optional": false,
                    "description": "",
                    "line": 174,
                    "modifierKind": [
                        144
                    ]
                },
                {
                    "name": "onTouched",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<void>",
                    "optional": false,
                    "description": "",
                    "line": 175,
                    "modifierKind": [
                        144
                    ]
                },
                {
                    "name": "subscriptions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription[]",
                    "optional": false,
                    "description": "",
                    "line": 168,
                    "modifierKind": [
                        121,
                        144
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "addItem",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 79,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "itemIsDuplicated",
                    "args": [
                        {
                            "name": "item",
                            "type": "BodyRuleItemFormValues | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 104,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nTests whether the given item already exists\n",
                    "description": "<p>Tests whether the given item already exists</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 3080,
                                "end": 3084,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "item"
                            },
                            "type": "BodyRuleItemFormValues | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 3074,
                                "end": 3079,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>the item to test</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 3108,
                                "end": 3115,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "returns"
                            },
                            "comment": "<p>true if the item is duplicated, false otherwise</p>\n"
                        }
                    ]
                },
                {
                    "name": "itemIsDuplicated",
                    "args": [
                        {
                            "name": "items",
                            "type": "BodyRuleFormValues",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "item",
                            "type": "BodyRuleItemFormValues | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 115,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nTests whether the given item already exists in the provided list\n",
                    "description": "<p>Tests whether the given item already exists in the provided list</p>\n",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 3440,
                                "end": 3445,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "items"
                            },
                            "type": "BodyRuleFormValues",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 3434,
                                "end": 3439,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>the list of items to test against</p>\n"
                        },
                        {
                            "name": {
                                "pos": 3492,
                                "end": 3496,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "item"
                            },
                            "type": "BodyRuleItemFormValues | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 3486,
                                "end": 3491,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>the item to test (should be a reference from the provided list to avoid self-duplicate detection)</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 3601,
                                "end": 3608,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "returns"
                            },
                            "comment": "<p>true if the item is duplicated, false otherwise</p>\n"
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 170,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "value",
                                    "type": "BodyRuleFormValues",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 177,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "value",
                                    "type": "BodyRuleFormValues",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": []
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 181,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeItemHandler",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 90,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHandle item removal actions triggered by a child form button\n",
                    "description": "<p>Handle item removal actions triggered by a child form button</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2619,
                                "end": 2624,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "index"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2613,
                                "end": 2618,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>the index of the item to remove</p>\n"
                        }
                    ]
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 68,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "validate",
                    "args": [
                        {
                            "name": "_",
                            "type": "FormControl",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ValidationErrors | null",
                    "typeParameters": [],
                    "line": 64,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "_",
                            "type": "FormControl",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "validateNoDuplicates",
                    "args": [
                        {
                            "name": "formArray",
                            "type": "FormArray",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ValidationErrors | null",
                    "typeParameters": [],
                    "line": 138,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nA reactive forms validator function that validates a FormArray containing kvp controls\n",
                    "description": "<p>A reactive forms validator function that validates a FormArray containing kvp controls</p>\n",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 4179,
                                "end": 4188,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "formArray"
                            },
                            "type": "FormArray",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 4173,
                                "end": 4178,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>the FormArray object to validate</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 4228,
                                "end": 4235,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "returns"
                            },
                            "comment": "<p>a ValidationErrors object containing any errors, or null if there are no errors</p>\n"
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "values",
                            "type": "BodyRuleFormValues | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 72,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "values",
                            "type": "BodyRuleFormValues | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectorRef, Component, Input, OnDestroy, OnInit, forwardRef } from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport {\n  AbstractControl,\n  ControlValueAccessor,\n  FormArray,\n  FormBuilder,\n  FormControl,\n  FormGroup,\n  NG_VALIDATORS,\n  NG_VALUE_ACCESSOR,\n  ValidationErrors,\n  Validator,\n} from '@angular/forms';\nimport { BodyRuleItemFormComponent, BodyRuleItemFormValues } from './body-rule-item-form/body-rule-item-form.component';\n\nexport type BodyRuleFormValues = BodyRuleItemFormValues[];\n\n@Component({\n  selector: 'app-body-rule-form',\n  templateUrl: './body-rule-form.component.html',\n  styleUrls: ['./body-rule-form.component.scss'],\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => BodyRuleFormComponent),\n      multi: true,\n    },\n    {\n      provide: NG_VALIDATORS,\n      useExisting: forwardRef(() => BodyRuleFormComponent),\n      multi: true,\n    },\n  ],\n})\nexport class BodyRuleFormComponent implements ControlValueAccessor, Validator, OnInit, OnDestroy {\n  form: FormGroup;\n\n  get formArray(): FormArray {\n    // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n    return this.form.get('formArray') as FormArray;\n  }\n\n  @Input() itemName = 'Body Match Rule';\n  @Input() itemNamePlural = 'Body Match Rules';\n\n  newItemIndex = null;\n\n  constructor(private formBuilder: FormBuilder, private cdRef: ChangeDetectorRef) {}\n\n  ngOnInit() {\n    this.form = this.formBuilder.group({\n      formArray: this.formBuilder.array([], BodyRuleFormComponent.validateNoDuplicates),\n    });\n\n    this.subscriptions.push(\n      this.formArray.valueChanges.subscribe((values: BodyRuleFormValues | null) => {\n        this.onChange.forEach((fn) => fn(values));\n        this.onTouched.forEach((fn) => fn());\n      })\n    );\n  }\n\n  validate(_: FormControl): ValidationErrors | null {\n    return this.formArray.valid ? null : { body_rule: true };\n  }\n\n  setDisabledState(isDisabled: boolean): void {\n    isDisabled ? this.formArray.disable() : this.formArray.enable();\n  }\n\n  writeValue(values?: BodyRuleFormValues | null): void {\n    this.formArray.clear({ emitEvent: false });\n    if (values !== null && values !== undefined) {\n      values.forEach((item) => this.formArray.push(BodyRuleItemFormComponent.buildForm(item), { emitEvent: false }));\n    }\n  }\n\n  addItem() {\n    this.newItemIndex = this.formArray.length;\n    const itemForm = BodyRuleItemFormComponent.buildForm({});\n    this.formArray.push(itemForm);\n    this.cdRef.detectChanges();\n  }\n\n  /**\n   * Handle item removal actions triggered by a child form button\n   * @param index the index of the item to remove\n   */\n  removeItemHandler(index: number) {\n    if (!this.formArray.length || index < 0 || index >= this.formArray.length) {\n      throw new Error(`Unable to remove item, index (${index}) out of bounds.`);\n    }\n    this.formArray.removeAt(index);\n    this.formArray.controls.forEach((c) => c.updateValueAndValidity());\n    this.cdRef.detectChanges();\n  }\n\n  /**\n   * Tests whether the given item already exists\n   * @param item the item to test\n   * @returns true if the item is duplicated, false otherwise\n   */\n  itemIsDuplicated(item: BodyRuleItemFormValues | null): boolean {\n    const items = this.formArray.value ?? [];\n    return BodyRuleFormComponent.itemIsDuplicated(items, item);\n  }\n\n  /**\n   * Tests whether the given item already exists in the provided list\n   * @param items the list of items to test against\n   * @param item the item to test (should be a reference from the provided list to avoid self-duplicate detection)\n   * @returns true if the item is duplicated, false otherwise\n   */\n  static itemIsDuplicated(items: BodyRuleFormValues, item: BodyRuleItemFormValues | null): boolean {\n    if (item) {\n      for (const other of items) {\n        if (item === other) {\n          continue;\n        }\n\n        const itemIsDuplicated = item.type === other.type && item.value === other.value;\n\n        if (itemIsDuplicated) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * A reactive forms validator function that validates a FormArray containing kvp controls\n   * @param formArray the FormArray object to validate\n   * @returns a ValidationErrors object containing any errors, or null if there are no errors\n   */\n  static validateNoDuplicates(formArray: FormArray): ValidationErrors | null {\n    const items: BodyRuleFormValues = formArray.value ?? [];\n    const controls: AbstractControl[] = formArray.controls;\n    let error: ValidationErrors | null = null;\n\n    for (let i = 0; i < controls.length; i++) {\n      const control = controls[i];\n      const itemIsDuplicated = BodyRuleFormComponent.itemIsDuplicated(items, items[i]);\n\n      if (itemIsDuplicated !== control.hasError('duplicate')) {\n        if (itemIsDuplicated) {\n          error = { duplicate: 'A duplicate item exists. Duplicates are not allowed.' };\n          control.setErrors({\n            ...(control.errors ?? {}),\n            ...error,\n          });\n        } else {\n          const { duplicate: _, ...errors } = control.errors;\n          control.setErrors(Object.keys(errors).length ? errors : null);\n        }\n      }\n    }\n\n    return error;\n  }\n\n  /*\n   * Boilerplate Code Below Here\n   */\n\n  private readonly subscriptions: Subscription[] = [];\n\n  ngOnDestroy(): void {\n    this.subscriptions.forEach((s) => s.unsubscribe());\n  }\n\n  readonly onChange: Array<(value: BodyRuleFormValues) => void> = [];\n  readonly onTouched: Array<() => void> = [];\n\n  registerOnChange(fn: (value: BodyRuleFormValues) => void): void {\n    this.onChange.push(fn);\n  }\n\n  registerOnTouched(fn: () => void): void {\n    this.onTouched.push(fn);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".item-form {\n  margin-bottom: 0.5rem;\n}\n\n.mat-divider {\n  margin: 1.25rem;\n}\n\n.row {\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  align-items: center;\n  padding-left: 0.5rem;\n  padding-right: 0.5rem;\n}\n\n.justify-content-center {\n  justify-content: center;\n}\n",
                    "styleUrl": "./body-rule-form.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cdRef",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 47,
                "jsdoctags": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cdRef",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "ControlValueAccessor",
                "Validator",
                "OnInit",
                "OnDestroy"
            ],
            "accessors": {
                "formArray": {
                    "name": "formArray",
                    "getSignature": {
                        "name": "formArray",
                        "type": "",
                        "returnType": "FormArray",
                        "line": 39
                    }
                }
            },
            "templateData": "<ng-container [formGroup]=\"form\">\n  <div class=\"item-form\" formArrayName=\"formArray\" *ngFor=\"let ctrl of formArray.controls; let i = index\">\n    <app-body-rule-item-form\n      [mode]=\"newItemIndex === i ? 'edit' : 'view'\"\n      [formControlName]=\"i\"\n      (removeItemEvent)=\"removeItemHandler(i)\"\n      [errors]=\"ctrl.errors | getStringErrors\"\n    ></app-body-rule-item-form>\n  </div>\n\n  <mat-card>\n    <div *ngIf=\"!formArray.length\" class=\"row justify-content-center\">\n      <p>It looks like you don't have any {{ itemNamePlural }}. Click on the add button below to get started.</p>\n    </div>\n    <div *ngIf=\"formArray.length\" class=\"row justify-content-center\">\n      <p>Add a new {{ itemName }}.</p>\n    </div>\n    <div class=\"row justify-content-center\">\n      <button mat-mini-fab color=\"primary\" (click)=\"addItem()\">\n        <mat-icon>add</mat-icon>\n      </button>\n    </div>\n  </mat-card>\n</ng-container>\n"
        },
        {
            "name": "BodyRuleItemFormComponent",
            "id": "component-BodyRuleItemFormComponent-6b4dc1332b641f62ca7c87bfae9f002d36d1b3151197053dedeecbb0ae87be0b332d8c917588785f3c5a0bfaaab396f2b5a774a355f8d78f2105db82bc0693ee",
            "file": "src/app/components/scenario-editor/body-rule-form/body-rule-item-form/body-rule-item-form.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => BodyRuleItemFormComponent), multi: true,\n}",
                    "type": "component"
                },
                {
                    "name": "{\n    provide: NG_VALIDATORS, useExisting: forwardRef(() => BodyRuleItemFormComponent), multi: true,\n}",
                    "type": "component"
                }
            ],
            "selector": "app-body-rule-item-form",
            "styleUrls": [
                "./body-rule-item-form.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./body-rule-item-form.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "errors",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 69,
                    "type": "string[]",
                    "decorators": []
                },
                {
                    "name": "itemIsDuplicatedEvent",
                    "defaultValue": "new EventEmitter<boolean>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 71,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "mode",
                    "defaultValue": "'view'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 70,
                    "type": "\"view\" | \"edit\"",
                    "decorators": []
                },
                {
                    "name": "pathMaxLength",
                    "defaultValue": "3000",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 72,
                    "type": "3000",
                    "decorators": []
                },
                {
                    "name": "title",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 68,
                    "type": "\"\"",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "addItemEvent",
                    "defaultValue": "new EventEmitter<BodyRuleItemFormValues>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 65,
                    "type": "EventEmitter"
                },
                {
                    "name": "removeItemEvent",
                    "defaultValue": "new EventEmitter<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 66,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "BodyRuleType",
                    "defaultValue": "BodyRuleType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 78
                },
                {
                    "name": "currentMatchConditions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type[]",
                    "optional": false,
                    "description": "",
                    "line": 94
                },
                {
                    "name": "defaults",
                    "defaultValue": "{\n    ruleType: null,\n    ruleCondition: null,\n    value: '{}',\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "InternalBodyRuleItemFormValues",
                    "optional": false,
                    "description": "",
                    "line": 101
                },
                {
                    "name": "form",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 48
                },
                {
                    "name": "initValueData",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 97
                },
                {
                    "name": "jsonRuleConditions",
                    "defaultValue": "[\n    { value: JsonRuleCondition.CONTAINS, label: 'Contains' },\n    { value: JsonRuleCondition.EQUALITY, label: 'Equality' },\n    { value: JsonRuleCondition.PATH, label: 'Path' },\n    { value: JsonRuleCondition.SCHEMA, label: 'Schema' },\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 87,
                    "modifierKind": [
                        144
                    ]
                },
                {
                    "name": "onChange",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<void>",
                    "optional": false,
                    "description": "",
                    "line": 362,
                    "modifierKind": [
                        144
                    ]
                },
                {
                    "name": "onTouched",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<void>",
                    "optional": false,
                    "description": "",
                    "line": 363,
                    "modifierKind": [
                        144
                    ]
                },
                {
                    "name": "onValidationChange",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<void>",
                    "optional": false,
                    "description": "",
                    "line": 364,
                    "modifierKind": [
                        144
                    ]
                },
                {
                    "name": "ruleTypes",
                    "defaultValue": "[\n    { value: BodyRuleType.TEXT, label: 'Text' },\n    { value: BodyRuleType.JSON, label: 'JSON' },\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 74,
                    "modifierKind": [
                        144
                    ]
                },
                {
                    "name": "subscriptions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription[]",
                    "optional": false,
                    "description": "",
                    "line": 356,
                    "modifierKind": [
                        121,
                        144
                    ]
                },
                {
                    "name": "textRuleConditions",
                    "defaultValue": "[\n    { value: TextRuleCondition.STARTS_WITH, label: 'Starts With' },\n    { value: TextRuleCondition.ENDS_WITH, label: 'Ends With' },\n    { value: TextRuleCondition.EQUALS, label: 'Equals' },\n    { value: TextRuleCondition.CONTAINS, label: 'Contains' },\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 80,
                    "modifierKind": [
                        144
                    ]
                },
                {
                    "name": "valueDataWasFocused",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 98
                },
                {
                    "name": "valueEditor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "JsonEditorComponent",
                    "optional": false,
                    "description": "",
                    "line": 99,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "JsonEditorComponent, {static: false}"
                        }
                    ]
                },
                {
                    "name": "valueEditorOptions",
                    "defaultValue": "new JsonEditorOptions()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 96
                }
            ],
            "methodsClass": [
                {
                    "name": "adaptExternalFormatToInternal",
                    "args": [
                        {
                            "name": "values",
                            "type": "Partial<BodyRuleItemFormValues> | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Partial | null",
                    "typeParameters": [],
                    "line": 145,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "values",
                            "type": "Partial<BodyRuleItemFormValues> | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "adaptInternalFormatToExternal",
                    "args": [
                        {
                            "name": "values",
                            "type": "InternalBodyRuleItemFormValues | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "BodyRuleItemFormValues | null",
                    "typeParameters": [],
                    "line": 141,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "values",
                            "type": "InternalBodyRuleItemFormValues | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "buildForm",
                    "args": [
                        {
                            "name": "item",
                            "type": "Partial<BodyRuleItemFormValues>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "FormGroup",
                    "typeParameters": [],
                    "line": 276,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "Partial<BodyRuleItemFormValues>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "editItem",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 239,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getConditionText",
                    "args": [
                        {
                            "name": "condition",
                            "type": "TextRuleCondition | JsonRuleCondition | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 220,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "condition",
                            "type": "TextRuleCondition | JsonRuleCondition | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getExternalRuleType",
                    "args": [
                        {
                            "name": "rule",
                            "type": "Partial<InternalBodyRuleItemFormValues> | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "RuleType",
                    "typeParameters": [],
                    "line": 286,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "rule",
                            "type": "Partial<InternalBodyRuleItemFormValues> | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getInternalRuleType",
                    "args": [
                        {
                            "name": "type",
                            "type": "RuleType",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "InternalRuleType",
                    "typeParameters": [],
                    "line": 325,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "type",
                            "type": "RuleType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getTypeText",
                    "args": [
                        {
                            "name": "type",
                            "type": "BodyRuleType | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 216,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "type",
                            "type": "BodyRuleType | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleIsDuplicatedEvent",
                    "args": [
                        {
                            "name": "isDuplicated",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 151,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "isDuplicated",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleValueSetupForType",
                    "args": [
                        {
                            "name": "bodyRuleType",
                            "type": "BodyRuleType | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 165,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "bodyRuleType",
                            "type": "BodyRuleType | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 358,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 109,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "value",
                                    "type": "BodyRuleItemFormValues",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 366,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "value",
                                    "type": "BodyRuleItemFormValues",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": []
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 370,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnValidatorChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": []
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 374,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeItem",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 243,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "safeParseJson",
                    "args": [
                        {
                            "name": "json",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "object",
                    "typeParameters": [],
                    "line": 268,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "json",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "saveItem",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 234,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setCurrentMatchConditions",
                    "args": [
                        {
                            "name": "value",
                            "type": "BodyRuleType | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 189,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "BodyRuleType | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 251,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "validate",
                    "args": [
                        {
                            "name": "_",
                            "type": "FormControl",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ValidationErrors | null",
                    "typeParameters": [],
                    "line": 247,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "_",
                            "type": "FormControl",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "Partial<BodyRuleItemFormValues> | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 255,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "Partial<BodyRuleItemFormValues> | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, OnDestroy, OnInit, Output, ViewChild, forwardRef } from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport {\n  ControlValueAccessor,\n  FormBuilder,\n  FormControl,\n  FormGroup,\n  NG_VALIDATORS,\n  NG_VALUE_ACCESSOR,\n  ValidationErrors,\n  Validator,\n  Validators,\n} from '@angular/forms';\nimport { RuleType } from 'src/app/models/mock-definition/scenario/rule-type';\nimport { JsonEditorComponent, JsonEditorOptions } from 'ang-jsoneditor';\nimport { ValidJsonService } from 'src/app/services/valid-json/valid-json.service';\nimport {\n  BodyRuleType,\n  InternalBodyRuleItemFormValues,\n  InternalRuleType,\n  JsonRuleCondition,\n  TextRuleCondition,\n} from './body-rule-item-form.types';\n\nexport interface BodyRuleItemFormValues {\n  type: RuleType;\n  value: string;\n}\n\n@Component({\n  selector: 'app-body-rule-item-form',\n  templateUrl: './body-rule-item-form.component.html',\n  styleUrls: ['./body-rule-item-form.component.scss'],\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => BodyRuleItemFormComponent),\n      multi: true,\n    },\n    {\n      provide: NG_VALIDATORS,\n      useExisting: forwardRef(() => BodyRuleItemFormComponent),\n      multi: true,\n    },\n  ],\n})\nexport class BodyRuleItemFormComponent implements ControlValueAccessor, Validator, OnInit, OnDestroy {\n  form: FormGroup;\n\n  get ruleType(): FormControl {\n    // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n    return this.form.get('ruleType') as FormControl;\n  }\n\n  get ruleCondition(): FormControl {\n    // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n    return this.form.get('ruleCondition') as FormControl;\n  }\n\n  get value(): FormControl {\n    // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n    return this.form.get('value') as FormControl;\n  }\n\n  @Output() readonly addItemEvent = new EventEmitter<BodyRuleItemFormValues>();\n  @Output() readonly removeItemEvent = new EventEmitter<void>();\n\n  @Input() readonly title = '';\n  @Input() readonly errors: string[] = [];\n  @Input() mode: 'view' | 'edit' = 'view';\n  @Input() readonly itemIsDuplicatedEvent = new EventEmitter<boolean>();\n  @Input() readonly pathMaxLength = 3000;\n\n  readonly ruleTypes = [\n    { value: BodyRuleType.TEXT, label: 'Text' },\n    { value: BodyRuleType.JSON, label: 'JSON' },\n  ];\n  BodyRuleType = BodyRuleType;\n\n  readonly textRuleConditions = [\n    { value: TextRuleCondition.STARTS_WITH, label: 'Starts With' },\n    { value: TextRuleCondition.ENDS_WITH, label: 'Ends With' },\n    { value: TextRuleCondition.EQUALS, label: 'Equals' },\n    { value: TextRuleCondition.CONTAINS, label: 'Contains' },\n  ];\n\n  readonly jsonRuleConditions = [\n    { value: JsonRuleCondition.CONTAINS, label: 'Contains' },\n    { value: JsonRuleCondition.EQUALITY, label: 'Equality' },\n    { value: JsonRuleCondition.PATH, label: 'Path' },\n    { value: JsonRuleCondition.SCHEMA, label: 'Schema' },\n  ];\n\n  currentMatchConditions: { value: number; label: string }[] = [];\n\n  valueEditorOptions = new JsonEditorOptions();\n  initValueData = {};\n  valueDataWasFocused = false;\n  @ViewChild(JsonEditorComponent, { static: false }) valueEditor: JsonEditorComponent;\n\n  defaults: InternalBodyRuleItemFormValues = {\n    ruleType: null,\n    ruleCondition: null,\n    value: '{}',\n  };\n\n  constructor(private formBuilder: FormBuilder) {}\n\n  ngOnInit(): void {\n    this.form = this.formBuilder.group({\n      ruleType: [this.defaults.ruleType, Validators.required],\n      ruleCondition: [{ value: this.defaults.ruleCondition, disabled: true }, Validators.required],\n      value: [this.defaults.value, Validators.required],\n    });\n\n    this.subscriptions.push(\n      this.form.valueChanges.subscribe((value: InternalBodyRuleItemFormValues | null) => {\n        this.onChange.forEach((fn) => fn(this.adaptInternalFormatToExternal(value)));\n        this.onTouched.forEach((fn) => fn());\n      }),\n\n      this.ruleType.valueChanges.subscribe((value: BodyRuleType | null) => {\n        this.setCurrentMatchConditions(value);\n        this.handleValueSetupForType(value);\n      }),\n\n      this.itemIsDuplicatedEvent.subscribe((isDuplicated) => this.handleIsDuplicatedEvent(isDuplicated))\n    );\n\n    this.valueEditorOptions.mode = 'code';\n    this.valueEditorOptions.modes = ['code', 'text'];\n    this.valueEditorOptions.statusBar = true;\n    this.valueEditorOptions.onFocus = () => (this.valueDataWasFocused = true);\n    this.valueEditorOptions.onBlur = () => this.valueDataWasFocused && this.value.markAsTouched();\n    this.valueEditorOptions.onChangeText = (jsonString: string) => {\n      this.value.markAsDirty();\n      this.value.setValue(jsonString);\n    };\n  }\n\n  adaptInternalFormatToExternal(values: InternalBodyRuleItemFormValues | null): BodyRuleItemFormValues | null {\n    return !values ? null : { type: this.getExternalRuleType(values), value: values.value };\n  }\n\n  adaptExternalFormatToInternal(\n    values: Partial<BodyRuleItemFormValues> | null\n  ): Partial<InternalBodyRuleItemFormValues> | null {\n    return !values ? null : { ...this.getInternalRuleType(values.type), value: values.value };\n  }\n\n  handleIsDuplicatedEvent(isDuplicated: boolean) {\n    if (isDuplicated !== this.form.hasError('duplicate')) {\n      if (isDuplicated) {\n        this.form.setErrors({\n          ...(this.form.errors ?? {}),\n          duplicate: 'This item already exists. Duplicates are not allowed.',\n        });\n      } else {\n        const { duplicate: _, ...errors } = this.form.errors;\n        this.form.setErrors(Object.keys(errors).length ? errors : null);\n      }\n    }\n  }\n\n  handleValueSetupForType(bodyRuleType: BodyRuleType | null) {\n    switch (bodyRuleType) {\n      case BodyRuleType.TEXT:\n        this.value.clearValidators();\n        this.value.addValidators(Validators.required);\n        this.value.updateValueAndValidity({ emitEvent: false });\n        break;\n      case BodyRuleType.JSON: {\n        this.value.clearValidators();\n        this.value.addValidators(ValidJsonService.getValidator());\n        const jsonValue = this.safeParseJson(this.value.value ?? this.defaults.value);\n        this.initValueData = jsonValue;\n        this.value.setValue(JSON.stringify(jsonValue), { emitEvent: false });\n        this.value.updateValueAndValidity({ emitEvent: false });\n        break;\n      }\n      case null:\n        break;\n      default: {\n        const _: never = bodyRuleType;\n      }\n    }\n  }\n\n  setCurrentMatchConditions(value: BodyRuleType | null) {\n    const conditionsPreChange = this.currentMatchConditions;\n    switch (value) {\n      case BodyRuleType.TEXT:\n        this.currentMatchConditions = this.textRuleConditions;\n        break;\n      case BodyRuleType.JSON:\n        this.currentMatchConditions = this.jsonRuleConditions;\n        break;\n      case null:\n        this.currentMatchConditions = [];\n        this.ruleCondition.disable({ emitEvent: false });\n        break;\n      default: {\n        const _: never = value;\n      }\n    }\n\n    if (value !== null) {\n      this.ruleCondition.enable({ emitEvent: false });\n    }\n\n    if (this.currentMatchConditions !== conditionsPreChange) {\n      this.ruleCondition.setValue(null, { emitEvent: false });\n    }\n  }\n\n  getTypeText(type: BodyRuleType | null): string {\n    return Object.values(this.ruleTypes).filter((x) => x.value === type)?.[0]?.label ?? ' ';\n  }\n\n  getConditionText(condition: TextRuleCondition | JsonRuleCondition | null): string {\n    const ruleType: BodyRuleType = this.ruleType.value;\n    switch (ruleType) {\n      case BodyRuleType.TEXT:\n        return Object.values(this.textRuleConditions).filter((x) => x.value === condition)?.[0]?.label ?? ' ';\n      case BodyRuleType.JSON:\n        return Object.values(this.jsonRuleConditions).filter((x) => x.value === condition)?.[0]?.label ?? ' ';\n      default: {\n        const _: never = ruleType;\n        return ' ';\n      }\n    }\n  }\n\n  saveItem() {\n    this.mode = 'view';\n    this.initValueData = this.safeParseJson(this.value.value ?? this.defaults.value);\n  }\n\n  editItem() {\n    this.mode = 'edit';\n  }\n\n  removeItem() {\n    this.removeItemEvent.emit();\n  }\n\n  validate(_: FormControl): ValidationErrors | null {\n    return this.form.valid ? null : { body_rule_item: true };\n  }\n\n  setDisabledState(isDisabled: boolean): void {\n    isDisabled ? this.form.disable() : this.form.enable();\n  }\n\n  writeValue(value?: Partial<BodyRuleItemFormValues> | null): void {\n    if (value === null || value === undefined) {\n      this.form.reset(this.defaults, { emitEvent: false });\n    } else {\n      const int_value = this.adaptExternalFormatToInternal(value);\n      this.setCurrentMatchConditions(int_value.ruleType);\n      this.handleValueSetupForType(int_value.ruleType);\n      this.form.patchValue(int_value, { emitEvent: false });\n    }\n    this.initValueData = this.safeParseJson(this.value.value ?? this.defaults.value);\n    this.onValidationChange.forEach((fn) => fn());\n  }\n\n  safeParseJson(json: string): object {\n    try {\n      return JSON.parse(json);\n    } catch (e) {\n      return {};\n    }\n  }\n\n  static buildForm(item: Partial<BodyRuleItemFormValues>): FormGroup {\n    // Note: this form only needs the structure to propagate values, no functionality required\n    const fb = new FormBuilder();\n    const schema: BodyRuleItemFormValues = {\n      type: item.type ?? null,\n      value: item.value ?? null,\n    };\n    return fb.group(schema);\n  }\n\n  getExternalRuleType(rule: Partial<InternalBodyRuleItemFormValues> | null): RuleType {\n    switch (rule?.ruleType) {\n      case BodyRuleType.TEXT:\n        switch (rule?.ruleCondition) {\n          case TextRuleCondition.CONTAINS:\n            return RuleType.TEXTCONTAINS;\n          case TextRuleCondition.EQUALS:\n            return RuleType.TEXTEQUALS;\n          case TextRuleCondition.STARTS_WITH:\n            return RuleType.TEXTSTARTSWITH;\n          case TextRuleCondition.ENDS_WITH:\n            return RuleType.TEXTENDSWITH;\n          default: {\n            const _: never = rule;\n          }\n        }\n        break;\n      case BodyRuleType.JSON:\n        switch (rule?.ruleCondition) {\n          case JsonRuleCondition.CONTAINS:\n            return RuleType.JSONCONTAINS;\n          case JsonRuleCondition.EQUALITY:\n            return RuleType.JSONEQUALITY;\n          case JsonRuleCondition.PATH:\n            return RuleType.JSONPATH;\n          case JsonRuleCondition.SCHEMA:\n            return RuleType.JSONSCHEMA;\n          default: {\n            const _: never = rule;\n          }\n        }\n        break;\n      default: {\n        const _: never = rule;\n      }\n    }\n    return null;\n  }\n\n  getInternalRuleType(type: RuleType): InternalRuleType {\n    switch (type) {\n      case RuleType.NONE:\n      case RuleType.REGEX:\n      case RuleType.ACCEPTALL:\n      case RuleType.JSONCONTAINS:\n        return { ruleType: BodyRuleType.JSON, ruleCondition: JsonRuleCondition.CONTAINS };\n      case RuleType.JSONEQUALITY:\n        return { ruleType: BodyRuleType.JSON, ruleCondition: JsonRuleCondition.EQUALITY };\n      case RuleType.JSONPATH:\n        return { ruleType: BodyRuleType.JSON, ruleCondition: JsonRuleCondition.PATH };\n      case RuleType.JSONSCHEMA:\n        return { ruleType: BodyRuleType.JSON, ruleCondition: JsonRuleCondition.SCHEMA };\n      case RuleType.TEXTCONTAINS:\n        return { ruleType: BodyRuleType.TEXT, ruleCondition: TextRuleCondition.CONTAINS };\n      case RuleType.TEXTEQUALS:\n        return { ruleType: BodyRuleType.TEXT, ruleCondition: TextRuleCondition.EQUALS };\n      case RuleType.TEXTSTARTSWITH:\n        return { ruleType: BodyRuleType.TEXT, ruleCondition: TextRuleCondition.STARTS_WITH };\n      case RuleType.TEXTENDSWITH:\n        return { ruleType: BodyRuleType.TEXT, ruleCondition: TextRuleCondition.ENDS_WITH };\n      default: {\n        const _: never = type;\n      }\n    }\n  }\n\n  /*\n   * Boilerplate Code Below Here\n   */\n\n  private readonly subscriptions: Subscription[] = [];\n\n  ngOnDestroy(): void {\n    this.subscriptions.forEach((s) => s.unsubscribe());\n  }\n\n  readonly onChange: Array<(value: BodyRuleItemFormValues) => void> = [];\n  readonly onTouched: Array<() => void> = [];\n  readonly onValidationChange: Array<() => void> = [];\n\n  registerOnChange(fn: (value: BodyRuleItemFormValues) => void): void {\n    this.onChange.push(fn);\n  }\n\n  registerOnTouched(fn: () => void): void {\n    this.onTouched.push(fn);\n  }\n\n  registerOnValidatorChange(fn: () => void): void {\n    this.onValidationChange.push(fn);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".row {\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  align-items: center;\n  padding-left: 0.5rem;\n  padding-right: 0.5rem;\n}\n\n.row > * {\n  margin-right: 1rem;\n}\n\n.row > *:last-child {\n  margin-right: 0;\n}\n\n.flex-grow {\n  flex-grow: 1;\n}\n\n.flex-grow-2 {\n  flex-grow: 2;\n}\n\n.w-100 {\n  width: 100%;\n}\n\n.hide {\n  display: none;\n}\n\n.mat-error {\n  margin-left: 0.5rem;\n}\n\n.item-title {\n  margin-bottom: 0.5rem;\n}\n\n.match-value {\n  .mat-error {\n    margin-bottom: 0.5em;\n  }\n}\n\n:host ::ng-deep json-editor,\n:host ::ng-deep json-editor .jsoneditor,\n:host ::ng-deep json-editor > div,\n:host ::ng-deep json-editor jsoneditor-outer {\n  height: 25rem;\n}\n",
                    "styleUrl": "./body-rule-item-form.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 105,
                "jsdoctags": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "ControlValueAccessor",
                "Validator",
                "OnInit",
                "OnDestroy"
            ],
            "accessors": {
                "ruleType": {
                    "name": "ruleType",
                    "getSignature": {
                        "name": "ruleType",
                        "type": "",
                        "returnType": "FormControl",
                        "line": 50
                    }
                },
                "ruleCondition": {
                    "name": "ruleCondition",
                    "getSignature": {
                        "name": "ruleCondition",
                        "type": "",
                        "returnType": "FormControl",
                        "line": 55
                    }
                },
                "value": {
                    "name": "value",
                    "getSignature": {
                        "name": "value",
                        "type": "",
                        "returnType": "FormControl",
                        "line": 60
                    }
                }
            },
            "templateData": "<mat-card [formGroup]=\"form\">\n  <div class=\"mat-h3 policy-title\" *ngIf=\"title\">{{ title }}</div>\n\n  <div class=\"row\">\n    <ng-container *ngIf=\"mode === 'view'\">\n      <mat-form-field class=\"flex-grow\">\n        <mat-label>Match Type</mat-label>\n        <input matInput required readonly [value]=\"getTypeText(ruleType.value)\" />\n      </mat-form-field>\n\n      <mat-form-field class=\"flex-grow\">\n        <mat-label>Match Condition</mat-label>\n        <input matInput required readonly [value]=\"getConditionText(ruleCondition.value)\" />\n      </mat-form-field>\n\n      <button mat-icon-button color=\"primary\" (click)=\"editItem()\">\n        <mat-icon>edit</mat-icon>\n      </button>\n    </ng-container>\n\n    <ng-container *ngIf=\"mode === 'edit'\">\n      <mat-form-field class=\"flex-grow\">\n        <mat-label>Match Type</mat-label>\n        <mat-select formControlName=\"ruleType\">\n          <mat-option *ngFor=\"let type of ruleTypes\" [value]=\"type.value\">\n            {{ type.label }}\n          </mat-option>\n        </mat-select>\n      </mat-form-field>\n\n      <mat-form-field class=\"flex-grow\">\n        <mat-label>Match Condition</mat-label>\n        <mat-select formControlName=\"ruleCondition\">\n          <mat-option *ngFor=\"let condition of currentMatchConditions\" [value]=\"condition.value\">\n            {{ condition.label }}\n          </mat-option>\n        </mat-select>\n      </mat-form-field>\n\n      <button mat-icon-button color=\"primary\" [disabled]=\"!form.valid\" (click)=\"saveItem()\">\n        <mat-icon>visibility</mat-icon>\n      </button>\n    </ng-container>\n\n    <button mat-icon-button color=\"warn\" (click)=\"removeItem()\">\n      <mat-icon>delete_forever</mat-icon>\n    </button>\n  </div>\n\n  <ng-container *ngIf=\"ruleType.invalid && ruleType.errors && (ruleType.dirty || ruleType.touched)\">\n    <mat-error *ngIf=\"ruleType.errors.required\">The Match Type is required</mat-error>\n    <mat-error *ngFor=\"let error of ruleType.errors | getStringErrors\">{{ error }}</mat-error>\n  </ng-container>\n  <ng-container *ngIf=\"ruleCondition.invalid && ruleCondition.errors && (ruleCondition.dirty || ruleCondition.touched)\">\n    <mat-error *ngIf=\"ruleCondition.errors.required\">The Match Condition is required</mat-error>\n    <mat-error *ngFor=\"let error of ruleCondition.errors | getStringErrors\">{{ error }}</mat-error>\n  </ng-container>\n  <ng-container *ngIf=\"form.invalid && form.errors && (form.dirty || form.touched)\">\n    <mat-error *ngFor=\"let error of form.errors | getStringErrors\">{{ error }}</mat-error>\n  </ng-container>\n  <mat-error *ngFor=\"let error of errors\">{{ error }}</mat-error>\n\n  <br />\n  <div class=\"match-value\" *ngIf=\"mode !== 'edit' || ruleType.value\">\n    <h3 class=\"mat-h3\" *ngIf=\"mode !== 'edit' || ruleType.value !== BodyRuleType.TEXT\">Match Value *</h3>\n\n    <mat-form-field class=\"w-100\" *ngIf=\"mode === 'edit' && ruleType.value === BodyRuleType.TEXT\">\n      <mat-label>Match Value</mat-label>\n      <textarea matInput rows=\"5\" formControlName=\"value\"></textarea>\n    </mat-form-field>\n\n    <ng-container *ngIf=\"value.invalid && value.errors && (value.dirty || value.touched)\">\n      <mat-error *ngIf=\"value.errors.required\">The Match Value is required</mat-error>\n      <mat-error *ngFor=\"let error of value.errors | getStringErrors\">{{ error }}</mat-error>\n    </ng-container>\n\n    <json-editor\n      *ngIf=\"mode === 'edit' && ruleType.value === BodyRuleType.JSON\"\n      [options]=\"valueEditorOptions\"\n      [data]=\"initValueData\"\n    ></json-editor>\n\n    <div *ngIf=\"mode === 'view'\">{{ value.value }}</div>\n  </div>\n</mat-card>\n"
        },
        {
            "name": "CreateEditMockViewComponent",
            "id": "component-CreateEditMockViewComponent-402dfb60aa9b17736d8eb349b64a95695a483a7952d06085e0223468c9b87926dea3ab899789b9b58c5f55f0553f0d9a6691dab5697dcf6dc21c03fe95e6ee28",
            "file": "src/app/components/create-edit-mock-view/create-edit-mock-view.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-create-edit-mock-view",
            "styleUrls": [
                "./create-edit-mock-view.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./create-edit-mock-view.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "editMode",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "errorMessageToEmitFromCreate",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Record<string | string[]>",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "formGroup",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "keyStore",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "mockDefinitions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MockDefinition[]",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "mockDesc",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "mockId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "mockKey",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "mockTitle",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "mockTokenValid",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "openApiFile",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "selectedMockDefinition",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MockDefinition | null",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "titleList",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 28
                }
            ],
            "methodsClass": [
                {
                    "name": "createMock",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 100,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ncreateMock is a function that is responsible for storing the new MockDefinition\nin the designer store and navigating to the mock editor if the form is valid. If\nthe form is invalid the function does nothing.\n",
                    "description": "<p>createMock is a function that is responsible for storing the new MockDefinition\nin the designer store and navigating to the mock editor if the form is valid. If\nthe form is invalid the function does nothing.</p>\n"
                },
                {
                    "name": "editMock",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 126,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "findSelectedMock",
                    "args": [
                        {
                            "name": "mockId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "mockDefinitions",
                            "type": "MockDefinition[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "MockDefinition",
                    "typeParameters": [],
                    "line": 78,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nFinds mock selected on sidebar and populated the form data\n",
                    "description": "<p>Finds mock selected on sidebar and populated the form data</p>\n",
                    "jsdoctags": [
                        {
                            "name": "mockId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "mockDefinitions",
                            "type": "MockDefinition[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "formToMockDefinition",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<MockDefinition | never>",
                    "typeParameters": [],
                    "line": 192,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nformToMockDefinition method is responsible for creating a new MockDefinition from the\nform values. If the form is invalid then the function will return null, otherwise it uses\nthe form values to create and return a new MockDefinition\n",
                    "description": "<p>formToMockDefinition method is responsible for creating a new MockDefinition from the\nform values. If the form is invalid then the function will return null, otherwise it uses\nthe form values to create and return a new MockDefinition</p>\n"
                },
                {
                    "name": "formToUpdateMockDefinition",
                    "args": [
                        {
                            "name": "oldMockDef",
                            "type": "MockDefinition",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "MockDefinition",
                    "typeParameters": [],
                    "line": 216,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "oldMockDef",
                            "type": "MockDefinition",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "goBack",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 147,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGoes back to the previous location in the app\n",
                    "description": "<p>Goes back to the previous location in the app</p>\n"
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "populateEditData",
                    "args": [
                        {
                            "name": "md",
                            "type": "MockDefinition",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 181,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "md",
                            "type": "MockDefinition",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setOpenApiFile",
                    "args": [
                        {
                            "name": "openApiFileString",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 141,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "openApiFileString",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "validateText",
                    "args": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ValidatorFn",
                    "typeParameters": [],
                    "line": 160,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nValidation for text inputs on this page.\n",
                    "description": "<p>Validation for text inputs on this page.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 5187,
                                "end": 5191,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "name"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 5181,
                                "end": 5186,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<ul>\n<li>the form control name</li>\n</ul>\n"
                        },
                        {
                            "tagName": {
                                "pos": 5222,
                                "end": 5229,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "returns"
                            },
                            "comment": "<p>null, or an error object.</p>\n"
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { Location } from '@angular/common';\nimport { AbstractControl, FormControl, FormGroup, ValidatorFn } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { MockDefinition } from 'src/app/models/mock-definition/mock-definition.model';\nimport { DesignerStore } from 'src/app/store/designer-store';\nimport { NGXLogger } from 'ngx-logger';\nimport { OpenApiSpecService } from 'src/app/services/openapispecservice/open-api-spec.service';\nimport { EMPTY, Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { MockDefinitionService } from 'src/app/services/mock-definition/mock-definition.service';\nimport { recordMap } from 'src/app/models/record';\nimport * as uuid from 'uuid';\n\n@Component({\n  selector: 'app-create-edit-mock-view',\n  templateUrl: './create-edit-mock-view.component.html',\n  styleUrls: ['./create-edit-mock-view.component.scss'],\n})\nexport class CreateEditMockViewComponent implements OnInit {\n  formGroup: FormGroup;\n  private openApiFile: string;\n  private mockDefinitions: MockDefinition[] = [];\n  private mockId: string | null;\n  private keyStore: string;\n\n  editMode: boolean;\n  titleList: string[] = [];\n  selectedMockDefinition: MockDefinition | null;\n\n  //Data variables for edit mode\n  mockTitle: string;\n  mockDesc: string;\n  mockTokenValid: boolean;\n  mockKey: string;\n\n  errorMessageToEmitFromCreate: Record<string, string[]> = {};\n  constructor(\n    private route: ActivatedRoute,\n    private router: Router,\n    private location: Location,\n    private openapiservice: OpenApiSpecService,\n    private mockdefinitionService: MockDefinitionService,\n    private store: DesignerStore,\n    private logger: NGXLogger\n  ) {\n    this.formGroup = new FormGroup({\n      title: new FormControl('', this.validateText('Title')),\n      description: new FormControl(''),\n      validateToken: new FormControl(false),\n    });\n  }\n\n  ngOnInit() {\n    this.mockId = this.route.snapshot.paramMap.get('uuid');\n    this.editMode = !!this.mockId;\n\n    this.store.state$.subscribe((state) => {\n      if (state.mockDefinition) {\n        this.mockDefinitions = recordMap(state.mockDefinitions, (md) => md);\n      }\n    });\n    if (this.editMode) {\n      this.selectedMockDefinition = this.findSelectedMock(this.mockId, this.mockDefinitions);\n      if (!this.selectedMockDefinition) {\n        this.router.navigateByUrl('/endpoint-view');\n      }\n    } else if (this.mockDefinitions.length) {\n      for (const mockDef of this.mockDefinitions) {\n        this.titleList.push(mockDef.metadata.title);\n      }\n    }\n  }\n\n  /**\n   * Finds mock selected on sidebar and populated the form data\n   */\n  findSelectedMock(mockId: string, mockDefinitions: MockDefinition[]): MockDefinition {\n    let foundMock: MockDefinition = null;\n    for (const mockDef of mockDefinitions) {\n      if (mockDef.id === mockId) {\n        foundMock = mockDef;\n      } else {\n        this.titleList.push(mockDef.metadata.title);\n      }\n    }\n    if (foundMock) {\n      foundMock.tokenValidation = !foundMock.tokenValidation ? false : true;\n      this.populateEditData(foundMock);\n      return foundMock;\n    }\n    return null;\n  }\n\n  /**\n   * createMock is a function that is responsible for storing the new MockDefinition\n   * in the designer store and navigating to the mock editor if the form is valid. If\n   * the form is invalid the function does nothing.\n   */\n  createMock() {\n    const observable = this.formToMockDefinition();\n\n    if (observable === EMPTY) {\n      this.logger.debug('Form is invalid');\n      return;\n    }\n    observable.subscribe(\n      (value) => {\n        if (value) {\n          this.logger.debug('MockDefinition created from form ', value);\n          this.store.appendMockDefinition(value);\n          this.store.mockDefinition = value;\n          this.router.navigateByUrl('/endpoint-view');\n        } else {\n          this.logger.log(value);\n        }\n      },\n      (error) => {\n        this.logger.error('openapi file provided is invalid');\n        this.logger.error(error);\n        this.errorMessageToEmitFromCreate['The provided OpenApi file has the following errors '] = error;\n      }\n    );\n  }\n\n  editMock() {\n    const updatedMockDef = this.formToUpdateMockDefinition(this.selectedMockDefinition);\n    const oldTitle = this.selectedMockDefinition.metadata.title;\n\n    if (updatedMockDef.tokenValidation) {\n      const validationScenarios = this.mockdefinitionService.getDefaultValidationScenarios(updatedMockDef.scenarios);\n      updatedMockDef.scenarios = updatedMockDef.scenarios.concat(validationScenarios);\n    }\n\n    this.store.deleteMockDefinitionByTitle(oldTitle);\n    this.store.appendMockDefinition(updatedMockDef);\n    this.store.mockDefinition = updatedMockDef;\n    this.router.navigateByUrl('/endpoint-view');\n  }\n\n  setOpenApiFile(openApiFileString: string) {\n    this.openApiFile = openApiFileString;\n  }\n  /**\n   * Goes back to the previous location in the app\n   */\n  goBack() {\n    this.location.back();\n  }\n\n  get validateToken() {\n    return this.formGroup.get('validateToken');\n  }\n\n  /**\n   * Validation for text inputs on this page.\n   * @param name - the form control name\n   * @returns null, or an error object.\n   */\n  validateText(name: string): ValidatorFn {\n    return (control: AbstractControl): { [key: string]: unknown } | null => {\n      if (control.value !== null && control.value !== undefined) {\n        if (!control.value.length) {\n          return { key: `${name} is required.` };\n        }\n        if (!control.value.trim().length) {\n          return { key: `${name} cannot contain only whitespace` };\n        }\n        if (name === 'Title') {\n          //checks if the current title already exist\n          for (const title of this.titleList) {\n            if (control.value === title) {\n              return { key: `${name} already exists.` };\n            }\n          }\n        }\n      }\n    };\n  }\n\n  populateEditData(md: MockDefinition) {\n    this.formGroup.get('title').setValue(md.metadata.title);\n    this.formGroup.get('description').setValue(md.metadata.description);\n    this.formGroup.get('validateToken').setValue(md.tokenValidation);\n  }\n\n  /**\n   * formToMockDefinition method is responsible for creating a new MockDefinition from the\n   * form values. If the form is invalid then the function will return null, otherwise it uses\n   * the form values to create and return a new MockDefinition\n   */\n  formToMockDefinition(): Observable<MockDefinition | never> {\n    if (this.formGroup.invalid) {\n      this.logger.error('Form is invalid');\n      return EMPTY;\n    }\n    const validate = this.formGroup.value.validateToken;\n    const observable = this.openapiservice.readOpenApiSpec(this.openApiFile).pipe(\n      map((openapi) => {\n        const defaultScenariosPerEndpoint = this.mockdefinitionService.getDefaultScenarios(openapi.paths, validate);\n        return {\n          id: uuid.v4(),\n          metadata: {\n            title: this.formGroup.value.title,\n            description: this.formGroup.value.description,\n          },\n          tokenValidation: validate,\n          openApi: openapi,\n          scenarios: defaultScenariosPerEndpoint,\n        };\n      })\n    );\n    return observable;\n  }\n\n  formToUpdateMockDefinition(oldMockDef: MockDefinition): MockDefinition {\n    const newMockDef: MockDefinition = JSON.parse(JSON.stringify(oldMockDef));\n    newMockDef.metadata = {\n      title: this.formGroup.value.title,\n      description: this.formGroup.value.description,\n    };\n    newMockDef.tokenValidation = this.formGroup.value.validateToken;\n    return newMockDef;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".create-mock-form {\n  min-width: 47.109vw;\n  max-width: 603px;\n  height: auto;\n  min-height: 60.824vh;\n  margin: 6.824vh auto;\n  align-items: stretch;\n\n  .token-validation-row {\n    display: flex;\n    justify-content: space-between;\n    margin-top: 1rem;\n    margin-bottom: 0.5rem;\n  }\n\n  mat-hint {\n    color: red !important;\n  }\n\n  form {\n    align-items: stretch;\n\n    h3 {\n      font-weight: 500;\n      font-size: 1.5em;\n      line-height: 23px;\n      text-align: center;\n    }\n\n    .titleInput,\n    .descInput {\n      margin-bottom: 2em;\n    }\n\n    .open-api {\n      display: flex;\n      flex-direction: row;\n      width: 100%;\n      app-file-input {\n        flex-grow: 1;\n      }\n      a {\n        text-decoration: none;\n        color: black;\n      }\n    }\n\n    .buttons-div {\n      justify-content: space-between;\n      justify-self: flex-end;\n      align-items: flex-end;\n      margin: 2em 0;\n      button {\n        width: 10.234vw;\n        max-width: 131px;\n      }\n    }\n  }\n}\n",
                    "styleUrl": "./create-edit-mock-view.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "location",
                        "type": "Location",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "openapiservice",
                        "type": "OpenApiSpecService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "mockdefinitionService",
                        "type": "MockDefinitionService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "store",
                        "type": "DesignerStore",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "logger",
                        "type": "NGXLogger",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 37,
                "jsdoctags": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "location",
                        "type": "Location",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "openapiservice",
                        "type": "OpenApiSpecService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "mockdefinitionService",
                        "type": "MockDefinitionService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "DesignerStore",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "logger",
                        "type": "NGXLogger",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "validateToken": {
                    "name": "validateToken",
                    "getSignature": {
                        "name": "validateToken",
                        "type": "",
                        "returnType": "",
                        "line": 151
                    }
                }
            },
            "templateData": "<mat-card class=\"create-mock-form row center-hr\">\n  <form class=\"column\">\n    <h3 class=\"capitalize\" *ngIf=\"!editMode\">Create New Mock</h3>\n    <h3 class=\"capitalize\" *ngIf=\"editMode\">Edit Mock</h3>\n\n    <app-text-input\n      class=\"titleInput capitalize\"\n      title=\"Title - Required\"\n      maxLength=\"40\"\n      [control]=\"formGroup.controls['title']\"\n    ></app-text-input>\n    <app-text-input\n      class=\"descInput flex-grow capitalize\"\n      title=\"Description\"\n      maxLength=\"1000\"\n      multiLine=\"true\"\n      [control]=\"formGroup.controls['description']\"\n    ></app-text-input>\n\n    <div *ngIf=\"!editMode\" class=\"open-api\">\n      <app-file-input\n        class=\"column\"\n        [multiple]=\"false\"\n        type=\"file\"\n        (fileContentEmit)=\"setOpenApiFile($event)\"\n        label=\"Select OpenAPI File - Required\"\n        accept=\".yml,.yaml, .json\"\n        [errorMessage]=\"errorMessageToEmitFromCreate\"\n      >\n      </app-file-input>\n      <a href=\"https://bit.ly/swagger-v2\" target=\"_blank\">\n        <app-tooltip message=\"Find out more about OpenAPI Specification 2.0\" [delay]=\"0\"></app-tooltip>\n      </a>\n    </div>\n    <div class=\"token-validation-row\">\n      <mat-checkbox class=\"tkValid\" name=\"tkValid\" [formControl]=\"formGroup.controls['validateToken']\">\n        Token Validation\n      </mat-checkbox>\n    </div>\n\n    <div class=\"row buttons-div\">\n      <button mat-raised-button color=\"primary\" (click)=\"goBack()\">Back</button>\n      <button *ngIf=\"!editMode\" mat-raised-button color=\"primary\" [disabled]=\"formGroup.invalid\" (click)=\"createMock()\">\n        Create\n      </button>\n      <button *ngIf=\"editMode\" mat-raised-button color=\"primary\" [disabled]=\"formGroup.invalid\" (click)=\"editMock()\">\n        Edit\n      </button>\n    </div>\n  </form>\n</mat-card>\n"
        },
        {
            "name": "DeleteFromServerViewComponent",
            "id": "component-DeleteFromServerViewComponent-d3c77c7dfa57d1ca235fb6c13221f9f28a9a3eb1eccd0208e42e3c8fa5d03799f8673405400070aadcd0e3538600a9d22bb5b1b892db1819260082e074548481",
            "file": "src/app/components/delete-from-server-view/delete-from-server-view.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-delete-from-server-view",
            "styleUrls": [
                "./delete-from-server-view.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./delete-from-server-view.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "errorsRestRequest",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "Record<string, >",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "body",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 59
                },
                {
                    "name": "concatToURI",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 61
                },
                {
                    "name": "controlsMockDefinitionToString",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 72
                },
                {
                    "name": "deleteInProgress",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 69
                },
                {
                    "name": "emptyListMessageServerBox",
                    "defaultValue": "'No Mockdefinition(s) '",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 53,
                    "modifierKind": [
                        144
                    ]
                },
                {
                    "name": "errorMessage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 68
                },
                {
                    "name": "formArray",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormArray",
                    "optional": false,
                    "description": "",
                    "line": 56
                },
                {
                    "name": "inputControl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormControl",
                    "optional": false,
                    "description": "",
                    "line": 63
                },
                {
                    "name": "mockDefinitions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MockDefinition[]",
                    "optional": false,
                    "description": "",
                    "line": 55
                },
                {
                    "name": "options",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Record<string | >",
                    "optional": false,
                    "description": "",
                    "line": 58
                },
                {
                    "name": "requestInProgress",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 64
                },
                {
                    "name": "requestObserver",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observer<MockDefinition[]>",
                    "optional": false,
                    "description": "",
                    "line": 57
                },
                {
                    "name": "statusMessage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 67
                },
                {
                    "name": "title",
                    "defaultValue": "'Server URI'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 65
                },
                {
                    "name": "triggerOpenConfirmBox",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 70
                },
                {
                    "name": "urlMaxLength",
                    "defaultValue": "2048",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 52,
                    "modifierKind": [
                        124,
                        144
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "clearForm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 184,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nClears all Mockdefinitions from the form\n",
                    "description": "<p>Clears all Mockdefinitions from the form</p>\n",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "clearRightHandSide",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 170,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nMoves all Mockdefinitions to the left-hand side of the form; clears right-hand side\n",
                    "description": "<p>Moves all Mockdefinitions to the left-hand side of the form; clears right-hand side</p>\n",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "getSpinnerId",
                    "args": [],
                    "optional": false,
                    "returnType": "\"show-spinner\" | \"hide-spinner\"",
                    "typeParameters": [],
                    "line": 85,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onBack",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 163,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nReturns to the previous location\n",
                    "description": "<p>Returns to the previous location</p>\n"
                },
                {
                    "name": "onConfirmDialogAction",
                    "args": [
                        {
                            "name": "choice",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 200,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nPerforms the server Mockdefinition deletion if the user confirms\n",
                    "description": "<p>Performs the server Mockdefinition deletion if the user confirms</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 6509,
                                "end": 6515,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "choice"
                            },
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 6503,
                                "end": 6508,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>The boolean value of the user&#39;s choice for the popup</p>\n"
                        }
                    ]
                },
                {
                    "name": "onListOutput",
                    "args": [
                        {
                            "name": "list",
                            "type": "FormControl[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 140,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSets the Mockdefinitions property equal to the list of MockDefinitions derived from the\nFormControl values.\none list to the other.\n",
                    "description": "<p>Sets the Mockdefinitions property equal to the list of MockDefinitions derived from the\nFormControl values.\none list to the other.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 4587,
                                "end": 4591,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "list"
                            },
                            "type": "FormControl[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 4581,
                                "end": 4586,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>The list of FormControls given by the shuttle list when the user moves items from\none list to the other.</p>\n"
                        }
                    ]
                },
                {
                    "name": "onResponse",
                    "args": [
                        {
                            "name": "response",
                            "type": "MockDefinition[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 149,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIf the response returned is not an error or dom exceptions it sets the controls\nvalues to the response body. The control is then responsible for validation.\n",
                    "description": "<p>If the response returned is not an error or dom exceptions it sets the controls\nvalues to the response body. The control is then responsible for validation.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 5001,
                                "end": 5009,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "response"
                            },
                            "type": "MockDefinition[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 4995,
                                "end": 5000,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>HttpResponse received by the input</p>\n"
                        }
                    ]
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 104,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe function called on submit; deletes the Mockdefinitions when pressed.\n",
                    "description": "<p>The function called on submit; deletes the Mockdefinitions when pressed.</p>\n"
                },
                {
                    "name": "sendRequest",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 89,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "sendRequestDisabled",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 81,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "triggerOpenConfirmationBox",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 192,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOpens the confirmation box when attempting to delete Mockdefinitions from the server\n",
                    "description": "<p>Opens the confirmation box when attempting to delete Mockdefinitions from the server</p>\n"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Location } from '@angular/common';\nimport { Component, Input, OnInit } from '@angular/core';\nimport { AbstractControl, FormArray, FormControl, Validators } from '@angular/forms';\nimport { NGXLogger } from 'ngx-logger';\nimport { Observer } from 'rxjs';\nimport { MockDefinition } from 'src/app/models/mock-definition/mock-definition.model';\nimport { OrbitalAdminService } from 'src/app/services/orbital-admin/orbital-admin.service';\nimport { finalize } from 'rxjs/operators';\nimport { NotificationService } from 'src/app/services/notification-service/notification.service';\n\n@Component({\n  selector: 'app-delete-from-server-view',\n  templateUrl: './delete-from-server-view.component.html',\n  styleUrls: ['./delete-from-server-view.component.scss'],\n})\nexport class DeleteFromServerViewComponent implements OnInit {\n  @Input() set errorsRestRequest(errors: Record<string, unknown>) {\n    if (this.inputControl) {\n      this.inputControl.setErrors(errors);\n    }\n  }\n\n  constructor(\n    private location: Location,\n    private logger: NGXLogger,\n    private orbitalService: OrbitalAdminService,\n    private notificationService: NotificationService\n  ) {\n    this.formArray = new FormArray([]);\n\n    this.requestObserver = {\n      next: (event) => {\n        this.onResponse(event);\n        this.statusMessage = '';\n      },\n      error: () => {\n        this.errorMessage = 'Mock(s) could not be viewed because of an error';\n        this.notificationService.open('Mock(s) could not be viewed because of an error');\n        this.requestInProgress = false;\n        this.clearForm();\n      },\n      complete: () => (this.requestInProgress = false),\n    };\n  }\n\n  /**\n   * Getter function that returns true if no Mock Definitions have been selected for\n   */\n  get disabled(): boolean {\n    return this.mockDefinitions.length === 0 || this.requestInProgress || this.deleteInProgress;\n  }\n  static readonly urlMaxLength = 2048;\n  readonly emptyListMessageServerBox = 'No Mockdefinition(s) ';\n\n  mockDefinitions: MockDefinition[] = [];\n  formArray: FormArray;\n  requestObserver: Observer<MockDefinition[]>;\n  options: Record<string, unknown> = {};\n  body?: string = null;\n\n  concatToURI = '';\n\n  inputControl: FormControl;\n  requestInProgress = false;\n  title = 'Server URI';\n\n  statusMessage: string;\n  errorMessage: string;\n  deleteInProgress: boolean;\n  triggerOpenConfirmBox: boolean;\n\n  controlsMockDefinitionToString = (control: AbstractControl) => control.value.metadata.title;\n\n  ngOnInit() {\n    this.inputControl = new FormControl(\n      '',\n      Validators.compose([Validators.maxLength(DeleteFromServerViewComponent.urlMaxLength)])\n    );\n  }\n\n  sendRequestDisabled() {\n    return this.inputControl.value.length === 0 || this.requestInProgress || this.deleteInProgress;\n  }\n\n  getSpinnerId() {\n    return this.requestInProgress ? 'show-spinner' : 'hide-spinner';\n  }\n\n  sendRequest() {\n    this.statusMessage = '';\n    this.errorMessage = '';\n    this.inputControl.markAsDirty();\n    if (this.sendRequestDisabled) {\n      this.requestInProgress = true;\n      this.errorsRestRequest = null;\n\n      this.orbitalService.getAll(`${this.inputControl.value}${this.concatToURI}`).subscribe(this.requestObserver);\n    }\n  }\n\n  /**\n   * The function called on submit; deletes the Mockdefinitions when pressed.\n   */\n  onSubmit() {\n    this.deleteInProgress = true;\n    this.orbitalService\n      .deleteMockDefinitions(\n        `${this.inputControl.value}${this.concatToURI}`,\n        this.mockDefinitions.map((mockDefinition) => mockDefinition.metadata.title)\n      )\n      .pipe(\n        finalize(() => {\n          this.deleteInProgress = false;\n        })\n      )\n      .subscribe({\n        next: (deleteMockStatus) => {\n          if (deleteMockStatus.every((mockDeletedSuccessfully) => mockDeletedSuccessfully)) {\n            this.logger.debug('Received response from export to server promise resolution');\n            this.statusMessage = 'Mock(s) successfully deleted';\n            this.clearRightHandSide();\n          } else {\n            this.errorMessage = 'Mock(s) could not be deleted because of an error';\n            this.logger.debug('Mock deletion statuses', deleteMockStatus);\n          }\n        },\n        error: (error) => {\n          this.logger.error('Mock(s) could not be deleted because of an error', error);\n          this.notificationService.open('Mock(s) could not be deleted because of an error');\n        },\n      });\n  }\n\n  /**\n   * Sets the Mockdefinitions property equal to the list of MockDefinitions derived from the\n   * FormControl values.\n   * @param list The list of FormControls given by the shuttle list when the user moves items from\n   * one list to the other.\n   */\n  onListOutput(list: FormControl[]) {\n    this.mockDefinitions = list.map((control) => control.value);\n  }\n\n  /**\n   * If the response returned is not an error or dom exceptions it sets the controls\n   * values to the response body. The control is then responsible for validation.\n   * @param response HttpResponse received by the input\n   */\n  onResponse(response: MockDefinition[]) {\n    this.logger.debug('Received http response', response);\n\n    if (response) {\n      response.forEach((m) => (m.openApi.tags = m.openApi.tags.filter((t) => t.name !== 'openapi')));\n      this.formArray = new FormArray(response.map((mockDef) => new FormControl(mockDef, null)));\n\n      this.logger.debug('DeleteFromServerViewComponent FormArray value:', this.formArray);\n    }\n  }\n\n  /**\n   * Returns to the previous location\n   */\n  onBack() {\n    this.location.back();\n  }\n\n  /**\n   * Moves all Mockdefinitions to the left-hand side of the form; clears right-hand side\n   */\n  private clearRightHandSide() {\n    const chosenMocks = this.formArray.controls\n      .filter(\n        (mock) =>\n          !this.mockDefinitions.map((rightHandMock) => rightHandMock.metadata.title).includes(mock.value.metadata.title)\n      )\n      .map((aMock) => aMock.value);\n    this.formArray = new FormArray(chosenMocks.map((mockDef) => new FormControl(mockDef, null)));\n    this.mockDefinitions = [];\n  }\n\n  /**\n   * Clears all Mockdefinitions from the form\n   */\n  private clearForm() {\n    this.formArray = new FormArray([]);\n    this.mockDefinitions = [];\n  }\n\n  /**\n   * Opens the confirmation box when attempting to delete Mockdefinitions from the server\n   */\n  triggerOpenConfirmationBox() {\n    this.triggerOpenConfirmBox = true;\n  }\n\n  /**\n   * Performs the server Mockdefinition deletion if the user confirms\n   * @param choice The boolean value of the user's choice for the popup\n   */\n  onConfirmDialogAction(choice: boolean) {\n    this.triggerOpenConfirmBox = false;\n    if (choice) {\n      this.onSubmit();\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "mat-card#container {\n  min-width: 70vw;\n  min-height: 70vh;\n  margin: 6.824vh auto;\n\n  mat-card-title,\n  mat-card-subtitle {\n    align-self: center;\n    color: #000;\n    padding-top: 0.6em;\n  }\n\n  .button-div {\n    justify-content: space-between;\n    padding: 0 4em;\n    button {\n      padding: 0 2.5em;\n    }\n  }\n\n  .div-body {\n    margin: 0 2em;\n    overflow: visible;\n\n    app-shuttle-list {\n      height: 100%;\n      padding: 2em 4em;\n      max-height: calc(85% - 4em);\n      justify-content: flex-start;\n      align-self: stretch;\n\n      ::ng-deep > *:first-child {\n        flex-grow: 1;\n      }\n    }\n  }\n}\n\n.list-item {\n  width: 100%;\n  margin: 1em 0 !important;\n  h5 {\n    font-weight: 400;\n    font-size: 1.2em;\n    margin: 0;\n  }\n}\n\n.container {\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  mat-select {\n    min-width: 4.5em;\n    padding-bottom: 0.32em;\n    margin-right: 0.3em;\n  }\n  app-text-input {\n    flex: 0 !important;\n    text-transform: capitalize;\n  }\n\n  div#submit-buttons {\n    display: flex;\n    flex-direction: row;\n    margin-left: 1em;\n    mat-spinner {\n      margin-left: 10px;\n      flex-direction: center;\n\n      & #show-spinner {\n        display: visible !important;\n      }\n\n      &#hide-spinner {\n        display: none;\n      }\n    }\n  }\n}\n\n.error-message-delete {\n  margin-top: -13px;\n}\n\n.btn-delete {\n  width: 5vw;\n  height: 5vh;\n  min-width: 7em;\n}\n\n.overlay {\n  position: fixed;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 100vw;\n  height: 100vh;\n  top: 0;\n  left: 0;\n  z-index: 1;\n  background-color: rgba(0, 0, 0, 0.5);\n}\n\n.status-message {\n  color: grey;\n  font-size: 0.7em;\n}\n\n.error-message {\n  color: red;\n  font-size: 0.7em;\n}\n",
                    "styleUrl": "./delete-from-server-view.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "location",
                        "type": "Location",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "logger",
                        "type": "NGXLogger",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "orbitalService",
                        "type": "OrbitalAdminService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "notificationService",
                        "type": "NotificationService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 21,
                "jsdoctags": [
                    {
                        "name": "location",
                        "type": "Location",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "logger",
                        "type": "NGXLogger",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "orbitalService",
                        "type": "OrbitalAdminService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "notificationService",
                        "type": "NotificationService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "errorsRestRequest": {
                    "name": "errorsRestRequest",
                    "setSignature": {
                        "name": "errorsRestRequest",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "errors",
                                "type": "Record<string | >",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 17,
                        "jsdoctags": [
                            {
                                "name": "errors",
                                "type": "Record<string | >",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "disabled": {
                    "name": "disabled",
                    "getSignature": {
                        "name": "disabled",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 49,
                        "rawdescription": "\n\nGetter function that returns true if no Mock Definitions have been selected for\n",
                        "description": "<p>Getter function that returns true if no Mock Definitions have been selected for</p>\n"
                    }
                }
            },
            "templateData": "<mat-card class=\"column\" id=\"container\">\n  <mat-card-title class=\"capitalize\">Delete from Server</mat-card-title>\n  <mat-card-subtitle>Delete existing Mockdefinition(s) below</mat-card-subtitle>\n  <div class=\"column center-hr flex-grow div-body\">\n    <app-tooltip message=\"Enter the Server URI that your Mockdefinition(s) are hosted on\">\n      <form>\n        <div class=\"container\">\n          <div class=\"uri-field\">\n            <app-text-input [title]=\"title\" maxLength=\"200\" [control]=\"inputControl\"></app-text-input>\n            <mat-hint class=\"status-message\" *ngIf=\"statusMessage?.length\">\n              {{ statusMessage }}\n            </mat-hint>\n            <mat-hint class=\"error-message\" *ngIf=\"errorMessage?.length\">\n              {{ errorMessage }}\n            </mat-hint>\n          </div>\n\n          <div id=\"submit-buttons\">\n            <button\n              mat-raised-button\n              color=\"primary\"\n              (click)=\"sendRequest()\"\n              [disabled]=\"sendRequestDisabled()\"\n              class=\"btn-upload\"\n            >\n              Submit</button\n            ><mat-spinner diameter=\"25\" [id]=\"getSpinnerId()\"></mat-spinner>\n          </div>\n          <div class=\"overlay\" *ngIf=\"triggerOpenConfirmBox\">\n            <div>\n              <mat-card>\n                <app-dialog-box\n                  titleText=\"Confirm Mockdefinition Deletion\"\n                  confirmButtonText=\"Confirm\"\n                  cancelButtonText=\"Cancel\"\n                  bodyText=\"Are you sure you want to delete these Mockdefinitions from the server?\"\n                  (choiceBoolean)=\"onConfirmDialogAction($event)\"\n                ></app-dialog-box>\n              </mat-card>\n            </div>\n          </div>\n        </div>\n      </form>\n    </app-tooltip>\n    <app-shuttle-list\n      class=\"column flex-grow\"\n      [list]=\"formArray.controls\"\n      [itemToStringFn]=\"controlsMockDefinitionToString\"\n      [emptyListMessage]=\"emptyListMessageServerBox\"\n      leftTitle=\"Mockdefinition(s) from Server\"\n      rightTitle=\"Mockdefinition(s) To Delete\"\n      (outputList)=\"onListOutput($event)\"\n    ></app-shuttle-list>\n  </div>\n  <div class=\"row button-div\">\n    <button mat-raised-button color=\"primary\" (click)=\"onBack()\">Back</button>\n    <button mat-raised-button color=\"primary\" [disabled]=\"disabled\" (click)=\"triggerOpenConfirmationBox()\">\n      Delete\n    </button>\n  </div>\n</mat-card>\n"
        },
        {
            "name": "DialogBoxComponent",
            "id": "component-DialogBoxComponent-b41305a90881e72651fc8938eadfd5839c43a355d1d77db6645960fc8fc2d83153959179a7558fc7ed011c3484da3ae62e860171f23ac8f8af50a173d1d7ae64",
            "file": "src/app/shared/components/dialog-box/dialog-box.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-dialog-box",
            "styleUrls": [
                "./dialog-box.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./dialog-box.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "bodyText",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "cancelButtonText",
                    "defaultValue": "'Cancel'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "confirmButtonText",
                    "defaultValue": "'Confirm'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "titleText",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "choiceBoolean",
                    "defaultValue": "new EventEmitter<boolean>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "EventEmitter<boolean>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "onCancel",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nEmits false to parent when the user wishes the delete a scenario\n",
                    "description": "<p>Emits false to parent when the user wishes the delete a scenario</p>\n"
                },
                {
                    "name": "onConfirm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nEmits true to parent when the user wishes the delete a scenario\n",
                    "description": "<p>Emits true to parent when the user wishes the delete a scenario</p>\n"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output } from '@angular/core';\n\n@Component({\n  selector: 'app-dialog-box',\n  templateUrl: './dialog-box.component.html',\n  styleUrls: ['./dialog-box.component.scss'],\n})\nexport class DialogBoxComponent {\n  @Input() titleText: string;\n  @Input() bodyText: string;\n  @Input() confirmButtonText = 'Confirm';\n  @Input() cancelButtonText = 'Cancel';\n\n  @Output() choiceBoolean: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /**\n   * Emits true to parent when the user wishes the delete a scenario\n   */\n  onConfirm() {\n    this.choiceBoolean.emit(true);\n  }\n\n  /**\n   * Emits false to parent when the user wishes the delete a scenario\n   */\n  onCancel() {\n    this.choiceBoolean.emit(false);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".dialog-content {\n  p {\n    text-align: center;\n    padding: 0.8em;\n    color: rgba(0, 0, 0, 0.541327);\n  }\n}\n\n.dialog-title {\n  text-align: center;\n}\n\n.dialog-actions {\n  display: flex;\n  justify-content: space-between;\n\n  .confirm-button {\n    color: #ff0000;\n  }\n\n  .cancel-button {\n    color: #009688;\n  }\n}\n",
                    "styleUrl": "./dialog-box.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<h3 mat-dialog-title class=\"dialog-title\">{{ titleText }}</h3>\n<div mat-dialog-content class=\"dialog-content\">\n  <p [innerHTML]=\"bodyText\"></p>\n  <div mat-dialog-actions class=\"dialog-actions\">\n    <button mat-button class=\"cancel-button\" (click)=\"onCancel()\">\n      {{ cancelButtonText }}\n    </button>\n    <button mat-button class=\"confirm-button\" (click)=\"onConfirm()\">\n      {{ confirmButtonText }}\n    </button>\n  </div>\n</div>\n"
        },
        {
            "name": "DownloadMockdefinitionsComponent",
            "id": "component-DownloadMockdefinitionsComponent-d31c0d46afac157d2a55601f6dd57dbd03b5098dfc2be59b346f3d0d92f0f1fe2723977c166037057b928d3c1b4b19cabdd257765b3d2065e0ade04f62889a18",
            "file": "src/app/components/download-mockdefinitions/download-mockdefinitions.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-download-mockdefinitions",
            "styleUrls": [
                "./download-mockdefinitions.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./download-mockdefinitions.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "emptyListMessage",
                    "defaultValue": "'List is empty'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "isMockSelected",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "list",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "noSearchResultsMessage",
                    "defaultValue": "'No search results found'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "outputList",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EventEmitter<[]>",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "selected",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "optional": false,
                    "description": "",
                    "line": 21
                }
            ],
            "methodsClass": [
                {
                    "name": "downloadMocks",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDownloads multiple mock files from the designer\n",
                    "description": "<p>Downloads multiple mock files from the designer</p>\n"
                },
                {
                    "name": "goBack",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGoes back to the previous location in the app\n",
                    "description": "<p>Goes back to the previous location in the app</p>\n"
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCompletes event emitter\n",
                    "description": "<p>Completes event emitter</p>\n"
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSelect",
                    "args": [
                        {
                            "name": "items",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSets the selected list to the items passed into it\n",
                    "description": "<p>Sets the selected list to the items passed into it</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1294,
                                "end": 1299,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "items"
                            },
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1288,
                                "end": 1293,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>The list of items to set as selected from the left list</p>\n"
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, OnDestroy, OnInit } from '@angular/core';\nimport { Location } from '@angular/common';\nimport { FormControl } from '@angular/forms';\nimport { DesignerStore } from 'src/app/store/designer-store';\nimport { saveAs } from 'file-saver';\nimport { recordMap } from 'src/app/models/record';\n\n@Component({\n  selector: 'app-download-mockdefinitions',\n  templateUrl: './download-mockdefinitions.component.html',\n  styleUrls: ['./download-mockdefinitions.component.scss'],\n})\nexport class DownloadMockdefinitionsComponent implements OnInit, OnDestroy {\n  outputList: EventEmitter<unknown[]>;\n\n  emptyListMessage = 'List is empty';\n  noSearchResultsMessage = 'No search results found';\n\n  list: unknown[] = [];\n  selected: any[] = [];\n  isMockSelected = false;\n\n  constructor(private location: Location, private store: DesignerStore) {\n    this.outputList = new EventEmitter<unknown[]>();\n  }\n\n  ngOnInit() {\n    this.store.state$.subscribe((state) => {\n      this.list = recordMap(state.mockDefinitions, (md) => new FormControl(md));\n    });\n  }\n\n  /**\n   * Completes event emitter\n   */\n  ngOnDestroy() {\n    this.outputList.complete();\n  }\n\n  /**\n   * Sets the selected list to the items passed into it\n   * @param items The list of items to set as selected from the left list\n   */\n  onSelect(items: any[]): void {\n    this.selected = [...items];\n    this.isMockSelected = this.selected.length !== 0;\n  }\n\n  /**\n   * Goes back to the previous location in the app\n   */\n  goBack() {\n    this.location.back();\n  }\n\n  /**\n   * Downloads multiple mock files from the designer\n   */\n  downloadMocks() {\n    this.selected.forEach((mockDefinition) => {\n      const blob = new Blob([JSON.stringify(mockDefinition.value)], { type: 'text/plain;charset=utf-8' });\n      saveAs(blob, `${mockDefinition.value.metadata.title}.json`);\n    });\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".container {\n  display: flex;\n  flex-direction: row;\n\n  .selectionList {\n    flex-grow: 1;\n    display: flex;\n    flex-direction: column;\n\n    .list-label {\n      align-self: center;\n      margin-bottom: 1em;\n      color: rgba(0, 0, 0, 0.539261);\n      font-size: 0.9em;\n      font-weight: 500;\n    }\n\n    .list-card {\n      flex-grow: 1;\n      box-shadow: 0px 19px 38px rgba(0, 0, 0, 0.3), 0px 15px 12px rgba(0, 0, 0, 0.22);\n      border-radius: 0.1em;\n    }\n  }\n\n  .button-div {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    margin: 0 1em;\n\n    button {\n      margin: 1em 0;\n    }\n  }\n}\n\n.export-to-server {\n  width: 37.3vw;\n  height: auto;\n  margin-top: 2em;\n}\n\n.list-item {\n  width: 100%;\n  margin: 1em 0 !important;\n  h5 {\n    font-weight: 400;\n    font-size: 1.2em;\n    margin: 0;\n  }\n}\n\nspan.center {\n  text-align: center;\n}\n\n.buttons-div {\n  justify-content: space-between;\n  justify-self: flex-end;\n  align-items: flex-end;\n  margin: 2em 0;\n  button {\n    width: 10.234vw;\n    max-width: 131px;\n  }\n}\n\nbutton.multiline {\n  line-height: 1.4em;\n}\n\np.subtitle {\n  font-size: 0.9em;\n}\n",
                    "styleUrl": "./download-mockdefinitions.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "location",
                        "type": "Location",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "store",
                        "type": "DesignerStore",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 22,
                "jsdoctags": [
                    {
                        "name": "location",
                        "type": "Location",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "DesignerStore",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<mat-card class=\"export-to-server mat-elevation-z15\">\n  <span class=\"center\">\n    <mat-card-title>Download Mockdefinitions</mat-card-title>\n    <mat-card-subtitle>Download Mockdefinition(s) locally to your machine</mat-card-subtitle>\n    <p class=\"subtitle\">Mockdefinition(s) on Designer</p>\n  </span>\n  <div class=\"container\">\n    <div class=\"selectionList\">\n      <app-shuttle-sub-list\n        class=\"list\"\n        [list]=\"list\"\n        [emptyListMessage]=\"emptyListMessage\"\n        [noSearchResultsMessage]=\"noSearchResultsMessage\"\n        (itemSelected)=\"onSelect($event)\"\n      ></app-shuttle-sub-list>\n    </div>\n  </div>\n\n  <div class=\"row buttons-div\">\n    <button mat-raised-button color=\"primary\" (click)=\"goBack()\">Back</button>\n    <button\n      mat-raised-button\n      color=\"primary\"\n      [disabled]=\"!this.isMockSelected\"\n      class=\"multiline\"\n      (click)=\"downloadMocks()\"\n    >\n      Download<br />Selected\n    </button>\n  </div>\n</mat-card>\n\n<ng-template #listItemTemplate let-control=\"item\">\n  <div class=\"list-item\">\n    <h5 class=\"capitalize\">{{ control.value?.metadata?.title }}</h5>\n    <mat-divider></mat-divider>\n  </div>\n</ng-template>\n"
        },
        {
            "name": "EndpointListComponent",
            "id": "component-EndpointListComponent-33269a30ffad42c67b15c6105b8c2dfe5c841345735b4adccbbc20bc134f0bc218e20179c7a922f18ad181af15ae2752ccbd129cdf64f63132ac08847720cfca",
            "file": "src/app/components/endpoint-view/endpoint-list/endpoint-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-endpoint-list",
            "styleUrls": [
                "./endpoint-list.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./endpoint-list.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "endpoints",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "Endpoint[]",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { DesignerStore } from 'src/app/store/designer-store';\nimport { Endpoint } from 'src/app/models/endpoint.model';\nimport { Scenario } from 'src/app/models/mock-definition/scenario/scenario.model';\n\n@Component({\n  selector: 'app-endpoint-list',\n  templateUrl: './endpoint-list.component.html',\n  styleUrls: ['./endpoint-list.component.scss'],\n})\nexport class EndpointListComponent {\n  @Input() endpoints: Endpoint[] = [];\n\n  constructor(private designerStore: DesignerStore) {}\n\n  /**\n   * Retrieves the list of scenarios from the store\n   */\n  get scenarios(): Scenario[] {\n    return this.designerStore.state.mockDefinition.scenarios;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".endpointlistcontainer {\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  overflow-y: scroll;\n  overflow-x: hidden;\n  padding-bottom: 1.5vw;\n\n  mat-list-item {\n    margin-top: 0.6em;\n    width: 100%;\n    height: auto;\n  }\n\n  app-endpoint-list-item {\n    width: 100%;\n  }\n}\n",
                    "styleUrl": "./endpoint-list.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "designerStore",
                        "type": "DesignerStore",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "designerStore",
                        "type": "DesignerStore",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "scenarios": {
                    "name": "scenarios",
                    "getSignature": {
                        "name": "scenarios",
                        "type": "[]",
                        "returnType": "Scenario[]",
                        "line": 19,
                        "rawdescription": "\n\nRetrieves the list of scenarios from the store\n",
                        "description": "<p>Retrieves the list of scenarios from the store</p>\n"
                    }
                }
            },
            "templateData": "<mat-list class=\"endpointlistcontainer\">\n  <mat-list-item *ngFor=\"let endpoint of endpoints\">\n    <app-endpoint-list-item\n      [endpoint]=\"endpoint\"\n      [scenarioCount]=\"(scenarios | getEndpointScenarios: endpoint).length\"\n    ></app-endpoint-list-item>\n  </mat-list-item>\n</mat-list>\n"
        },
        {
            "name": "EndpointListItemComponent",
            "id": "component-EndpointListItemComponent-b18b2c1a5effecb7ced669a8ff07adf7791afc522e214a9c90b4f0c683d5d259f1e17af2d095b2f7b2d3f52d58ffa845d4e05ccb9c96b85d6fc0ba2164b631ea",
            "file": "src/app/components/endpoint-view/endpoint-list-item/endpoint-list-item.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-endpoint-list-item",
            "styleUrls": [
                "./endpoint-list-item.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./endpoint-list-item.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "endpoint",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "Endpoint",
                    "decorators": []
                },
                {
                    "name": "scenarioCount",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "number",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "selectEndpoint",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nReturns a list of scenarios for the clicked endpoint\n",
                    "description": "<p>Returns a list of scenarios for the clicked endpoint</p>\n"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { Endpoint } from 'src/app/models/endpoint.model';\nimport { DesignerStore } from 'src/app/store/designer-store';\nimport { NGXLogger } from 'ngx-logger';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-endpoint-list-item',\n  templateUrl: './endpoint-list-item.component.html',\n  styleUrls: ['./endpoint-list-item.component.scss'],\n})\nexport class EndpointListItemComponent {\n  @Input() endpoint: Endpoint;\n  @Input() scenarioCount: number;\n\n  constructor(private store: DesignerStore, private logger: NGXLogger, private router: Router) {}\n\n  /**\n   * Returns a list of scenarios for the clicked endpoint\n   */\n\n  selectEndpoint() {\n    this.store.selectedEndpoint = this.endpoint;\n    this.router.navigateByUrl('/scenario-view');\n    this.logger.debug('Endpoint selected: ', this.store.state.selectedEndpoint);\n  }\n\n  /**\n   * Gets the endpoint's description\n   */\n  get endpointDescription(): string {\n    return !this.endpoint || !this.endpoint.spec.description ? 'No description' : this.endpoint.spec.description;\n  }\n\n  get scenarioDisplay(): string {\n    let display = `${this.scenarioCount} Scenario`;\n    if (this.scenarioCount !== 1) {\n      display += 's';\n    }\n    return display;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".endpointlistitemcontainer {\n  padding: 0em;\n  display: flex;\n  min-width: 0;\n  align-items: stretch;\n  width: 100%;\n\n  &:hover {\n    background-color: #f0f0f0;\n    cursor: pointer;\n  }\n\n  mat-card-content {\n    margin-bottom: 0;\n    display: flex;\n    justify-content: flex-start;\n    align-items: center;\n    width: 100%;\n\n    .endpoint-info-content {\n      flex-grow: 1;\n      padding: 1rem;\n      min-width: 0;\n\n      mat-card-title {\n        word-wrap: break-word;\n        max-width: 65rem;\n      }\n    }\n\n    .scenario-count {\n      text-align: left;\n      font-weight: bold;\n      padding: 0 1.5rem 0 1rem;\n      white-space: nowrap;\n    }\n\n    mat-card-subtitle {\n      margin-bottom: 0;\n    }\n\n    .view-endpoint {\n      button {\n        border: none;\n        width: 100%;\n        height: 5rem;\n        background-color: transparent;\n        padding: 0rem 3rem;\n\n        .mat-icon {\n          transform: scale(1.5);\n        }\n      }\n    }\n  }\n\n  .verb-text {\n    font-size: 1.5em;\n    margin-bottom: 0;\n    color: rgb(58, 58, 58);\n  }\n\n  .verb-header {\n    width: 10rem;\n    flex-shrink: 0;\n    height: 100%;\n  }\n}\n::ng-deep .mat-card-header-text {\n  margin: auto !important;\n}\n",
                    "styleUrl": "./endpoint-list-item.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "DesignerStore",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "logger",
                        "type": "NGXLogger",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "DesignerStore",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "logger",
                        "type": "NGXLogger",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "endpointDescription": {
                    "name": "endpointDescription",
                    "getSignature": {
                        "name": "endpointDescription",
                        "type": "string",
                        "returnType": "string",
                        "line": 31,
                        "rawdescription": "\n\nGets the endpoint's description\n",
                        "description": "<p>Gets the endpoint&#39;s description</p>\n"
                    }
                },
                "scenarioDisplay": {
                    "name": "scenarioDisplay",
                    "getSignature": {
                        "name": "scenarioDisplay",
                        "type": "string",
                        "returnType": "string",
                        "line": 35
                    }
                }
            },
            "templateData": "<mat-card *ngIf=\"endpoint\" class=\"endpointlistitemcontainer mincardheight\" (click)=\"selectEndpoint()\">\n  <mat-card-content>\n    <mat-card-header class=\"verb-header\" [style.background-color]=\"endpoint.verb | getVerbColor\">\n      <mat-card-title class=\"verb-text\">{{ endpoint.verb | getVerbString }}</mat-card-title>\n    </mat-card-header>\n    <div class=\"endpoint-info-content\">\n      <mat-card-title> {{ endpoint.path }} </mat-card-title>\n      <mat-card-subtitle>{{ endpointDescription }}</mat-card-subtitle>\n    </div>\n    <div class=\"scenario-count\">{{ scenarioDisplay }}</div>\n    <div class=\"view-endpoint\">\n      <button><mat-icon>chevron_right</mat-icon></button>\n    </div>\n  </mat-card-content>\n</mat-card>\n"
        },
        {
            "name": "EndpointViewComponent",
            "id": "component-EndpointViewComponent-7c9d89a1db32cc7bc68a67d5b03b3ccbb598fa4213af1fd8c284bdfce28c238e086e7b6e5101c191cc0199c277e42751b1f2284cbb63595acdd4026c7a7a0918",
            "file": "src/app/components/endpoint-view/endpoint-view.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-endpoint-view",
            "styleUrls": [
                "./endpoint-view.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./endpoint-view.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "endpointList",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Endpoint[]",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "filteredList",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Endpoint[]",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "isExportedMessage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "mockDefinition",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MockDefinition",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "methodsClass": [
                {
                    "name": "endpointToString",
                    "args": [
                        {
                            "name": "endpoint",
                            "type": "Endpoint",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThis function takes an endpoint object and return its path as a string\n",
                    "description": "<p>This function takes an endpoint object and return its path as a string</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 894,
                                "end": 902,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "endpoint"
                            },
                            "type": "Endpoint",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 888,
                                "end": 893,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>The endpoint to be converted to string</p>\n"
                        }
                    ]
                },
                {
                    "name": "setFilteredList",
                    "args": [
                        {
                            "name": "endpoints",
                            "type": "Endpoint[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThis function takes a list of endpoints and updates it to the new list of filtered endpoints\n",
                    "description": "<p>This function takes a list of endpoints and updates it to the new list of filtered endpoints</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1143,
                                "end": 1152,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "endpoints"
                            },
                            "type": "Endpoint[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1137,
                                "end": 1142,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>The list of endpoints</p>\n"
                        }
                    ]
                },
                {
                    "name": "showNotFound",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe function checks if there's matched scenario(s) found when searching.\nSearch is done by the search bar component.\n",
                    "description": "<p>The function checks if there&#39;s matched scenario(s) found when searching.\nSearch is done by the search bar component.</p>\n"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { DesignerStore } from 'src/app/store/designer-store';\nimport { MockDefinition } from 'src/app/models/mock-definition/mock-definition.model';\nimport { Endpoint } from 'src/app/models/endpoint.model';\n\n@Component({\n  selector: 'app-endpoint-view',\n  templateUrl: './endpoint-view.component.html',\n  styleUrls: ['./endpoint-view.component.scss'],\n})\nexport class EndpointViewComponent {\n  mockDefinition: MockDefinition;\n  endpointList: Endpoint[] = [];\n  filteredList: Endpoint[] = [];\n\n  isExportedMessage: string;\n\n  constructor(private store: DesignerStore) {\n    this.store.state$.subscribe((state) => {\n      this.mockDefinition = state.mockDefinition;\n      this.endpointList = [...state.endpoints];\n    });\n    this.isExportedMessage = '';\n  }\n  /**\n   * This function takes an endpoint object and return its path as a string\n   * @param endpoint The endpoint to be converted to string\n   */\n  endpointToString(endpoint: Endpoint): string {\n    return endpoint.path;\n  }\n  /**\n   * This function takes a list of endpoints and updates it to the new list of filtered endpoints\n   * @param endpoints The list of endpoints\n   */\n  setFilteredList(endpoints: Endpoint[]) {\n    this.filteredList = endpoints;\n  }\n\n  /**\n   * The function checks if there's matched scenario(s) found when searching.\n   * Search is done by the search bar component.\n   */\n  showNotFound() {\n    return this.filteredList.length === 0;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".container.endpointview {\n  width: 95vw !important;\n  min-height: 85vh !important;\n  margin-top: 2vh;\n  -webkit-box-shadow: 0px 1px 12px 3px rgba(153, 148, 153, 1);\n  -moz-box-shadow: 0px 1px 12px 3px rgba(153, 148, 153, 1);\n  box-shadow: 0px 1px 12px 3px rgba(153, 148, 153, 1);\n}\n\n.endpoint {\n  width: 100vw !important;\n}\n\napp-overview-header {\n  width: 100%;\n  height: 19%;\n  display: flex;\n  flex-direction: column;\n}\n\napp-endpoint-list {\n  max-width: 96%;\n  display: flex;\n  flex-direction: column;\n  margin-left: 2%;\n}\n\n.server-post {\n  display: flex;\n  justify-content: left;\n  padding-top: 2em;\n  padding-left: 10em;\n}\n\n.uri-field {\n  width: 50vw;\n  padding-right: 1em;\n}\n\ndiv.endpoint {\n  width: 100%;\n}\n\np#notFoundMessage {\n  font-size: 1.4em;\n  color: rgba(0, 0, 0, 0.541327);\n  font-family: Roboto;\n  padding: 0 2em 0.5em 2em;\n  display: flex;\n  justify-content: center;\n}\n\nmat-form-field {\n  size: 5rem;\n  margin-top: 0.5rem;\n}\n",
                    "styleUrl": "./endpoint-view.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "DesignerStore",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "DesignerStore",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<div class=\"fullscreen column center-hr\">\n  <div class=\"container endpointview\">\n    <div class=\"row\">\n      <div class=\"sidebar\">\n        <app-side-bar></app-side-bar>\n      </div>\n      <div class=\"endpoint\">\n        <div>\n          <app-overview-header [header]=\"headerContent\"></app-overview-header>\n        </div>\n        <div class=\"column\">\n          <app-search-bar\n            class=\"column flex-grow\"\n            [list]=\"endpointList\"\n            (filteredList)=\"setFilteredList($event)\"\n            [itemToStringFn]=\"endpointToString\"\n          >\n          </app-search-bar>\n          <p id=\"notFoundMessage\" *ngIf=\"showNotFound()\">No Result(s) Found</p>\n          <app-endpoint-list class=\"row flex-grow\" [endpoints]=\"filteredList\"></app-endpoint-list>\n        </div>\n      </div>\n    </div>\n  </div>\n\n  <ng-template #headerContent>\n    <div class=\"title\">\n      <h3>{{ mockDefinition?.metadata.title ?? null }}</h3>\n    </div>\n    <p>{{ mockDefinition?.metadata.description ?? null }}</p>\n  </ng-template>\n</div>\n"
        },
        {
            "name": "ExportToServerViewComponent",
            "id": "component-ExportToServerViewComponent-55d6ab935713474c00f484231509bed02c2699c4033f80a2a75e6941785ba2b63a434c4680f3e0c41e7cb98c34aa801663351ee499b52249b53db9c1b1d096c7",
            "file": "src/app/components/export-to-server-view/export-to-server-view.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-export-to-server-view",
            "styleUrls": [
                "./export-to-server-view.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./export-to-server-view.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "controlsMockDefinitionToString",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "emptyListMessageServerBox",
                    "defaultValue": "'No Mockdefinitions'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        144
                    ]
                },
                {
                    "name": "exportErrors",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "exportStatusMessage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "inputControl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormControl",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "isUploadingMocks",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "leftHandSideMocks",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormArray",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "rightHandSideMocks",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MockDefinition[]",
                    "optional": false,
                    "description": "",
                    "line": 21
                }
            ],
            "methodsClass": [
                {
                    "name": "exportMocksFromForm",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<boolean[]>",
                    "typeParameters": [],
                    "line": 91,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nExports the mocks from the form, and returns a list of observables representing the state\nof the export\n",
                    "description": "<p>Exports the mocks from the form, and returns a list of observables representing the state\nof the export</p>\n"
                },
                {
                    "name": "getSpinnerId",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 120,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onBack",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 116,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nReturns to the previous location\n",
                    "description": "<p>Returns to the previous location</p>\n"
                },
                {
                    "name": "onListOutput",
                    "args": [
                        {
                            "name": "list",
                            "type": "FormControl[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 102,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSets the mockDefinitions property equal to the list of Mockdefinitions derived from the\nFormControl values.\none list to the other.\n",
                    "description": "<p>Sets the mockDefinitions property equal to the list of Mockdefinitions derived from the\nFormControl values.\none list to the other.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 3581,
                                "end": 3585,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "list"
                            },
                            "type": "FormControl[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 3575,
                                "end": 3580,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>The list of FormControls given by the shuttle list when the user moves items from\none list to the other.</p>\n"
                        }
                    ]
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe function called on submit. Submits the mock definitions to the server.\n",
                    "description": "<p>The function called on submit. Submits the mock definitions to the server.</p>\n",
                    "modifierKind": [
                        131
                    ]
                },
                {
                    "name": "resetForm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nMoves all Mockdefinitions to the left-hand side of the form; clears right-hand side\n",
                    "description": "<p>Moves all Mockdefinitions to the left-hand side of the form; clears right-hand side</p>\n",
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { Location } from '@angular/common';\nimport { AbstractControl, FormArray, FormControl } from '@angular/forms';\nimport { MockDefinition } from 'src/app/models/mock-definition/mock-definition.model';\nimport { DesignerStore } from 'src/app/store/designer-store';\nimport { NGXLogger } from 'ngx-logger';\nimport { ExportMockdefinitionService } from 'src/app/services/export-mockdefinition/export-mockdefinition.service';\nimport { Observable } from 'rxjs/internal/Observable';\nimport { finalize } from 'rxjs/operators';\nimport { every } from 'lodash';\nimport { OrbitalAdminService } from '../../services/orbital-admin/orbital-admin.service';\nimport { environment } from 'src/environments/environment';\n\n@Component({\n  selector: 'app-export-to-server-view',\n  templateUrl: './export-to-server-view.component.html',\n  styleUrls: ['./export-to-server-view.component.scss'],\n})\nexport class ExportToServerViewComponent implements OnInit {\n  readonly emptyListMessageServerBox = 'No Mockdefinitions';\n  rightHandSideMocks: MockDefinition[] = [];\n  leftHandSideMocks: FormArray;\n  inputControl: FormControl;\n  exportStatusMessage: string;\n  isUploadingMocks: boolean;\n  exportErrors: string;\n\n  controlsMockDefinitionToString = (control: AbstractControl) => control.value.metadata.title;\n\n  constructor(\n    private location: Location,\n    private store: DesignerStore,\n    private logger: NGXLogger,\n    private mockService: ExportMockdefinitionService,\n    private service: OrbitalAdminService\n  ) {}\n\n  ngOnInit() {\n    this.inputControl = new FormControl('');\n    this.inputControl.setValue(environment.apiUrl);\n\n    this.resetForm();\n  }\n\n  /**\n   * Moves all Mockdefinitions to the left-hand side of the form; clears right-hand side\n   */\n  private resetForm() {\n    const keys = Object.keys(this.store.state.mockDefinitions);\n    const controls = keys.map((k) => new FormControl(this.store.state.mockDefinitions[k]));\n    this.leftHandSideMocks = new FormArray(controls);\n    this.rightHandSideMocks = [];\n  }\n\n  /**\n   * The function called on submit. Submits the mock definitions to the server.\n   */\n  async onSubmit() {\n    this.isUploadingMocks = true;\n    this.exportErrors = '';\n    this.exportStatusMessage = '';\n    this.logger.debug('URL contents before uploading', this.inputControl.value);\n\n    return this.exportMocksFromForm()\n      .pipe(\n        finalize(() => {\n          this.isUploadingMocks = false;\n          this.resetForm();\n        })\n      )\n      .subscribe(\n        (uploadMockStatus) => {\n          if (every(uploadMockStatus)) {\n            this.logger.debug('Received response from export to server promise resolution');\n            this.exportStatusMessage = 'File(s) successfully exported';\n            this.mockService.urlCache = this.inputControl.value;\n          } else {\n            this.exportErrors = 'File(s) could not be exported because of an error';\n          }\n        },\n        () => {\n          this.exportErrors = 'File(s) could not be exported because of an error';\n        }\n      );\n  }\n\n  /**\n   * Exports the mocks from the form, and returns a list of observables representing the state\n   * of the export\n   */\n  exportMocksFromForm(): Observable<boolean[]> {\n    this.logger.debug('Mockdefinitions to export', this.rightHandSideMocks);\n    return this.service.exportMockDefinitions(this.inputControl.value, this.rightHandSideMocks);\n  }\n\n  /**\n   * Sets the mockDefinitions property equal to the list of Mockdefinitions derived from the\n   * FormControl values.\n   * @param list The list of FormControls given by the shuttle list when the user moves items from\n   * one list to the other.\n   */\n  onListOutput(list: FormControl[]) {\n    this.rightHandSideMocks = list.map((control) => control.value);\n  }\n\n  /**\n   * Getter function that returns true if no Mock Definitions have been selected for\n   */\n  get disabled(): boolean {\n    return this.rightHandSideMocks.length === 0 || this.isUploadingMocks;\n  }\n\n  /**\n   * Returns to the previous location\n   */\n  onBack() {\n    this.location.back();\n  }\n\n  getSpinnerId() {\n    return 'hide-spinner';\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "mat-card {\n  min-width: 70vw;\n  min-height: 70vh;\n  margin: 6.824vh auto;\n\n  mat-card-title,\n  mat-card-subtitle {\n    align-self: center;\n    color: #000;\n    padding-top: 0.6em;\n  }\n\n  .button-div {\n    justify-content: space-between;\n    padding: 0 4em;\n    button {\n      padding: 0 2.5em;\n    }\n  }\n\n  .div-body {\n    margin: 0 2em;\n    overflow: visible;\n\n    app-shuttle-list {\n      height: 100%;\n      padding: 2em 4em;\n      max-height: calc(85% - 4em);\n      justify-content: flex-start;\n      align-self: stretch;\n\n      ::ng-deep > *:first-child {\n        flex-grow: 1;\n      }\n    }\n  }\n}\n\n.list-item {\n  width: 100%;\n  margin: 1em 0 !important;\n  h5 {\n    font-weight: 400;\n    font-size: 1.2em;\n    margin: 0;\n  }\n}\n.container {\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  mat-select {\n    min-width: 4.5em;\n    padding-bottom: 0.32em;\n    margin-right: 0.3em;\n  }\n  app-text-input {\n    flex: 0 !important;\n    text-transform: capitalize;\n  }\n\n  div#submit-buttons {\n    display: flex;\n    flex-direction: row;\n    margin-left: 1em;\n    mat-spinner {\n      margin-left: 10px;\n      flex-direction: center;\n\n      & #show-spinner {\n        display: visible !important;\n      }\n\n      &#hide-spinner {\n        display: none;\n      }\n    }\n  }\n}\n\n.error-message {\n  color: red;\n}\n\n.status-message {\n  font-size: 0.8em;\n}\n",
                    "styleUrl": "./export-to-server-view.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "location",
                        "type": "Location",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "store",
                        "type": "DesignerStore",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "logger",
                        "type": "NGXLogger",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "mockService",
                        "type": "ExportMockdefinitionService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "service",
                        "type": "OrbitalAdminService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 28,
                "jsdoctags": [
                    {
                        "name": "location",
                        "type": "Location",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "DesignerStore",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "logger",
                        "type": "NGXLogger",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "mockService",
                        "type": "ExportMockdefinitionService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "service",
                        "type": "OrbitalAdminService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "disabled": {
                    "name": "disabled",
                    "getSignature": {
                        "name": "disabled",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 109,
                        "rawdescription": "\n\nGetter function that returns true if no Mock Definitions have been selected for\n",
                        "description": "<p>Getter function that returns true if no Mock Definitions have been selected for</p>\n"
                    }
                }
            },
            "templateData": "<mat-card class=\"column\">\n  <mat-card-title class=\"capitalize\">Export to Server</mat-card-title>\n  <mat-card-subtitle>Export local Mockdefinition file(s) to a server</mat-card-subtitle>\n  <div class=\"column center-hr flex-grow div-body\">\n    <app-tooltip message=\"Enter the Server URI that your Mockdefinition files should be exported to\">\n      <div class=\"container\">\n        <app-text-input title=\"Server URI\" maxLength=\"200\" [control]=\"inputControl\"></app-text-input>\n        <div *ngIf=\"disabled\" id=\"submit-buttons\">\n          <mat-spinner diameter=\"25\" [id]=\"getSpinnerId()\"></mat-spinner>\n        </div>\n      </div>\n    </app-tooltip>\n    <div *ngIf=\"exportStatusMessage?.length\" class=\"status-message\">{{ exportStatusMessage }}</div>\n    <div *ngIf=\"exportErrors?.length\" class=\"error-message\">{{ exportErrors }}</div>\n    <app-shuttle-list\n      class=\"column flex-grow\"\n      [list]=\"leftHandSideMocks.controls\"\n      [itemToStringFn]=\"controlsMockDefinitionToString\"\n      [emptyListMessage]=\"emptyListMessageServerBox\"\n      leftTitle=\"Local Files\"\n      rightTitle=\"Files Selected to Export\"\n      (outputList)=\"onListOutput($event)\"\n    ></app-shuttle-list>\n  </div>\n  <div class=\"row button-div\">\n    <button mat-raised-button color=\"primary\" (click)=\"onBack()\">Back</button>\n    <button mat-raised-button color=\"primary\" [disabled]=\"disabled\" (click)=\"onSubmit()\">Upload</button>\n  </div>\n</mat-card>\n\n<ng-template #listItemTemplate let-control=\"item\">\n  <div class=\"list-item\">\n    <h5 class=\"capitalize\">{{ control.value?.metadata?.title }}</h5>\n    <mat-divider></mat-divider>\n  </div>\n</ng-template>\n"
        },
        {
            "name": "FileInputComponent",
            "id": "component-FileInputComponent-27babf470a9377c7722c18cad99e144f51d29a7f984cc7f0f2192b42031fe1077d7f638dcd2f43c0aacaa328d1276286a2763b82f2bc229c6a7f0b681ab7cd15",
            "file": "src/app/shared/components/file-input/file-input.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-file-input",
            "styleUrls": [
                "./file-input.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./file-input.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "accept",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "errorMessage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 56,
                    "type": "Record<string, string[]>",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "multiple",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "clearContentEmit",
                    "defaultValue": "new EventEmitter<boolean>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "EventEmitter"
                },
                {
                    "name": "fileContentEmit",
                    "defaultValue": "new EventEmitter<string>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "EventEmitter"
                },
                {
                    "name": "fileNameEmit",
                    "defaultValue": "new EventEmitter<string>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_errorMessages",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Record<string | string[]>",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "currentFileName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "fileContent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "fileName",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "methodsClass": [
                {
                    "name": "emitClearContent",
                    "args": [
                        {
                            "name": "x",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nEmits a value to Import From File to clear the form\n\n",
                    "description": "<p>Emits a value to Import From File to clear the form</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1575,
                                "end": 1576,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "x"
                            },
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1569,
                                "end": 1574,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>emitted value</p>\n"
                        }
                    ]
                },
                {
                    "name": "emitFileContent",
                    "args": [
                        {
                            "name": "files",
                            "type": "File[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nEmits the contents of the files as strings\n",
                    "description": "<p>Emits the contents of the files as strings</p>\n",
                    "jsdoctags": [
                        {
                            "name": "files",
                            "type": "File[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { NGXLogger } from 'ngx-logger';\nimport { ReadFileService } from 'src/app/services/read-file/read-file.service';\n\n@Component({\n  selector: 'app-file-input',\n  templateUrl: './file-input.component.html',\n  styleUrls: ['./file-input.component.scss'],\n})\nexport class FileInputComponent {\n  constructor(private logger: NGXLogger, private readFileParser: ReadFileService) {}\n  fileName: string[] = [];\n  currentFileName: string;\n  fileContent: string;\n  @Input() label = '';\n  @Input() accept = '';\n  @Input() multiple = true;\n  private _errorMessages: Record<string, string[]> = {};\n  @Output() fileContentEmit = new EventEmitter<string>();\n  @Output() fileNameEmit = new EventEmitter<string>();\n  @Output() clearContentEmit = new EventEmitter<boolean>();\n\n  /**\n   * Emits the contents of the files as strings\n   */\n  emitFileContent(files: File[]) {\n    this.fileName = [];\n    for (const file of files) {\n      this.readFileParser.read(file).subscribe(\n        (fileReadResult) => {\n          this.fileName.push(file.name);\n          this.currentFileName = file.name;\n          this.fileContent = fileReadResult;\n          this.fileNameEmit.emit(this.currentFileName);\n          this.fileContentEmit.emit(this.fileContent);\n        },\n        (err) => {\n          this._errorMessages[file.name] = err;\n          return this._errorMessages;\n        }\n      );\n    }\n    this.logger.log('File Contents emitted');\n  }\n\n  /**\n   * Emits a value to Import From File to clear the form\n   *\n   * @param x emitted value\n   */\n  emitClearContent(x: boolean) {\n    this.clearContentEmit.emit(x);\n  }\n\n  @Input()\n  set errorMessage(errorMessage: Record<string, string[]>) {\n    this._errorMessages = errorMessage;\n  }\n\n  get errorMessages() {\n    return this._errorMessages;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "mat-form-field {\n  display: flex;\n  flex-direction: column;\n  flex: 1;\n  align-items: stretch;\n\n  div {\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n    .div-file-name {\n      flex: 1;\n      color: rgba(0, 0, 0, 0.38);\n      align-items: center;\n      overflow: hidden;\n    }\n  }\n}\n.noDots {\n  list-style-type: none;\n  list-style-image: none;\n}\n",
                    "styleUrl": "./file-input.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "logger",
                        "type": "NGXLogger",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "readFileParser",
                        "type": "ReadFileService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "logger",
                        "type": "NGXLogger",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "readFileParser",
                        "type": "ReadFileService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "errorMessage": {
                    "name": "errorMessage",
                    "setSignature": {
                        "name": "errorMessage",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "errorMessage",
                                "type": "Record<string | string[]>",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 56,
                        "jsdoctags": [
                            {
                                "name": "errorMessage",
                                "type": "Record<string | string[]>",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "errorMessages": {
                    "name": "errorMessages",
                    "getSignature": {
                        "name": "errorMessages",
                        "type": "",
                        "returnType": "",
                        "line": 60
                    }
                }
            },
            "templateData": "<mat-form-field floatLabel=\"always\">\n  <mat-label>{{ label }}</mat-label>\n  <div>\n    <div class=\"div-file-name\">\n      <ul class=\"noDots\">\n        <li *ngFor=\"let names of fileName\">\n          {{ names }}\n        </li>\n      </ul>\n    </div>\n    <button\n      mat-raised-button\n      color=\"primary\"\n      type=\"button\"\n      (click)=\"fileInput.click()\"\n      (click)=\"emitClearContent(true)\"\n    >\n      Choose File{{ this.multiple ? '(s)' : '' }}\n    </button>\n  </div>\n\n  <input\n    #fileInput\n    [multiple]=\"this.multiple\"\n    type=\"file\"\n    (change)=\"emitFileContent($event.target.files)\"\n    style=\"display: none\"\n    [accept]=\"accept\"\n    onclick=\"this.value=null;\"\n  />\n  <input matInput style=\"display: none\" />\n</mat-form-field>\n\n<div *ngFor=\"let message of this.errorMessages | keyvalue\">\n  <p class=\"error-message\">{{ message.key }} :</p>\n  <li class=\"error-message\" *ngFor=\"let v of message.value\">\n    {{ v }}\n  </li>\n</div>\n"
        },
        {
            "name": "HomeViewComponent",
            "id": "component-HomeViewComponent-8cd6fc186802d40bd999de759667519dc77ab1c081dbe1aaa558855aa2860965b21804738abab0886b3b79435224ec423575f87186c6b2ee9a4c2e78b0fdedfe",
            "file": "src/app/components/home-view/home-view.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-home-view",
            "styleUrls": [
                "./home-view.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./home-view.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "checkMockDefinitions",
                    "args": [
                        {
                            "name": "mockDefs",
                            "type": "Record<string | MockDefinition>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "mockDefs",
                            "type": "Record<string | MockDefinition>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "navigateTo",
                    "args": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { MockDefinition } from 'src/app/models/mock-definition/mock-definition.model';\nimport { DesignerStore } from 'src/app/store/designer-store';\n\n@Component({\n  selector: 'app-home-view',\n  templateUrl: './home-view.component.html',\n  styleUrls: ['./home-view.component.scss'],\n})\nexport class HomeViewComponent {\n  constructor(private router: Router, private store: DesignerStore) {\n    this.store.state$.subscribe((state) => {\n      this.checkMockDefinitions(state.mockDefinitions);\n    });\n  }\n\n  checkMockDefinitions(mockDefs: Record<string, MockDefinition>) {\n    if (Object.keys(mockDefs).length && this.router.url === '/') {\n      this.navigateTo('/endpoint-view');\n    }\n  }\n\n  navigateTo(url: string) {\n    this.router.navigateByUrl(url);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".logo {\n  padding: 1rem 0;\n  h1 {\n    font-size: 4.5em;\n    font-weight: 500;\n  }\n}\n\n.card {\n  width: 75.234vw;\n  max-width: 963px;\n  box-shadow: 0px 19px 38px rgba(0, 0, 0, 0.3), 0px 15px 12px rgba(0, 0, 0, 0.22);\n  margin-top: 2rem;\n}\n\n.line {\n  border-right: 1.2px solid rgba(0, 0, 0, 0.24);\n}\n\n.tile-content {\n  flex: 1;\n  justify-content: flex-start;\n  height: 100%;\n\n  h2 {\n    margin-bottom: 2vh;\n    font-size: 1.5em;\n    font-weight: 500;\n  }\n  button {\n    margin-bottom: 2vh;\n    font-size: 1em;\n    font-weight: 500;\n    min-width: 10.938vw;\n    max-width: 175.5px;\n  }\n}\n\n.buttons {\n  flex: 1;\n}\n",
                    "styleUrl": "./home-view.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "store",
                        "type": "DesignerStore",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "DesignerStore",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<div class=\"fullscreen column center-hr\">\n  <div class=\"logo\">\n    <h1>\n      <img src=\"assets/Orbital_Logo.svg\" height=\"100%\" width=\"100%\" />\n    </h1>\n  </div>\n  <mat-card class=\"card\">\n    <mat-grid-list cols=\"2\" rowHeight=\"217\">\n      <mat-grid-tile colspan=\"1\" rowspan=\"0.5\">\n        <div class=\"column center tile-content line\">\n          <h2 class=\"capitalize\">New from OpenAPI Definition</h2>\n          <div class=\"column center buttons\">\n            <button mat-raised-button class=\"capitalize\" color=\"primary\" (click)=\"navigateTo('/create-new-mock')\">\n              Create New Mock\n            </button>\n          </div>\n        </div>\n      </mat-grid-tile>\n      <mat-grid-tile colspan=\"1\">\n        <div class=\"column center tile-content\">\n          <h2 class=\"capitalize\">Import an Existing Mockdefinition</h2>\n          <div class=\"column center buttons\">\n            <button mat-raised-button color=\"primary\" (click)=\"navigateTo('/import-from-file')\">From File(s)</button>\n            <button mat-raised-button class=\"capitalize\" color=\"primary\" (click)=\"navigateTo('/import-from-server')\">\n              From Server\n            </button>\n          </div>\n        </div>\n      </mat-grid-tile>\n    </mat-grid-list>\n  </mat-card>\n</div>\n"
        },
        {
            "name": "ImportFromFileViewComponent",
            "id": "component-ImportFromFileViewComponent-433cdfb0b80500ea3c5e11be4e5f2452593dfc8f9624442a624c71570471b38672f50b9e38ba273f042df900205317cfb813578836b590f588f851e48131df63",
            "file": "src/app/components/import-from-file-view/import-from-file-view.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-import-from-file-view",
            "styleUrls": [
                "./import-from-file-view.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./import-from-file-view.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "buttonDisabled",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "errorMessageToEmitFromCreate",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Record<string | string[]>",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "mockdefinitionInvalid",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "mockDefinitionNameString",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "mockDefinitionString",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "mockdefinitionValid",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "tempName",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "validFileFlag",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "methodsClass": [
                {
                    "name": "checkEmit",
                    "args": [
                        {
                            "name": "x",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 91,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThis function checks if the emitted value is valid and that\nelements in the mockDefinitionNameString exist, then clears\nthe collections for the next use of the form.\n\n",
                    "description": "<p>This function checks if the emitted value is valid and that\nelements in the mockDefinitionNameString exist, then clears\nthe collections for the next use of the form.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 3072,
                                "end": 3073,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "x"
                            },
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 3066,
                                "end": 3071,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>emitted value</p>\n"
                        }
                    ]
                },
                {
                    "name": "clearArrays",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 133,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nClears the local arrays\n",
                    "description": "<p>Clears the local arrays</p>\n"
                },
                {
                    "name": "createMock",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 103,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ncreateMock is a function that is responsible for storing the new MockDefinition\nin the designer store and navigating to the mock editor if the form is valid. If\nthe form is invalid the function does nothing.\n",
                    "description": "<p>createMock is a function that is responsible for storing the new MockDefinition\nin the designer store and navigating to the mock editor if the form is valid. If\nthe form is invalid the function does nothing.</p>\n"
                },
                {
                    "name": "goBack",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 126,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGoes back to the previous location in the app\n",
                    "description": "<p>Goes back to the previous location in the app</p>\n"
                },
                {
                    "name": "isValid",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setMockDefinition",
                    "args": [
                        {
                            "name": "fileStringFromFileInput",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 68,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSets the string representation of the file's content from the input-file component.\n\n",
                    "description": "<p>Sets the string representation of the file&#39;s content from the input-file component.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2235,
                                "end": 2258,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "fileStringFromFileInput"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2229,
                                "end": 2234,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>string representation of the file&#39;s content</p>\n"
                        }
                    ]
                },
                {
                    "name": "setMockDefinitionName",
                    "args": [
                        {
                            "name": "fileStringName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 79,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSets the file name in the component. This value is emitted from the input-file component.\n\n",
                    "description": "<p>Sets the file name in the component. This value is emitted from the input-file component.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2659,
                                "end": 2673,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "fileStringName"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2653,
                                "end": 2658,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>string representation of the file&#39;s name</p>\n"
                        }
                    ]
                },
                {
                    "name": "validateMock",
                    "args": [
                        {
                            "name": "mockDefinitionString",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nValidates the Mockdefinition and returns a boolean validation status\n",
                    "description": "<p>Validates the Mockdefinition and returns a boolean validation status</p>\n",
                    "modifierKind": [
                        131
                    ],
                    "jsdoctags": [
                        {
                            "name": "mockDefinitionString",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { Location } from '@angular/common';\nimport { NGXLogger } from 'ngx-logger';\nimport { MockDefinitionService } from 'src/app/services/mock-definition/mock-definition.service';\nimport { map } from 'rxjs/operators';\n\n@Component({\n  selector: 'app-import-from-file-view',\n  templateUrl: './import-from-file-view.component.html',\n  styleUrls: ['./import-from-file-view.component.scss'],\n})\nexport class ImportFromFileViewComponent {\n  private mockDefinitionString: string[] = [];\n  mockdefinitionValid: string[] = [];\n  mockdefinitionInvalid: string[] = [];\n  mockDefinitionNameString: string[] = [];\n  errorMessageToEmitFromCreate: Record<string, string[]> = {};\n  validFileFlag = true;\n  buttonDisabled = true;\n  tempName = '';\n\n  constructor(\n    private router: Router,\n    private location: Location,\n    private mockDefinitionService: MockDefinitionService,\n    private logger: NGXLogger\n  ) {}\n\n  isValid() {\n    return this.validFileFlag;\n  }\n\n  /**\n   * Validates the Mockdefinition and returns a boolean validation status\n   */\n  async validateMock(mockDefinitionString: string, index: number) {\n    this.logger.log(`validateMock ${mockDefinitionString}`);\n    this.mockDefinitionService.validateMockDefinition(mockDefinitionString).subscribe(\n      (value) => {\n        if (value) {\n          this.logger.log('mock definition file selected is valid');\n          this.validFileFlag = true;\n          this.mockdefinitionValid.push(this.tempName);\n          if (this.mockdefinitionInvalid.length > 0) {\n            this.buttonDisabled = true;\n            this.validFileFlag = false;\n          } else {\n            this.buttonDisabled = false;\n          }\n        }\n      },\n      (error) => {\n        this.logger.error('mock definition is invalid and was not saved to the store');\n        this.errorMessageToEmitFromCreate[this.mockDefinitionNameString[index]] = [error.message];\n        this.validFileFlag = false;\n        this.buttonDisabled = true;\n        this.mockdefinitionInvalid.push(this.tempName);\n      }\n    );\n  }\n\n  /**\n   * Sets the string representation of the file's content from the input-file component.\n   *\n   * @param fileStringFromFileInput string representation of the file's content\n   */\n  setMockDefinition(fileStringFromFileInput: string) {\n    this.mockDefinitionString.push(fileStringFromFileInput);\n    const index = this.mockDefinitionString.length - 1;\n    this.validateMock(fileStringFromFileInput, index);\n  }\n\n  /**\n   * Sets the file name in the component. This value is emitted from the input-file component.\n   *\n   * @param fileStringName string representation of the file's name\n   */\n  setMockDefinitionName(fileStringName: string) {\n    this.mockDefinitionNameString.push(fileStringName);\n    this.tempName = fileStringName;\n  }\n\n  /**\n   * This function checks if the emitted value is valid and that\n   * elements in the mockDefinitionNameString exist, then clears\n   * the collections for the next use of the form.\n   *\n   * @param x emitted value\n   */\n  checkEmit(x: boolean) {\n    if (this.mockDefinitionNameString.length > 0 && x) {\n      this.errorMessageToEmitFromCreate = {};\n      this.clearArrays();\n    }\n  }\n\n  /**\n   * createMock is a function that is responsible for storing the new MockDefinition\n   * in the designer store and navigating to the mock editor if the form is valid. If\n   * the form is invalid the function does nothing.\n   */\n  createMock() {\n    this.mockDefinitionString.forEach((mock, index) => {\n      this.mockDefinitionService\n        .AddMockDefinitionToStore(mock)\n        .pipe(map((value) => value))\n        .subscribe(\n          (value) => {\n            if (value) {\n              this.logger.log('mock definition was saved to the store');\n              this.router.navigateByUrl('endpoint-view');\n            }\n          },\n          (error) => {\n            this.logger.error('mock definition is invalid and was not saved to the store');\n            this.errorMessageToEmitFromCreate[this.mockDefinitionNameString[index]] = [error.message];\n          }\n        );\n    });\n  }\n\n  /**\n   * Goes back to the previous location in the app\n   */\n  goBack() {\n    this.location.back();\n  }\n\n  /**\n   * Clears the local arrays\n   */\n  clearArrays() {\n    this.mockDefinitionNameString = [];\n    this.mockDefinitionString = [];\n    this.mockdefinitionInvalid = [];\n    this.mockdefinitionValid = [];\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".buttons-div {\n  justify-content: space-between;\n  justify-self: flex-end;\n  align-items: flex-end;\n  margin: 2em 0;\n  margin-top: 50px;\n  padding: 10px;\n  button {\n    width: 10.234vw;\n    max-width: 131px;\n  }\n}\n\n.error-message {\n  color: red;\n}\n\n.import-from-file-container {\n  margin-top: 100px;\n  mat-card-title,\n  mat-card-subtitle {\n    text-align: center;\n  }\n}\n\n// hide the last divider in the list so it doesn't divide the end with no items\nmat-card div:last-child mat-divider {\n  display: none;\n}\n\n.noDots {\n  list-style-type: none;\n  list-style-image: none;\n}\n\n.flexColumn {\n  display: flex;\n  flex-direction: column;\n}\n\n.expand {\n  height: 100%;\n  width: 30.3vw;\n  margin-top: 20px;\n}\n\n.card {\n  height: 100%;\n}\n\n.errorStyle {\n  color: red;\n}\n",
                    "styleUrl": "./import-from-file-view.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "location",
                        "type": "Location",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "mockDefinitionService",
                        "type": "MockDefinitionService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "logger",
                        "type": "NGXLogger",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 21,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "location",
                        "type": "Location",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "mockDefinitionService",
                        "type": "MockDefinitionService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "logger",
                        "type": "NGXLogger",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<mat-card class=\"mat-elevation-z20 import-from-file-container flexColumn\">\n  <mat-card-title>Import From File(s)</mat-card-title>\n  <mat-card-subtitle>Import existing Mockdefinition file(s) below</mat-card-subtitle>\n  <app-file-input\n    class=\"capitalize\"\n    (fileContentEmit)=\"setMockDefinition($event)\"\n    (fileNameEmit)=\"setMockDefinitionName($event)\"\n    (clearContentEmit)=\"checkEmit(true)\"\n    label=\"Select Files - Required\"\n    accept=\".json\"\n    [errorMessage]=\"errorMessageToEmitFromCreate\"\n  >\n  </app-file-input>\n  <mat-card>\n    <mat-card-subtitle>\n      <h3>Imported Mockdefinition(s)</h3>\n    </mat-card-subtitle>\n    <mat-card-content class=\"expand\">\n      <mat-list dense>\n        <mat-list-item *ngFor=\"let mocks of mockdefinitionValid\">\n          <h3>{{ mocks | titlecase }}</h3>\n          <mat-icon matListIcon color=\"primary\">check_circle_outline</mat-icon>\n        </mat-list-item>\n        <mat-list-item *ngFor=\"let mocks of mockdefinitionInvalid\">\n          <h3>{{ mocks | titlecase }}</h3>\n          <mat-icon matListIcon color=\"warn\">cancel</mat-icon>\n        </mat-list-item>\n\n        <p class=\"errorStyle\" *ngIf=\"!isValid()\">Valid File(s) Required</p>\n      </mat-list>\n    </mat-card-content>\n  </mat-card>\n  <mat-card-footer>\n    <div class=\"row buttons-div\">\n      <button mat-raised-button color=\"primary\" (click)=\"goBack()\">Back</button>\n      <button mat-raised-button color=\"primary\" [disabled]=\"buttonDisabled\" (click)=\"createMock()\">Next</button>\n    </div>\n  </mat-card-footer>\n</mat-card>\n"
        },
        {
            "name": "ImportFromServerViewComponent",
            "id": "component-ImportFromServerViewComponent-cb36dad5a6d8da4ddf38d900ef547893813078f79bc67a0e005ce6c7ad848065b32cc2fcf5f6df7ca236266e18fdcbeea4f5c1bf97f82d0b8ee857e3ef538878",
            "file": "src/app/components/import-from-server-view/import-from-server-view.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-import-from-server-view",
            "styleUrls": [
                "./import-from-server-view.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./import-from-server-view.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "errorsRestRequest",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 36,
                    "type": "Record<string, >",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "body",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "concatToURI",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "controlsMockDefinitionToString",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "emptyListMessageServerBox",
                    "defaultValue": "'No Mockdefinition(s) '",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        144
                    ]
                },
                {
                    "name": "errors",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "formArray",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormArray",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "inputControl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormControl",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "mockDefinitions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MockDefinition[]",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "options",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Record<string | >",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "requestInProgress",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "requestObserver",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observer<MockDefinition[]>",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "title",
                    "defaultValue": "'Server URI'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "urlMaxLength",
                    "defaultValue": "2048",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        124,
                        144
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "getSpinnerId",
                    "args": [],
                    "optional": false,
                    "returnType": "\"show-spinner\" | \"hide-spinner\"",
                    "typeParameters": [],
                    "line": 76,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onBack",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 137,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nReturns to the previous location\n",
                    "description": "<p>Returns to the previous location</p>\n"
                },
                {
                    "name": "onListOutput",
                    "args": [
                        {
                            "name": "list",
                            "type": "FormControl[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 107,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSets the Mockdefinitions property equal to the list of MockDefinitions derived from the\nFormControl values.\none list to the other.\n",
                    "description": "<p>Sets the Mockdefinitions property equal to the list of MockDefinitions derived from the\nFormControl values.\none list to the other.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 3174,
                                "end": 3178,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "list"
                            },
                            "type": "FormControl[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 3168,
                                "end": 3173,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>The list of FormControls given by the shuttle list when the user moves items from\none list to the other.</p>\n"
                        }
                    ]
                },
                {
                    "name": "onResponse",
                    "args": [
                        {
                            "name": "response",
                            "type": "MockDefinition[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 123,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIf the response returned is not an error or domexceptions it sets the controls\nvalues to the response body. The control is then responsible for validation.\n",
                    "description": "<p>If the response returned is not an error or domexceptions it sets the controls\nvalues to the response body. The control is then responsible for validation.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 3763,
                                "end": 3771,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "response"
                            },
                            "type": "MockDefinition[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 3757,
                                "end": 3762,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>HttpResponse received by the input</p>\n"
                        }
                    ]
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 93,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe function called on submit. Sets the Mockdefinitions in the DesignerStore\n",
                    "description": "<p>The function called on submit. Sets the Mockdefinitions in the DesignerStore</p>\n"
                },
                {
                    "name": "sendRequest",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 80,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "sendRequestDisabled",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 72,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Location } from '@angular/common';\nimport { Component, Input, OnInit } from '@angular/core';\nimport { AbstractControl, FormArray, FormControl, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { NGXLogger } from 'ngx-logger';\nimport { Observer } from 'rxjs';\nimport { MockDefinition } from 'src/app/models/mock-definition/mock-definition.model';\nimport { OrbitalAdminService } from 'src/app/services/orbital-admin/orbital-admin.service';\nimport { DesignerStore } from 'src/app/store/designer-store';\n\n@Component({\n  selector: 'app-import-from-server-view',\n  templateUrl: './import-from-server-view.component.html',\n  styleUrls: ['./import-from-server-view.component.scss'],\n})\nexport class ImportFromServerViewComponent implements OnInit {\n  static readonly urlMaxLength = 2048;\n  readonly emptyListMessageServerBox = 'No Mockdefinition(s) ';\n\n  mockDefinitions: MockDefinition[] = [];\n  formArray: FormArray;\n  requestObserver: Observer<MockDefinition[]>;\n  options: Record<string, unknown> = {};\n  body?: string = null;\n\n  concatToURI = '';\n\n  inputControl: FormControl;\n  requestInProgress = false;\n  title = 'Server URI';\n\n  errors: string;\n\n  controlsMockDefinitionToString = (control: AbstractControl) => control.value.metadata.title;\n\n  @Input() set errorsRestRequest(errors: Record<string, unknown>) {\n    if (this.inputControl) {\n      this.inputControl.setErrors(errors);\n    }\n  }\n\n  constructor(\n    private location: Location,\n    private logger: NGXLogger,\n    private designerStore: DesignerStore,\n    private router: Router,\n    private orbitalService: OrbitalAdminService\n  ) {\n    this.formArray = new FormArray([]);\n\n    this.requestObserver = {\n      next: (event) => {\n        this.onResponse(event);\n        this.errors = '';\n      },\n      error: () => {\n        this.errors = 'File(s) could not be imported because of an error';\n        this.requestInProgress = false;\n        this.formArray = new FormArray([]);\n      },\n      complete: () => (this.requestInProgress = false),\n    };\n  }\n\n  ngOnInit() {\n    this.inputControl = new FormControl(\n      '',\n      Validators.compose([Validators.maxLength(ImportFromServerViewComponent.urlMaxLength)])\n    );\n  }\n\n  sendRequestDisabled() {\n    return this.inputControl.value.length === 0 || this.requestInProgress;\n  }\n\n  getSpinnerId() {\n    return this.requestInProgress ? 'show-spinner' : 'hide-spinner';\n  }\n\n  sendRequest() {\n    this.inputControl.markAsDirty();\n    if (this.sendRequestDisabled) {\n      this.requestInProgress = true;\n      this.errorsRestRequest = null;\n\n      this.orbitalService.getAll(`${this.inputControl.value}${this.concatToURI}`).subscribe(this.requestObserver);\n    }\n  }\n\n  /**\n   * The function called on submit. Sets the Mockdefinitions in the DesignerStore\n   */\n  onSubmit() {\n    for (const mock of this.mockDefinitions) {\n      this.designerStore.appendMockDefinition(mock);\n      this.designerStore.mockDefinition = mock;\n    }\n    this.router.navigateByUrl('/endpoint-view');\n  }\n\n  /**\n   * Sets the Mockdefinitions property equal to the list of MockDefinitions derived from the\n   * FormControl values.\n   * @param list The list of FormControls given by the shuttle list when the user moves items from\n   * one list to the other.\n   */\n  onListOutput(list: FormControl[]) {\n    this.mockDefinitions = list.map((control) => control.value);\n  }\n\n  /**\n   * Getter function that returns true if no Mock Definitions have been selected for\n   */\n  get disabled(): boolean {\n    return this.mockDefinitions.length === 0;\n  }\n\n  /**\n   * If the response returned is not an error or domexceptions it sets the controls\n   * values to the response body. The control is then responsible for validation.\n   * @param response HttpResponse received by the input\n   */\n  onResponse(response: MockDefinition[]) {\n    this.logger.debug('Received http response', response);\n\n    if (response) {\n      response.forEach((m) => (m.openApi.tags = m.openApi.tags.filter((t) => t.name !== 'openapi')));\n      this.formArray = new FormArray(response.map((mockDef) => new FormControl(mockDef, null)));\n\n      this.logger.debug('ImportFormServerViewComponent FormArray value:', this.formArray);\n    }\n  }\n\n  /**\n   * Returns to the previous location\n   */\n  onBack() {\n    this.location.back();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "mat-card {\n  min-width: 70vw;\n  min-height: 70vh;\n  margin: 6.824vh auto;\n\n  mat-card-title,\n  mat-card-subtitle {\n    align-self: center;\n    color: #000;\n    padding-top: 0.6em;\n  }\n\n  .button-div {\n    justify-content: space-between;\n    padding: 0 4em;\n    button {\n      padding: 0 2.5em;\n    }\n  }\n\n  .div-body {\n    margin: 0 2em;\n    overflow: visible;\n\n    app-shuttle-list {\n      height: 100%;\n      padding: 2em 4em;\n      max-height: calc(85% - 4em);\n      justify-content: flex-start;\n      align-self: stretch;\n\n      ::ng-deep > *:first-child {\n        flex-grow: 1;\n      }\n    }\n  }\n}\n\n.list-item {\n  width: 100%;\n  margin: 1em 0 !important;\n  h5 {\n    font-weight: 400;\n    font-size: 1.2em;\n    margin: 0;\n  }\n}\n\n.container {\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  mat-select {\n    min-width: 4.5em;\n    padding-bottom: 0.32em;\n    margin-right: 0.3em;\n  }\n  app-text-input {\n    flex: 0 !important;\n    text-transform: capitalize;\n  }\n\n  div#submit-buttons {\n    display: flex;\n    flex-direction: row;\n    margin-left: 1em;\n    mat-spinner {\n      margin-left: 10px;\n      flex-direction: center;\n\n      & #show-spinner {\n        display: visible !important;\n      }\n\n      &#hide-spinner {\n        display: none;\n      }\n    }\n  }\n}\n\n.error-message-import {\n  margin-top: -13px;\n}\n\n.btn-upload {\n  width: 5vw;\n  height: 5vh;\n  min-width: 7em;\n}\n",
                    "styleUrl": "./import-from-server-view.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "location",
                        "type": "Location",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "logger",
                        "type": "NGXLogger",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "designerStore",
                        "type": "DesignerStore",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "orbitalService",
                        "type": "OrbitalAdminService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 40,
                "jsdoctags": [
                    {
                        "name": "location",
                        "type": "Location",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "logger",
                        "type": "NGXLogger",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "designerStore",
                        "type": "DesignerStore",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "orbitalService",
                        "type": "OrbitalAdminService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "errorsRestRequest": {
                    "name": "errorsRestRequest",
                    "setSignature": {
                        "name": "errorsRestRequest",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "errors",
                                "type": "Record<string | >",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 36,
                        "jsdoctags": [
                            {
                                "name": "errors",
                                "type": "Record<string | >",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "disabled": {
                    "name": "disabled",
                    "getSignature": {
                        "name": "disabled",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 114,
                        "rawdescription": "\n\nGetter function that returns true if no Mock Definitions have been selected for\n",
                        "description": "<p>Getter function that returns true if no Mock Definitions have been selected for</p>\n"
                    }
                }
            },
            "templateData": "<mat-card class=\"column\">\n  <mat-card-title class=\"capitalize\">Import from Server</mat-card-title>\n  <mat-card-subtitle>Import existing Mockdefinition(s) below</mat-card-subtitle>\n  <div class=\"column center-hr flex-grow div-body\">\n    <app-tooltip message=\"Enter the Server URI that your Mockdefinition(s) are hosted on\">\n      <form>\n        <div class=\"container\">\n          <div class=\"uri-field\">\n            <app-text-input [title]=\"title\" maxLength=\"200\" [control]=\"inputControl\"></app-text-input>\n            <mat-hint class=\"error-message-import error-message\">{{ errors }}</mat-hint>\n          </div>\n\n          <div id=\"submit-buttons\">\n            <button\n              mat-raised-button\n              color=\"primary\"\n              (click)=\"sendRequest()\"\n              [disabled]=\"sendRequestDisabled()\"\n              class=\"btn-upload\"\n            >\n              Submit</button\n            ><mat-spinner diameter=\"25\" [id]=\"getSpinnerId()\"></mat-spinner>\n          </div>\n        </div>\n      </form>\n    </app-tooltip>\n    <app-shuttle-list\n      class=\"column flex-grow\"\n      [list]=\"formArray.controls\"\n      [itemToStringFn]=\"controlsMockDefinitionToString\"\n      [emptyListMessage]=\"emptyListMessageServerBox\"\n      leftTitle=\"Mockdefinition(s) from Server\"\n      rightTitle=\"Mockdefinition(s) To Import\"\n      (outputList)=\"onListOutput($event)\"\n    ></app-shuttle-list>\n  </div>\n  <div class=\"row button-div\">\n    <button mat-raised-button color=\"primary\" (click)=\"onBack()\">Back</button>\n    <button mat-raised-button color=\"primary\" [disabled]=\"disabled\" (click)=\"onSubmit()\">Next</button>\n  </div>\n</mat-card>\n"
        },
        {
            "name": "KeyValuePairFormComponent",
            "id": "component-KeyValuePairFormComponent-2683c8f40c86ddcb659d33e3f2b8522c52d08f71b26b1a7e0039c844bf5b8cd07f4e0d6967108edf00d2392eec105b69b40904d9f2bad1046db5ee3d9c835f54",
            "file": "src/app/shared/components/key-value-pair-form/key-value-pair-form.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => KeyValuePairFormComponent), multi: true,\n}",
                    "type": "component"
                },
                {
                    "name": "{\n    provide: NG_VALIDATORS, useExisting: forwardRef(() => KeyValuePairFormComponent), multi: true,\n}",
                    "type": "component"
                }
            ],
            "selector": "app-key-value-pair-form",
            "styleUrls": [
                "./key-value-pair-form.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./key-value-pair-form.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "allowDuplicateKeys",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 65,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "itemName",
                    "defaultValue": "'Key Value Pair'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 63,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "itemNamePlural",
                    "defaultValue": "'Key Value Pairs'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 64,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "form",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 51
                },
                {
                    "name": "itemIsDuplicatedEvent",
                    "defaultValue": "new EventEmitter<boolean>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 67
                },
                {
                    "name": "onChange",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<void>",
                    "optional": false,
                    "description": "",
                    "line": 241,
                    "modifierKind": [
                        144
                    ]
                },
                {
                    "name": "onTouched",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<void>",
                    "optional": false,
                    "description": "",
                    "line": 242,
                    "modifierKind": [
                        144
                    ]
                },
                {
                    "name": "subscriptions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription[]",
                    "optional": false,
                    "description": "",
                    "line": 235,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "validateNoDuplicatesInstance",
                    "defaultValue": "KeyValuePairFormComponent.validateNoDuplicates(false)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 69
                }
            ],
            "methodsClass": [
                {
                    "name": "addItemHandler",
                    "args": [
                        {
                            "name": "item",
                            "type": "KeyValuePairItemFormValues",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 134,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThis method listens to the event emitter from the child component and adds the item into the list\n",
                    "description": "<p>This method listens to the event emitter from the child component and adds the item into the list</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 3850,
                                "end": 3854,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "item"
                            },
                            "type": "KeyValuePairItemFormValues",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 3844,
                                "end": 3849,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>The item being taken in from the child component to be added</p>\n"
                        }
                    ]
                },
                {
                    "name": "cleanupSubscriptions",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 109,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "itemIsDuplicated",
                    "args": [
                        {
                            "name": "item",
                            "type": "KeyValuePairItemFormValues | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 165,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nTests whether the given item already exists\n",
                    "description": "<p>Tests whether the given item already exists</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 4942,
                                "end": 4946,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "item"
                            },
                            "type": "KeyValuePairItemFormValues | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 4936,
                                "end": 4941,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>the item to test</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 4970,
                                "end": 4977,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "returns"
                            },
                            "comment": "<p>true if the item is duplicated, false otherwise</p>\n"
                        }
                    ]
                },
                {
                    "name": "itemIsDuplicated",
                    "args": [
                        {
                            "name": "items",
                            "type": "KeyValuePairFormValues",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "item",
                            "type": "KeyValuePairItemFormValues | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "allowDuplicateKeys",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false"
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 176,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nTests whether the given item already exists in the provided list\n",
                    "description": "<p>Tests whether the given item already exists in the provided list</p>\n",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 5335,
                                "end": 5340,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "items"
                            },
                            "type": "KeyValuePairFormValues",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 5329,
                                "end": 5334,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>the list of items to test against</p>\n"
                        },
                        {
                            "name": {
                                "pos": 5387,
                                "end": 5391,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "item"
                            },
                            "type": "KeyValuePairItemFormValues | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 5381,
                                "end": 5386,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>the item to test (should be a reference from the provided list to avoid self-duplicate detection)</p>\n"
                        },
                        {
                            "name": "allowDuplicateKeys",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "tagName": {
                                "pos": 5496,
                                "end": 5503,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "returns"
                            },
                            "comment": "<p>true if the item is duplicated, false otherwise</p>\n"
                        }
                    ]
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 90,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 237,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 73,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "value",
                                    "type": "KeyValuePairFormValues",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 244,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "value",
                                    "type": "KeyValuePairFormValues",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": []
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 248,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeItemHandler",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 150,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHandle item removal actions triggered by a child form button\n",
                    "description": "<p>Handle item removal actions triggered by a child form button</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 4399,
                                "end": 4404,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "index"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 4393,
                                "end": 4398,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>the index of the item to remove</p>\n"
                        }
                    ]
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 117,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "subscribeToAddValueChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 100,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "validate",
                    "args": [
                        {
                            "name": "_",
                            "type": "FormControl",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ValidationErrors | null",
                    "typeParameters": [],
                    "line": 113,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "_",
                            "type": "FormControl",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "validateNoDuplicates",
                    "args": [
                        {
                            "name": "allowDuplicateKeys",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false"
                        }
                    ],
                    "optional": false,
                    "returnType": "ValidatorFn",
                    "typeParameters": [],
                    "line": 203,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nA reactive forms validator function that validates a FormArray containing kvp controls\n",
                    "description": "<p>A reactive forms validator function that validates a FormArray containing kvp controls</p>\n",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "allowDuplicateKeys",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "tagName": {
                                "pos": 6207,
                                "end": 6214,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "returns"
                            },
                            "comment": "<p>a ValidationErrors object containing any errors, or null if there are no errors</p>\n"
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "values",
                            "type": "KeyValuePairFormValues | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 121,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "values",
                            "type": "KeyValuePairFormValues | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  SimpleChanges,\n  forwardRef,\n} from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport {\n  AbstractControl,\n  ControlValueAccessor,\n  FormArray,\n  FormBuilder,\n  FormControl,\n  FormGroup,\n  NG_VALIDATORS,\n  NG_VALUE_ACCESSOR,\n  ValidationErrors,\n  Validator,\n  ValidatorFn,\n} from '@angular/forms';\nimport {\n  KeyValuePairItemFormComponent,\n  KeyValuePairItemFormValues,\n} from './key-value-pair-item-form/key-value-pair-item-form.component';\n\nexport type KeyValuePairFormValues = KeyValuePairItemFormValues[];\n\n@Component({\n  selector: 'app-key-value-pair-form',\n  templateUrl: './key-value-pair-form.component.html',\n  styleUrls: ['./key-value-pair-form.component.scss'],\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => KeyValuePairFormComponent),\n      multi: true,\n    },\n    {\n      provide: NG_VALIDATORS,\n      useExisting: forwardRef(() => KeyValuePairFormComponent),\n      multi: true,\n    },\n  ],\n})\nexport class KeyValuePairFormComponent implements ControlValueAccessor, Validator, OnInit, OnChanges, OnDestroy {\n  form: FormGroup;\n\n  get formArray(): FormArray {\n    // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n    return this.form.get('formArray') as FormArray;\n  }\n\n  get add(): FormControl {\n    // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n    return this.form.get('add') as FormControl;\n  }\n\n  @Input() itemName = 'Key Value Pair';\n  @Input() itemNamePlural = 'Key Value Pairs';\n  @Input() allowDuplicateKeys = false;\n\n  itemIsDuplicatedEvent = new EventEmitter<boolean>();\n\n  validateNoDuplicatesInstance = KeyValuePairFormComponent.validateNoDuplicates(false);\n\n  constructor(private formBuilder: FormBuilder, private cdRef: ChangeDetectorRef) {}\n\n  ngOnInit() {\n    this.form = this.formBuilder.group({\n      add: null,\n      formArray: this.formBuilder.array([], this.validateNoDuplicatesInstance),\n    });\n\n    this.subscriptions.push(\n      this.formArray.valueChanges.subscribe((values: KeyValuePairFormValues | null) => {\n        this.itemIsDuplicatedEvent.emit(this.itemIsDuplicated(this.add.value));\n        this.onChange.forEach((fn) => fn(values));\n        this.onTouched.forEach((fn) => fn());\n      })\n    );\n\n    this.subscribeToAddValueChanges();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.allowDuplicateKeys && !changes.allowDuplicateKeys.firstChange) {\n      this.formArray.removeValidators(this.validateNoDuplicatesInstance);\n      this.validateNoDuplicatesInstance = KeyValuePairFormComponent.validateNoDuplicates(\n        changes.allowDuplicateKeys.currentValue\n      );\n      this.formArray.addValidators(this.validateNoDuplicatesInstance);\n    }\n  }\n\n  subscribeToAddValueChanges() {\n    this.subscriptions.push(\n      this.add.valueChanges.subscribe((value) => {\n        this.itemIsDuplicatedEvent.emit(this.itemIsDuplicated(value));\n      })\n    );\n    this.cleanupSubscriptions();\n  }\n\n  cleanupSubscriptions() {\n    this.subscriptions = this.subscriptions.filter((s) => !s.closed);\n  }\n\n  validate(_: FormControl): ValidationErrors | null {\n    return this.formArray.valid ? null : { key_value_pair: true };\n  }\n\n  setDisabledState(isDisabled: boolean): void {\n    isDisabled ? this.formArray.disable() : this.formArray.enable();\n  }\n\n  writeValue(values?: KeyValuePairFormValues | null): void {\n    this.formArray.clear({ emitEvent: false });\n    if (values !== null && values !== undefined) {\n      values.forEach((item) =>\n        this.formArray.push(KeyValuePairItemFormComponent.buildForm(item), { emitEvent: false })\n      );\n    }\n  }\n\n  /**\n   * This method listens to the event emitter from the child component and adds the item into the list\n   * @param item The item being taken in from the child component to be added\n   */\n  addItemHandler(item: KeyValuePairItemFormValues) {\n    if (this.itemIsDuplicated(item)) {\n      this.itemIsDuplicatedEvent.emit(true);\n    } else {\n      const itemForm = KeyValuePairItemFormComponent.buildForm(item);\n      this.formArray.push(itemForm);\n      this.add.reset(null, { emitEvent: false });\n      this.subscribeToAddValueChanges();\n      this.cdRef.detectChanges();\n    }\n  }\n\n  /**\n   * Handle item removal actions triggered by a child form button\n   * @param index the index of the item to remove\n   */\n  removeItemHandler(index: number) {\n    if (!this.formArray.length || index < 0 || index >= this.formArray.length) {\n      throw new Error(`Unable to remove item, index (${index}) out of bounds.`);\n    }\n    this.formArray.removeAt(index);\n    this.formArray.controls.forEach((c) => c.updateValueAndValidity());\n    this.itemIsDuplicatedEvent.emit(this.itemIsDuplicated(this.add.value ?? {}));\n    this.cdRef.detectChanges();\n  }\n\n  /**\n   * Tests whether the given item already exists\n   * @param item the item to test\n   * @returns true if the item is duplicated, false otherwise\n   */\n  itemIsDuplicated(item: KeyValuePairItemFormValues | null): boolean {\n    const items = this.formArray.value ?? [];\n    return KeyValuePairFormComponent.itemIsDuplicated(items, item, this.allowDuplicateKeys);\n  }\n\n  /**\n   * Tests whether the given item already exists in the provided list\n   * @param items the list of items to test against\n   * @param item the item to test (should be a reference from the provided list to avoid self-duplicate detection)\n   * @returns true if the item is duplicated, false otherwise\n   */\n  static itemIsDuplicated(\n    items: KeyValuePairFormValues,\n    item: KeyValuePairItemFormValues | null,\n    allowDuplicateKeys: boolean = false\n  ): boolean {\n    if (item) {\n      for (const other of items) {\n        if (item === other) {\n          continue;\n        }\n\n        const itemIsDuplicated = item.key === other.key && (!allowDuplicateKeys || item.value === other.value);\n\n        if (itemIsDuplicated) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * A reactive forms validator function that validates a FormArray containing kvp controls\n   * @param formArray the FormArray object to validate\n   * @returns a ValidationErrors object containing any errors, or null if there are no errors\n   */\n  static validateNoDuplicates(allowDuplicateKeys: boolean = false): ValidatorFn {\n    return (formArray: FormArray) => {\n      const items: KeyValuePairFormValues = formArray.value ?? [];\n      const controls: AbstractControl[] = formArray.controls;\n      let error: ValidationErrors | null = null;\n\n      for (let i = 0; i < controls.length; i++) {\n        const control = controls[i];\n        const itemIsDuplicated = KeyValuePairFormComponent.itemIsDuplicated(items, items[i], allowDuplicateKeys);\n\n        if (itemIsDuplicated !== control.hasError('duplicate')) {\n          if (itemIsDuplicated) {\n            error = { duplicate: 'A duplicate item exists. Duplicates are not allowed.' };\n            control.setErrors({\n              ...(control.errors ?? {}),\n              ...error,\n            });\n          } else {\n            const { duplicate: _, ...errors } = control.errors;\n            control.setErrors(Object.keys(errors).length ? errors : null);\n          }\n        }\n      }\n\n      return error;\n    };\n  }\n\n  /*\n   * Boilerplate Code Below Here\n   */\n\n  private subscriptions: Subscription[] = [];\n\n  ngOnDestroy(): void {\n    this.subscriptions.forEach((s) => s.unsubscribe());\n  }\n\n  readonly onChange: Array<(value: KeyValuePairFormValues) => void> = [];\n  readonly onTouched: Array<() => void> = [];\n\n  registerOnChange(fn: (value: KeyValuePairFormValues) => void): void {\n    this.onChange.push(fn);\n  }\n\n  registerOnTouched(fn: () => void): void {\n    this.onTouched.push(fn);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".item-form {\n  margin-top: 0.5rem;\n}\n\n.mat-divider {\n  margin: 1.25rem;\n}\n",
                    "styleUrl": "./key-value-pair-form.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cdRef",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 69,
                "jsdoctags": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cdRef",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "ControlValueAccessor",
                "Validator",
                "OnInit",
                "OnChanges",
                "OnDestroy"
            ],
            "accessors": {
                "formArray": {
                    "name": "formArray",
                    "getSignature": {
                        "name": "formArray",
                        "type": "",
                        "returnType": "FormArray",
                        "line": 53
                    }
                },
                "add": {
                    "name": "add",
                    "getSignature": {
                        "name": "add",
                        "type": "",
                        "returnType": "FormControl",
                        "line": 58
                    }
                }
            },
            "templateData": "<ng-container [formGroup]=\"form\">\n  <app-key-value-pair-item-form\n    formControlName=\"add\"\n    title=\"Add {{ itemName }}\"\n    mode=\"add\"\n    (addItemEvent)=\"addItemHandler($event)\"\n    [itemIsDuplicatedEvent]=\"itemIsDuplicatedEvent\"\n  ></app-key-value-pair-item-form>\n\n  <mat-divider></mat-divider>\n\n  <div class=\"text-muted\" *ngIf=\"!formArray.controls.length\">No {{ itemNamePlural }} added</div>\n\n  <div class=\"item-form\" formArrayName=\"formArray\" *ngFor=\"let ctrl of formArray.controls; let i = index\">\n    <app-key-value-pair-item-form\n      [formControlName]=\"i\"\n      (removeItemEvent)=\"removeItemHandler(i)\"\n      [errors]=\"ctrl.errors | getStringErrors\"\n    ></app-key-value-pair-item-form>\n  </div>\n</ng-container>\n"
        },
        {
            "name": "KeyValuePairItemFormComponent",
            "id": "component-KeyValuePairItemFormComponent-1d924693fdadeab3a73ff07813adf611672ab61fcdf794073d1c9a216cba5b49ab6ea299d1e503274f7ffa32dda1b98a72f4472245a5330c727719775a87117f",
            "file": "src/app/shared/components/key-value-pair-form/key-value-pair-item-form/key-value-pair-item-form.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => KeyValuePairItemFormComponent), multi: true,\n}",
                    "type": "component"
                },
                {
                    "name": "{\n    provide: NG_VALIDATORS, useExisting: forwardRef(() => KeyValuePairItemFormComponent), multi: true,\n}",
                    "type": "component"
                }
            ],
            "selector": "app-key-value-pair-item-form",
            "styleUrls": [
                "./key-value-pair-item-form.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./key-value-pair-item-form.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "errors",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 53,
                    "type": "string[]",
                    "decorators": []
                },
                {
                    "name": "itemIsDuplicatedEvent",
                    "defaultValue": "new EventEmitter<boolean>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 55,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "mode",
                    "defaultValue": "'edit'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 54,
                    "type": "\"add\" | \"edit\"",
                    "decorators": []
                },
                {
                    "name": "title",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 52,
                    "type": "\"\"",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "addItemEvent",
                    "defaultValue": "new EventEmitter<KeyValuePairItemFormValues>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 49,
                    "type": "EventEmitter"
                },
                {
                    "name": "removeItemEvent",
                    "defaultValue": "new EventEmitter<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 50,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "form",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "onChange",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<void>",
                    "optional": false,
                    "description": "",
                    "line": 131,
                    "modifierKind": [
                        144
                    ]
                },
                {
                    "name": "onTouched",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<void>",
                    "optional": false,
                    "description": "",
                    "line": 132,
                    "modifierKind": [
                        144
                    ]
                },
                {
                    "name": "subscriptions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription[]",
                    "optional": false,
                    "description": "",
                    "line": 125,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "addItem",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 89,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "buildForm",
                    "args": [
                        {
                            "name": "item",
                            "type": "Partial<KeyValuePairItemFormValues>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "FormGroup",
                    "typeParameters": [],
                    "line": 111,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "Partial<KeyValuePairItemFormValues>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleIsDuplicatedEvent",
                    "args": [
                        {
                            "name": "isDuplicated",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "isDuplicated",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 127,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "value",
                                    "type": "KeyValuePairItemFormValues",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 134,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "value",
                                    "type": "KeyValuePairItemFormValues",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": []
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 138,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeItem",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 95,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 99,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "validate",
                    "args": [
                        {
                            "name": "_",
                            "type": "FormControl",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ValidationErrors | null",
                    "typeParameters": [],
                    "line": 121,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "_",
                            "type": "FormControl",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "Partial<KeyValuePairItemFormValues> | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 103,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "Partial<KeyValuePairItemFormValues> | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, OnDestroy, OnInit, Output, forwardRef } from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport {\n  ControlValueAccessor,\n  FormBuilder,\n  FormControl,\n  FormGroup,\n  NG_VALIDATORS,\n  NG_VALUE_ACCESSOR,\n  ValidationErrors,\n  Validator,\n  Validators,\n} from '@angular/forms';\n\nexport interface KeyValuePairItemFormValues {\n  key: string;\n  value: string;\n}\n\n@Component({\n  selector: 'app-key-value-pair-item-form',\n  templateUrl: './key-value-pair-item-form.component.html',\n  styleUrls: ['./key-value-pair-item-form.component.scss'],\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => KeyValuePairItemFormComponent),\n      multi: true,\n    },\n    {\n      provide: NG_VALIDATORS,\n      useExisting: forwardRef(() => KeyValuePairItemFormComponent),\n      multi: true,\n    },\n  ],\n})\nexport class KeyValuePairItemFormComponent implements ControlValueAccessor, Validator, OnInit, OnDestroy {\n  form: FormGroup;\n\n  get key(): FormControl {\n    // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n    return this.form.get('key') as FormControl;\n  }\n  get value(): FormControl {\n    // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n    return this.form.get('value') as FormControl;\n  }\n\n  @Output() readonly addItemEvent = new EventEmitter<KeyValuePairItemFormValues>();\n  @Output() readonly removeItemEvent = new EventEmitter<void>();\n\n  @Input() readonly title = '';\n  @Input() readonly errors: string[] = [];\n  @Input() readonly mode: 'add' | 'edit' = 'edit';\n  @Input() readonly itemIsDuplicatedEvent = new EventEmitter<boolean>();\n\n  constructor(private formBuilder: FormBuilder) {}\n\n  ngOnInit(): void {\n    this.form = this.formBuilder.group({\n      key: [null, Validators.required],\n      value: [null, Validators.required],\n    });\n\n    this.subscriptions.push(\n      this.form.valueChanges.subscribe((value: KeyValuePairItemFormValues | null) => {\n        this.onChange.forEach((fn) => fn(value));\n        this.onTouched.forEach((fn) => fn());\n      }),\n\n      this.itemIsDuplicatedEvent.subscribe((isDuplicated) => this.handleIsDuplicatedEvent(isDuplicated))\n    );\n  }\n\n  handleIsDuplicatedEvent(isDuplicated: boolean) {\n    if (isDuplicated !== this.form.hasError('duplicate')) {\n      if (isDuplicated) {\n        this.form.setErrors({\n          ...(this.form.errors ?? {}),\n          duplicate: 'This item already exists. Duplicates are not allowed.',\n        });\n      } else {\n        const { duplicate: _, ...errors } = this.form.errors;\n        this.form.setErrors(Object.keys(errors).length ? errors : null);\n      }\n    }\n  }\n\n  addItem() {\n    if (this.form.valid) {\n      this.addItemEvent.emit(this.form.value);\n    }\n  }\n\n  removeItem() {\n    this.removeItemEvent.emit();\n  }\n\n  setDisabledState(isDisabled: boolean): void {\n    isDisabled ? this.form.disable() : this.form.enable();\n  }\n\n  writeValue(value?: Partial<KeyValuePairItemFormValues> | null): void {\n    if (value === null || value === undefined) {\n      this.form.reset({ value: null }, { emitEvent: false });\n    } else {\n      this.form.patchValue(value, { emitEvent: false });\n    }\n  }\n\n  static buildForm(item: Partial<KeyValuePairItemFormValues>): FormGroup {\n    // Note: this forms only needs the structure to propagate values, no functionality required\n    const fb = new FormBuilder();\n    return fb.group({ key: item.key ?? null, value: item.value ?? null });\n  }\n\n  /*\n   * Boilerplate Code Below Here\n   */\n\n  validate(_: FormControl): ValidationErrors | null {\n    return this.form.valid ? null : { key_value_pair_item: true };\n  }\n\n  private subscriptions: Subscription[] = [];\n\n  ngOnDestroy(): void {\n    this.subscriptions.forEach((s) => s.unsubscribe());\n  }\n\n  readonly onChange: Array<(value: KeyValuePairItemFormValues) => void> = [];\n  readonly onTouched: Array<() => void> = [];\n\n  registerOnChange(fn: (value: KeyValuePairItemFormValues) => void): void {\n    this.onChange.push(fn);\n  }\n\n  registerOnTouched(fn: () => void): void {\n    this.onTouched.push(fn);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".row {\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  align-items: center;\n  padding-left: 0.5rem;\n  padding-right: 0.5rem;\n}\n\n.row > * {\n  margin-right: 1rem;\n}\n\n.row > *:last-child {\n  margin-right: 0;\n}\n\n.flex-grow {\n  flex-grow: 1;\n}\n\n.flex-grow-2 {\n  flex-grow: 2;\n}\n\n.hide {\n  display: none;\n}\n\n.mat-error {\n  margin-left: 0.5rem;\n}\n\n.item-title {\n  margin-bottom: 0.5rem;\n}\n",
                    "styleUrl": "./key-value-pair-item-form.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 55,
                "jsdoctags": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "ControlValueAccessor",
                "Validator",
                "OnInit",
                "OnDestroy"
            ],
            "accessors": {
                "key": {
                    "name": "key",
                    "getSignature": {
                        "name": "key",
                        "type": "",
                        "returnType": "FormControl",
                        "line": 40
                    }
                },
                "value": {
                    "name": "value",
                    "getSignature": {
                        "name": "value",
                        "type": "",
                        "returnType": "FormControl",
                        "line": 44
                    }
                }
            },
            "templateData": "<mat-card [formGroup]=\"form\">\n  <div class=\"mat-h3 policy-title\" *ngIf=\"title\">{{ title }}</div>\n\n  <div class=\"row\">\n    <mat-form-field class=\"flex-grow\">\n      <input formControlName=\"key\" matInput placeholder=\"Key\" />\n    </mat-form-field>\n\n    <mat-form-field class=\"flex-grow-2\">\n      <input formControlName=\"value\" matInput placeholder=\"Value\" />\n    </mat-form-field>\n\n    <button\n      mat-mini-fab\n      *ngIf=\"mode === 'add'\"\n      color=\"primary\"\n      [disabled]=\"!form.valid || !form.touched\"\n      (click)=\"addItem()\"\n    >\n      <mat-icon>add</mat-icon>\n    </button>\n    <button mat-icon-button *ngIf=\"mode === 'edit'\" color=\"warn\" (click)=\"removeItem()\">\n      <mat-icon>delete_forever</mat-icon>\n    </button>\n  </div>\n  <ng-container *ngIf=\"key.invalid && key.errors && (key.dirty || key.touched)\">\n    <mat-error *ngIf=\"key.errors.required\">The Key is required</mat-error>\n    <mat-error *ngFor=\"let error of key.errors | getStringErrors\">{{ error }}</mat-error>\n  </ng-container>\n  <ng-container *ngIf=\"value.invalid && value.errors && (value.dirty || value.touched)\">\n    <mat-error *ngIf=\"value.errors.required\">The Value is required</mat-error>\n    <mat-error *ngFor=\"let error of value.errors | getStringErrors\">{{ error }}</mat-error>\n  </ng-container>\n  <ng-container *ngIf=\"form.invalid && form.errors && (form.dirty || form.touched)\">\n    <mat-error *ngFor=\"let error of form.errors | getStringErrors\">{{ error }}</mat-error>\n  </ng-container>\n  <mat-error *ngFor=\"let error of errors\">{{ error }}</mat-error>\n</mat-card>\n"
        },
        {
            "name": "KeyValueRuleFormComponent",
            "id": "component-KeyValueRuleFormComponent-facf8efe6b83bed2fa6595b9226a61b8969db43418325989202b1b822d7cb2127def4c070c6f179bb899cad1a08ebafedba6bde5f07f7d17f611ce7579f71291",
            "file": "src/app/shared/components/key-value-rule-form/key-value-rule-form.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => KeyValueRuleFormComponent), multi: true,\n}",
                    "type": "component"
                },
                {
                    "name": "{\n    provide: NG_VALIDATORS, useExisting: forwardRef(() => KeyValueRuleFormComponent), multi: true,\n}",
                    "type": "component"
                }
            ],
            "selector": "app-key-value-rule-form",
            "styleUrls": [
                "./key-value-rule-form.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./key-value-rule-form.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "allowDuplicateKeys",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 66,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "allowKeyWhitespace",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 65,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "itemName",
                    "defaultValue": "'Key Value Rule item'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 63,
                    "type": "\"Key Value Rule item\"",
                    "decorators": []
                },
                {
                    "name": "itemNamePlural",
                    "defaultValue": "'Key Value Rule items'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 64,
                    "type": "\"Key Value Rule items\"",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "form",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 51
                },
                {
                    "name": "itemIsDuplicatedEvent",
                    "defaultValue": "new EventEmitter<boolean>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 68
                },
                {
                    "name": "onChange",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<void>",
                    "optional": false,
                    "description": "",
                    "line": 243,
                    "modifierKind": [
                        144
                    ]
                },
                {
                    "name": "onTouched",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<void>",
                    "optional": false,
                    "description": "",
                    "line": 244,
                    "modifierKind": [
                        144
                    ]
                },
                {
                    "name": "subscriptions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription[]",
                    "optional": false,
                    "description": "",
                    "line": 237,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "validateNoDuplicatesInstance",
                    "defaultValue": "KeyValueRuleFormComponent.validateNoDuplicates(true)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 70
                }
            ],
            "methodsClass": [
                {
                    "name": "addItemHandler",
                    "args": [
                        {
                            "name": "item",
                            "type": "KeyValueRuleItemFormValues",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 135,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThis method listens to the event emitter from the child component and adds the item into the list\n",
                    "description": "<p>This method listens to the event emitter from the child component and adds the item into the list</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 3915,
                                "end": 3919,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "item"
                            },
                            "type": "KeyValueRuleItemFormValues",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 3909,
                                "end": 3914,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>The item being taken in from the child component to be added</p>\n"
                        }
                    ]
                },
                {
                    "name": "cleanupSubscriptions",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 110,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "itemIsDuplicated",
                    "args": [
                        {
                            "name": "item",
                            "type": "KeyValueRuleItemFormValues | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 166,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nTests whether the given item already exists\n",
                    "description": "<p>Tests whether the given item already exists</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 5007,
                                "end": 5011,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "item"
                            },
                            "type": "KeyValueRuleItemFormValues | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 5001,
                                "end": 5006,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>the item to test</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 5035,
                                "end": 5042,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "returns"
                            },
                            "comment": "<p>true if the item is duplicated, false otherwise</p>\n"
                        }
                    ]
                },
                {
                    "name": "itemIsDuplicated",
                    "args": [
                        {
                            "name": "items",
                            "type": "KeyValueRuleFormValues",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "item",
                            "type": "KeyValueRuleItemFormValues | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "allowDuplicateKeys",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false"
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 177,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nTests whether the given item already exists in the provided list\n",
                    "description": "<p>Tests whether the given item already exists in the provided list</p>\n",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 5400,
                                "end": 5405,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "items"
                            },
                            "type": "KeyValueRuleFormValues",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 5394,
                                "end": 5399,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>the list of items to test against</p>\n"
                        },
                        {
                            "name": {
                                "pos": 5452,
                                "end": 5456,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "item"
                            },
                            "type": "KeyValueRuleItemFormValues | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 5446,
                                "end": 5451,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>the item to test (should be a reference from the provided list to avoid self-duplicate detection)</p>\n"
                        },
                        {
                            "name": "allowDuplicateKeys",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "tagName": {
                                "pos": 5561,
                                "end": 5568,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "returns"
                            },
                            "comment": "<p>true if the item is duplicated, false otherwise</p>\n"
                        }
                    ]
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 91,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 239,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "value",
                                    "type": "KeyValueRuleFormValues",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 246,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "value",
                                    "type": "KeyValueRuleFormValues",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": []
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 250,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeItemHandler",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 151,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHandle item removal actions triggered by a child form button\n",
                    "description": "<p>Handle item removal actions triggered by a child form button</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 4464,
                                "end": 4469,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "index"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 4458,
                                "end": 4463,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>the index of the item to remove</p>\n"
                        }
                    ]
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 118,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "subscribeToAddValueChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 101,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "validate",
                    "args": [
                        {
                            "name": "_",
                            "type": "FormControl",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ValidationErrors | null",
                    "typeParameters": [],
                    "line": 114,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "_",
                            "type": "FormControl",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "validateNoDuplicates",
                    "args": [
                        {
                            "name": "allowDuplicateKeys",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false"
                        }
                    ],
                    "optional": false,
                    "returnType": "ValidatorFn",
                    "typeParameters": [],
                    "line": 205,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nA reactive forms validator function that validates a FormArray containing kvp controls\n",
                    "description": "<p>A reactive forms validator function that validates a FormArray containing kvp controls</p>\n",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "allowDuplicateKeys",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "tagName": {
                                "pos": 6312,
                                "end": 6319,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "returns"
                            },
                            "comment": "<p>a ValidationErrors object containing any errors, or null if there are no errors</p>\n"
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "values",
                            "type": "KeyValueRuleFormValues | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 122,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "values",
                            "type": "KeyValueRuleFormValues | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  SimpleChanges,\n  forwardRef,\n} from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport {\n  AbstractControl,\n  ControlValueAccessor,\n  FormArray,\n  FormBuilder,\n  FormControl,\n  FormGroup,\n  NG_VALIDATORS,\n  NG_VALUE_ACCESSOR,\n  ValidationErrors,\n  Validator,\n  ValidatorFn,\n} from '@angular/forms';\nimport {\n  KeyValueRuleItemFormComponent,\n  KeyValueRuleItemFormValues,\n} from './key-value-rule-item-form/key-value-rule-item-form.component';\n\nexport type KeyValueRuleFormValues = KeyValueRuleItemFormValues[];\n\n@Component({\n  selector: 'app-key-value-rule-form',\n  templateUrl: './key-value-rule-form.component.html',\n  styleUrls: ['./key-value-rule-form.component.scss'],\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => KeyValueRuleFormComponent),\n      multi: true,\n    },\n    {\n      provide: NG_VALIDATORS,\n      useExisting: forwardRef(() => KeyValueRuleFormComponent),\n      multi: true,\n    },\n  ],\n})\nexport class KeyValueRuleFormComponent implements ControlValueAccessor, Validator, OnInit, OnChanges, OnDestroy {\n  form: FormGroup;\n\n  get formArray(): FormArray {\n    // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n    return this.form.get('formArray') as FormArray;\n  }\n\n  get add(): FormControl {\n    // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n    return this.form.get('add') as FormControl;\n  }\n\n  @Input() readonly itemName = 'Key Value Rule item';\n  @Input() readonly itemNamePlural = 'Key Value Rule items';\n  @Input() allowKeyWhitespace = false;\n  @Input() allowDuplicateKeys = true;\n\n  itemIsDuplicatedEvent = new EventEmitter<boolean>();\n\n  validateNoDuplicatesInstance = KeyValueRuleFormComponent.validateNoDuplicates(true);\n\n  constructor(private formBuilder: FormBuilder, private cdRef: ChangeDetectorRef) {}\n\n  ngOnInit() {\n    this.form = this.formBuilder.group({\n      add: null,\n      formArray: this.formBuilder.array([], this.validateNoDuplicatesInstance),\n    });\n\n    this.subscriptions.push(\n      this.formArray.valueChanges.subscribe((values: KeyValueRuleFormValues | null) => {\n        this.itemIsDuplicatedEvent.emit(this.itemIsDuplicated(this.add.value));\n        this.onChange.forEach((fn) => fn(values));\n        this.onTouched.forEach((fn) => fn());\n      })\n    );\n\n    this.subscribeToAddValueChanges();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.allowDuplicateKeys && !changes.allowDuplicateKeys.firstChange) {\n      this.formArray.removeValidators(this.validateNoDuplicatesInstance);\n      this.validateNoDuplicatesInstance = KeyValueRuleFormComponent.validateNoDuplicates(\n        changes.allowDuplicateKeys.currentValue\n      );\n      this.formArray.addValidators(this.validateNoDuplicatesInstance);\n    }\n  }\n\n  subscribeToAddValueChanges() {\n    this.subscriptions.push(\n      this.add.valueChanges.subscribe((value) => {\n        this.itemIsDuplicatedEvent.emit(this.itemIsDuplicated(value));\n      })\n    );\n    this.cleanupSubscriptions();\n  }\n\n  cleanupSubscriptions() {\n    this.subscriptions = this.subscriptions.filter((s) => !s.closed);\n  }\n\n  validate(_: FormControl): ValidationErrors | null {\n    return this.formArray.valid ? null : { key_value_rule: true };\n  }\n\n  setDisabledState(isDisabled: boolean): void {\n    isDisabled ? this.formArray.disable() : this.formArray.enable();\n  }\n\n  writeValue(values?: KeyValueRuleFormValues | null): void {\n    this.formArray.clear({ emitEvent: false });\n    if (values !== null && values !== undefined) {\n      values.forEach((item) =>\n        this.formArray.push(KeyValueRuleItemFormComponent.buildForm(item), { emitEvent: false })\n      );\n    }\n  }\n\n  /**\n   * This method listens to the event emitter from the child component and adds the item into the list\n   * @param item The item being taken in from the child component to be added\n   */\n  addItemHandler(item: KeyValueRuleItemFormValues) {\n    if (this.itemIsDuplicated(item)) {\n      this.itemIsDuplicatedEvent.emit(true);\n    } else {\n      const itemForm = KeyValueRuleItemFormComponent.buildForm(item);\n      this.formArray.push(itemForm);\n      this.add.reset(null, { emitEvent: false });\n      this.subscribeToAddValueChanges();\n      this.cdRef.detectChanges();\n    }\n  }\n\n  /**\n   * Handle item removal actions triggered by a child form button\n   * @param index the index of the item to remove\n   */\n  removeItemHandler(index: number) {\n    if (!this.formArray.length || index < 0 || index >= this.formArray.length) {\n      throw new Error(`Unable to remove item, index (${index}) out of bounds.`);\n    }\n    this.formArray.removeAt(index);\n    this.formArray.controls.forEach((c) => c.updateValueAndValidity());\n    this.itemIsDuplicatedEvent.emit(this.itemIsDuplicated(this.add.value ?? {}));\n    this.cdRef.detectChanges();\n  }\n\n  /**\n   * Tests whether the given item already exists\n   * @param item the item to test\n   * @returns true if the item is duplicated, false otherwise\n   */\n  itemIsDuplicated(item: KeyValueRuleItemFormValues | null): boolean {\n    const items = this.formArray.value ?? [];\n    return KeyValueRuleFormComponent.itemIsDuplicated(items, item, this.allowDuplicateKeys);\n  }\n\n  /**\n   * Tests whether the given item already exists in the provided list\n   * @param items the list of items to test against\n   * @param item the item to test (should be a reference from the provided list to avoid self-duplicate detection)\n   * @returns true if the item is duplicated, false otherwise\n   */\n  static itemIsDuplicated(\n    items: KeyValueRuleFormValues,\n    item: KeyValueRuleItemFormValues | null,\n    allowDuplicateKeys: boolean = false\n  ): boolean {\n    if (item) {\n      for (const other of items) {\n        if (item === other) {\n          continue;\n        }\n\n        const itemIsDuplicated =\n          item.key === other.key && (!allowDuplicateKeys || (item.value === other.value && item.type === other.type));\n\n        if (itemIsDuplicated) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * A reactive forms validator function that validates a FormArray containing kvp controls\n   * @param formArray the FormArray object to validate\n   * @returns a ValidationErrors object containing any errors, or null if there are no errors\n   */\n  static validateNoDuplicates(allowDuplicateKeys: boolean = false): ValidatorFn {\n    return (formArray: FormArray) => {\n      const items: KeyValueRuleFormValues = formArray.value ?? [];\n      const controls: AbstractControl[] = formArray.controls;\n      let error: ValidationErrors | null = null;\n\n      for (let i = 0; i < controls.length; i++) {\n        const control = controls[i];\n        const itemIsDuplicated = KeyValueRuleFormComponent.itemIsDuplicated(items, items[i], allowDuplicateKeys);\n\n        if (itemIsDuplicated !== control.hasError('duplicate')) {\n          if (itemIsDuplicated) {\n            error = { duplicate: 'A duplicate item exists. Duplicates are not allowed.' };\n            control.setErrors({\n              ...(control.errors ?? {}),\n              ...error,\n            });\n          } else {\n            const { duplicate: _, ...errors } = control.errors;\n            control.setErrors(Object.keys(errors).length ? errors : null);\n          }\n        }\n      }\n\n      return error;\n    };\n  }\n\n  /*\n   * Boilerplate Code Below Here\n   */\n\n  private subscriptions: Subscription[] = [];\n\n  ngOnDestroy(): void {\n    this.subscriptions.forEach((s) => s.unsubscribe());\n  }\n\n  readonly onChange: Array<(value: KeyValueRuleFormValues) => void> = [];\n  readonly onTouched: Array<() => void> = [];\n\n  registerOnChange(fn: (value: KeyValueRuleFormValues) => void): void {\n    this.onChange.push(fn);\n  }\n\n  registerOnTouched(fn: () => void): void {\n    this.onTouched.push(fn);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".item-form {\n  margin-top: 0.5rem;\n}\n\n.mat-divider {\n  margin: 1.25rem;\n}\n",
                    "styleUrl": "./key-value-rule-form.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cdRef",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 70,
                "jsdoctags": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cdRef",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "ControlValueAccessor",
                "Validator",
                "OnInit",
                "OnChanges",
                "OnDestroy"
            ],
            "accessors": {
                "formArray": {
                    "name": "formArray",
                    "getSignature": {
                        "name": "formArray",
                        "type": "",
                        "returnType": "FormArray",
                        "line": 53
                    }
                },
                "add": {
                    "name": "add",
                    "getSignature": {
                        "name": "add",
                        "type": "",
                        "returnType": "FormControl",
                        "line": 58
                    }
                }
            },
            "templateData": "<ng-container [formGroup]=\"form\">\n  <app-key-value-rule-item-form\n    formControlName=\"add\"\n    title=\"Add {{ itemName }}\"\n    mode=\"add\"\n    (addItemEvent)=\"addItemHandler($event)\"\n    [itemIsDuplicatedEvent]=\"itemIsDuplicatedEvent\"\n    [allowKeyWhitespace]=\"allowKeyWhitespace\"\n  ></app-key-value-rule-item-form>\n\n  <mat-divider></mat-divider>\n\n  <div class=\"text-muted\" *ngIf=\"!formArray.controls.length\">No {{ itemNamePlural }} added</div>\n\n  <div class=\"item-form\" formArrayName=\"formArray\" *ngFor=\"let ctrl of formArray.controls; let i = index\">\n    <app-key-value-rule-item-form\n      [formControlName]=\"i\"\n      (removeItemEvent)=\"removeItemHandler(i)\"\n      [errors]=\"ctrl.errors | getStringErrors\"\n      [allowKeyWhitespace]=\"allowKeyWhitespace\"\n    ></app-key-value-rule-item-form>\n  </div>\n</ng-container>\n"
        },
        {
            "name": "KeyValueRuleItemFormComponent",
            "id": "component-KeyValueRuleItemFormComponent-e05143b7c2c83b54e746eb6a5126c7f784f99e8fed59bfc59375b55a8b84574d3c6103905c0693a9c1c4c4ad35a0614b526ff4b301d41add73476e1b77b0944e",
            "file": "src/app/shared/components/key-value-rule-form/key-value-rule-item-form/key-value-rule-item-form.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => KeyValueRuleItemFormComponent), multi: true,\n}",
                    "type": "component"
                },
                {
                    "name": "{\n    provide: NG_VALIDATORS, useExisting: forwardRef(() => KeyValueRuleItemFormComponent), multi: true,\n}",
                    "type": "component"
                }
            ],
            "selector": "app-key-value-rule-item-form",
            "styleUrls": [
                "./key-value-rule-item-form.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./key-value-rule-item-form.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "allowKeyWhitespace",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 75,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "errors",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 70,
                    "type": "string[]",
                    "decorators": []
                },
                {
                    "name": "itemIsDuplicatedEvent",
                    "defaultValue": "new EventEmitter<boolean>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 72,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "keyMaxLength",
                    "defaultValue": "200",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 73,
                    "type": "200",
                    "decorators": []
                },
                {
                    "name": "mode",
                    "defaultValue": "'edit'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 71,
                    "type": "\"add\" | \"edit\"",
                    "decorators": []
                },
                {
                    "name": "title",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 69,
                    "type": "\"\"",
                    "decorators": []
                },
                {
                    "name": "valueMaxLength",
                    "defaultValue": "3000",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 74,
                    "type": "3000",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "addItemEvent",
                    "defaultValue": "new EventEmitter<KeyValueRuleItemFormValues>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 66,
                    "type": "EventEmitter"
                },
                {
                    "name": "removeItemEvent",
                    "defaultValue": "new EventEmitter<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 67,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "form",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 51
                },
                {
                    "name": "onChange",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<void>",
                    "optional": false,
                    "description": "",
                    "line": 179,
                    "modifierKind": [
                        144
                    ]
                },
                {
                    "name": "onTouched",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<void>",
                    "optional": false,
                    "description": "",
                    "line": 180,
                    "modifierKind": [
                        144
                    ]
                },
                {
                    "name": "ruleTypes",
                    "defaultValue": "[\n    { value: RuleType.REGEX, label: 'Matches Regex' },\n    { value: RuleType.TEXTSTARTSWITH, label: 'Starts With' },\n    { value: RuleType.TEXTENDSWITH, label: 'Ends With' },\n    { value: RuleType.TEXTCONTAINS, label: 'Contains' },\n    { value: RuleType.TEXTEQUALS, label: 'Equals' },\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 77,
                    "modifierKind": [
                        144
                    ]
                },
                {
                    "name": "subscriptions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription[]",
                    "optional": false,
                    "description": "",
                    "line": 173,
                    "modifierKind": [
                        121,
                        144
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "addItem",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 128,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "buildForm",
                    "args": [
                        {
                            "name": "item",
                            "type": "Partial<KeyValueRuleItemFormValues>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "FormGroup",
                    "typeParameters": [],
                    "line": 159,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "Partial<KeyValueRuleItemFormValues>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleIsDuplicatedEvent",
                    "args": [
                        {
                            "name": "isDuplicated",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 114,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "isDuplicated",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 104,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 175,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 87,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "noWhiteSpaceValidator",
                    "args": [
                        {
                            "name": "control",
                            "type": "AbstractControl",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ValidationErrors | null",
                    "typeParameters": [],
                    "line": 155,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nControl validator that disallows whitespace in a string value control\n",
                    "description": "<p>Control validator that disallows whitespace in a string value control</p>\n",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 4522,
                                "end": 4529,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "control"
                            },
                            "type": "AbstractControl",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 4516,
                                "end": 4521,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>the form control</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 4553,
                                "end": 4560,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "returns"
                            },
                            "comment": "<p>a ValidationErrors object if the value contains whitespace, otherwise null</p>\n"
                        }
                    ]
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "value",
                                    "type": "KeyValueRuleItemFormValues",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 182,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "value",
                                    "type": "KeyValueRuleItemFormValues",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": []
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 186,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeItem",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 134,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 138,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "validate",
                    "args": [
                        {
                            "name": "_",
                            "type": "FormControl",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ValidationErrors | null",
                    "typeParameters": [],
                    "line": 169,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "_",
                            "type": "FormControl",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "Partial<KeyValueRuleItemFormValues> | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 142,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "Partial<KeyValueRuleItemFormValues> | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  EventEmitter,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Output,\n  SimpleChanges,\n  forwardRef,\n} from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport {\n  AbstractControl,\n  ControlValueAccessor,\n  FormBuilder,\n  FormControl,\n  FormGroup,\n  NG_VALIDATORS,\n  NG_VALUE_ACCESSOR,\n  ValidationErrors,\n  Validator,\n  Validators,\n} from '@angular/forms';\nimport { RuleType } from 'src/app/models/mock-definition/scenario/rule-type';\n\nexport interface KeyValueRuleItemFormValues {\n  key: string;\n  value: string;\n  type: RuleType;\n}\n\n@Component({\n  selector: 'app-key-value-rule-item-form',\n  templateUrl: './key-value-rule-item-form.component.html',\n  styleUrls: ['./key-value-rule-item-form.component.scss'],\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => KeyValueRuleItemFormComponent),\n      multi: true,\n    },\n    {\n      provide: NG_VALIDATORS,\n      useExisting: forwardRef(() => KeyValueRuleItemFormComponent),\n      multi: true,\n    },\n  ],\n})\nexport class KeyValueRuleItemFormComponent implements ControlValueAccessor, Validator, OnInit, OnChanges, OnDestroy {\n  form: FormGroup;\n\n  get key(): FormControl {\n    // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n    return this.form.get('key') as FormControl;\n  }\n  get value(): FormControl {\n    // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n    return this.form.get('value') as FormControl;\n  }\n  get type(): FormControl {\n    // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n    return this.form.get('type') as FormControl;\n  }\n\n  @Output() addItemEvent = new EventEmitter<KeyValueRuleItemFormValues>();\n  @Output() removeItemEvent = new EventEmitter<void>();\n\n  @Input() readonly title = '';\n  @Input() readonly errors: string[] = [];\n  @Input() mode: 'add' | 'edit' = 'edit';\n  @Input() readonly itemIsDuplicatedEvent = new EventEmitter<boolean>();\n  @Input() readonly keyMaxLength = 200;\n  @Input() readonly valueMaxLength = 3000;\n  @Input() allowKeyWhitespace = false;\n\n  readonly ruleTypes = [\n    { value: RuleType.REGEX, label: 'Matches Regex' },\n    { value: RuleType.TEXTSTARTSWITH, label: 'Starts With' },\n    { value: RuleType.TEXTENDSWITH, label: 'Ends With' },\n    { value: RuleType.TEXTCONTAINS, label: 'Contains' },\n    { value: RuleType.TEXTEQUALS, label: 'Equals' },\n  ];\n\n  constructor(private formBuilder: FormBuilder) {}\n\n  ngOnInit(): void {\n    this.form = this.formBuilder.group({\n      key: [null, [Validators.required, KeyValueRuleItemFormComponent.noWhiteSpaceValidator]],\n      value: [null, [Validators.required]],\n      type: [null, Validators.required],\n    });\n\n    this.subscriptions.push(\n      this.form.valueChanges.subscribe((value: KeyValueRuleItemFormValues | null) => {\n        this.onChange.forEach((fn) => fn(value));\n        this.onTouched.forEach((fn) => fn());\n      }),\n\n      this.itemIsDuplicatedEvent.subscribe((isDuplicated) => this.handleIsDuplicatedEvent(isDuplicated))\n    );\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.allowKeyWhitespace && !changes.allowKeyWhitespace.firstChange) {\n      if (changes.allowKeyWhitespace.currentValue) {\n        this.key.removeValidators(KeyValueRuleItemFormComponent.noWhiteSpaceValidator);\n      } else {\n        this.key.addValidators(KeyValueRuleItemFormComponent.noWhiteSpaceValidator);\n      }\n    }\n  }\n\n  handleIsDuplicatedEvent(isDuplicated: boolean) {\n    if (isDuplicated !== this.form.hasError('duplicate')) {\n      if (isDuplicated) {\n        this.form.setErrors({\n          ...(this.form.errors ?? {}),\n          duplicate: 'This item already exists. Duplicates are not allowed.',\n        });\n      } else {\n        const { duplicate: _, ...errors } = this.form.errors;\n        this.form.setErrors(Object.keys(errors).length ? errors : null);\n      }\n    }\n  }\n\n  addItem() {\n    if (this.form.valid) {\n      this.addItemEvent.emit(this.form.value);\n    }\n  }\n\n  removeItem() {\n    this.removeItemEvent.emit();\n  }\n\n  setDisabledState(isDisabled: boolean): void {\n    isDisabled ? this.form.disable() : this.form.enable();\n  }\n\n  writeValue(value?: Partial<KeyValueRuleItemFormValues> | null): void {\n    if (value === null || value === undefined) {\n      this.form.reset({ value: null }, { emitEvent: false });\n    } else {\n      this.form.patchValue(value, { emitEvent: false });\n    }\n  }\n\n  /**\n   * Control validator that disallows whitespace in a string value control\n   * @param control the form control\n   * @returns a ValidationErrors object if the value contains whitespace, otherwise null\n   */\n  static noWhiteSpaceValidator(control: AbstractControl): ValidationErrors | null {\n    return /\\s/.test(control.value) ? { whitespace: 'Cannot contain whitespace' } : null;\n  }\n\n  static buildForm(item: Partial<KeyValueRuleItemFormValues>): FormGroup {\n    // Note: this forms only needs the structure to propagate values, no functionality required\n    const fb = new FormBuilder();\n    return fb.group({ key: item.key ?? null, value: item.value ?? null, type: item.type ?? null });\n  }\n\n  /*\n   * Boilerplate Code Below Here\n   */\n\n  validate(_: FormControl): ValidationErrors | null {\n    return this.form.valid ? null : { key_value_rule_item: true };\n  }\n\n  private readonly subscriptions: Subscription[] = [];\n\n  ngOnDestroy(): void {\n    this.subscriptions.forEach((s) => s.unsubscribe());\n  }\n\n  readonly onChange: Array<(value: KeyValueRuleItemFormValues) => void> = [];\n  readonly onTouched: Array<() => void> = [];\n\n  registerOnChange(fn: (value: KeyValueRuleItemFormValues) => void): void {\n    this.onChange.push(fn);\n  }\n\n  registerOnTouched(fn: () => void): void {\n    this.onTouched.push(fn);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".row {\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  align-items: center;\n  padding-left: 0.5rem;\n  padding-right: 0.5rem;\n}\n\n.row > * {\n  margin-right: 1rem;\n}\n\n.row > *:last-child {\n  margin-right: 0;\n}\n\n.flex-grow {\n  flex-grow: 1;\n}\n\n.flex-grow-2 {\n  flex-grow: 2;\n}\n\n.hide {\n  display: none;\n}\n\n.mat-error {\n  margin-left: 0.5rem;\n}\n\n.item-title {\n  margin-bottom: 0.5rem;\n}\n",
                    "styleUrl": "./key-value-rule-item-form.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 83,
                "jsdoctags": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "ControlValueAccessor",
                "Validator",
                "OnInit",
                "OnChanges",
                "OnDestroy"
            ],
            "accessors": {
                "key": {
                    "name": "key",
                    "getSignature": {
                        "name": "key",
                        "type": "",
                        "returnType": "FormControl",
                        "line": 53
                    }
                },
                "value": {
                    "name": "value",
                    "getSignature": {
                        "name": "value",
                        "type": "",
                        "returnType": "FormControl",
                        "line": 57
                    }
                },
                "type": {
                    "name": "type",
                    "getSignature": {
                        "name": "type",
                        "type": "",
                        "returnType": "FormControl",
                        "line": 61
                    }
                }
            },
            "templateData": "<mat-card [formGroup]=\"form\">\n  <div class=\"mat-h3 policy-title\" *ngIf=\"title\">{{ title }}</div>\n\n  <div class=\"row\">\n    <mat-form-field class=\"flex-grow\">\n      <input formControlName=\"key\" matInput [maxlength]=\"keyMaxLength\" placeholder=\"Key\" />\n      <mat-hint>{{ key.value?.length || 0 }}/{{ keyMaxLength }}</mat-hint>\n    </mat-form-field>\n\n    <mat-form-field class=\"flex-grow-2\">\n      <input formControlName=\"value\" matInput [maxlength]=\"valueMaxLength\" placeholder=\"Value\" />\n      <mat-hint>{{ value.value?.length || 0 }}/{{ valueMaxLength }}</mat-hint>\n    </mat-form-field>\n\n    <mat-form-field>\n      <mat-label>Value Rule</mat-label>\n      <mat-select formControlName=\"type\">\n        <mat-option *ngFor=\"let ruleType of ruleTypes\" [value]=\"ruleType.value\">\n          {{ ruleType.label }}\n        </mat-option>\n      </mat-select>\n    </mat-form-field>\n\n    <button\n      mat-mini-fab\n      *ngIf=\"mode === 'add'\"\n      color=\"primary\"\n      [disabled]=\"!form.valid || !form.touched\"\n      (click)=\"addItem()\"\n    >\n      <mat-icon>add</mat-icon>\n    </button>\n    <button mat-icon-button *ngIf=\"mode === 'edit'\" color=\"warn\" (click)=\"removeItem()\">\n      <mat-icon>delete_forever</mat-icon>\n    </button>\n  </div>\n  <ng-container *ngIf=\"key.invalid && key.errors && (key.dirty || key.touched)\">\n    <mat-error *ngIf=\"key.errors.required\">The Key is required</mat-error>\n    <mat-error *ngFor=\"let error of key.errors | getStringErrors\">{{ error }}</mat-error>\n  </ng-container>\n  <ng-container *ngIf=\"value.invalid && value.errors && (value.dirty || value.touched)\">\n    <mat-error *ngIf=\"value.errors.required\">The Value is required</mat-error>\n    <mat-error *ngFor=\"let error of value.errors | getStringErrors\">{{ error }}</mat-error>\n  </ng-container>\n  <ng-container *ngIf=\"type.invalid && type.errors && (type.dirty || type.touched)\">\n    <mat-error *ngIf=\"type.errors.required\">The Value Rule is required</mat-error>\n    <mat-error *ngFor=\"let error of type.errors | getStringErrors\">{{ error }}</mat-error>\n  </ng-container>\n  <ng-container *ngIf=\"form.invalid && form.errors && (form.dirty || form.touched)\">\n    <mat-error *ngFor=\"let error of form.errors | getStringErrors\">{{ error }}</mat-error>\n  </ng-container>\n  <mat-error *ngFor=\"let error of errors\">{{ error }}</mat-error>\n</mat-card>\n"
        },
        {
            "name": "MetadataFormComponent",
            "id": "component-MetadataFormComponent-187df9c789ef076d264fb7e0006738fad83c1a6b41b5143d2048fc4f532e86e02db88c047f6f738d189355f395b7691093688349a374498bdb403551952c799c",
            "file": "src/app/components/scenario-editor/metadata-form/metadata-form.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => MetadataFormComponent), multi: true,\n}",
                    "type": "component"
                },
                {
                    "name": "{\n    provide: NG_VALIDATORS, useExisting: forwardRef(() => MetadataFormComponent), multi: true,\n}",
                    "type": "component"
                }
            ],
            "selector": "app-metadata-form",
            "styleUrls": [
                "./metadata-form.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./metadata-form.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "description_maxlength",
                    "defaultValue": "500",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 42,
                    "type": "500",
                    "decorators": []
                },
                {
                    "name": "title_maxlength",
                    "defaultValue": "50",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 41,
                    "type": "50",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "form",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "onChange",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<void>",
                    "optional": false,
                    "description": "",
                    "line": 109,
                    "modifierKind": [
                        144
                    ]
                },
                {
                    "name": "onTouched",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<void>",
                    "optional": false,
                    "description": "",
                    "line": 110,
                    "modifierKind": [
                        144
                    ]
                },
                {
                    "name": "subscriptions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription[]",
                    "optional": false,
                    "description": "",
                    "line": 103,
                    "modifierKind": [
                        121,
                        144
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 105,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "notOnlyWhiteSpaceValidator",
                    "args": [
                        {
                            "name": "control",
                            "type": "AbstractControl",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ValidationErrors | null",
                    "typeParameters": [],
                    "line": 88,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "control",
                            "type": "AbstractControl",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "value",
                                    "type": "MetadataFormValues",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 112,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "value",
                                    "type": "MetadataFormValues",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": []
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 116,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 76,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "validate",
                    "args": [
                        {
                            "name": "_",
                            "type": "FormControl",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ValidationErrors | null",
                    "typeParameters": [],
                    "line": 99,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "_",
                            "type": "FormControl",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "Partial<MetadataFormValues> | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 80,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "Partial<MetadataFormValues> | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnDestroy, OnInit, forwardRef } from '@angular/core';\nimport {\n  AbstractControl,\n  ControlValueAccessor,\n  FormBuilder,\n  FormControl,\n  FormGroup,\n  NG_VALIDATORS,\n  NG_VALUE_ACCESSOR,\n  ValidationErrors,\n  Validator,\n  Validators,\n} from '@angular/forms';\nimport { Subscription } from 'rxjs';\n\nexport interface MetadataFormValues {\n  title: string;\n  description: string;\n}\n\n@Component({\n  selector: 'app-metadata-form',\n  templateUrl: './metadata-form.component.html',\n  styleUrls: ['./metadata-form.component.scss'],\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => MetadataFormComponent),\n      multi: true,\n    },\n    {\n      provide: NG_VALIDATORS,\n      useExisting: forwardRef(() => MetadataFormComponent),\n      multi: true,\n    },\n  ],\n})\nexport class MetadataFormComponent implements ControlValueAccessor, Validator, OnInit, OnDestroy {\n  form: FormGroup;\n\n  @Input() readonly title_maxlength = 50;\n  @Input() readonly description_maxlength = 500;\n\n  get title(): FormControl {\n    // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n    return this.form.get('title') as FormControl;\n  }\n  get description(): FormControl {\n    // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n    return this.form.get('description') as FormControl;\n  }\n\n  constructor(private formBuilder: FormBuilder) {}\n\n  ngOnInit(): void {\n    this.form = this.formBuilder.group({\n      title: [\n        null,\n        [\n          Validators.required,\n          Validators.maxLength(this.title_maxlength),\n          MetadataFormComponent.notOnlyWhiteSpaceValidator,\n        ],\n      ],\n      description: [null, [Validators.maxLength(this.description_maxlength)]],\n    });\n\n    this.subscriptions.push(\n      this.form.valueChanges.subscribe((value: MetadataFormValues | null) => {\n        this.onChange.forEach((fn) => fn(value));\n        this.onTouched.forEach((fn) => fn());\n      })\n    );\n  }\n\n  setDisabledState(isDisabled: boolean): void {\n    isDisabled ? this.form.disable() : this.form.enable();\n  }\n\n  writeValue(value?: Partial<MetadataFormValues> | null): void {\n    if (value === null || value === undefined) {\n      this.form.reset({ value: null }, { emitEvent: false });\n    } else {\n      this.form.patchValue(value, { emitEvent: false });\n    }\n  }\n\n  static notOnlyWhiteSpaceValidator(control: AbstractControl): ValidationErrors | null {\n    if (/^\\s+$/.test(control.value)) {\n      return { whitespace: 'Must contain at least one character that is not a space.' };\n    }\n    return null;\n  }\n\n  /*\n   * Boilerplate Code Below Here\n   */\n\n  validate(_: FormControl): ValidationErrors | null {\n    return this.form.valid ? null : { metadata: true };\n  }\n\n  private readonly subscriptions: Subscription[] = [];\n\n  ngOnDestroy(): void {\n    this.subscriptions.forEach((s) => s.unsubscribe());\n  }\n\n  readonly onChange: Array<(value: MetadataFormValues) => void> = [];\n  readonly onTouched: Array<() => void> = [];\n\n  registerOnChange(fn: (value: MetadataFormValues) => void): void {\n    this.onChange.push(fn);\n  }\n\n  registerOnTouched(fn: () => void): void {\n    this.onTouched.push(fn);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".full-width {\n  width: 100%;\n}\n\n.top-margin {\n  margin-top: 1rem;\n}\n",
                    "styleUrl": "./metadata-form.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 51,
                "jsdoctags": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "ControlValueAccessor",
                "Validator",
                "OnInit",
                "OnDestroy"
            ],
            "accessors": {
                "title": {
                    "name": "title",
                    "getSignature": {
                        "name": "title",
                        "type": "",
                        "returnType": "FormControl",
                        "line": 44
                    }
                },
                "description": {
                    "name": "description",
                    "getSignature": {
                        "name": "description",
                        "type": "",
                        "returnType": "FormControl",
                        "line": 48
                    }
                }
            },
            "templateData": "<mat-card [formGroup]=\"form\">\n  <mat-form-field class=\"full-width\">\n    <input formControlName=\"title\" matInput [maxlength]=\"title_maxlength\" placeholder=\"Scenario Name\" />\n    <mat-hint>{{ title.value?.length ?? 0 }}/{{ title_maxlength }}</mat-hint>\n  </mat-form-field>\n  <ng-container *ngIf=\"title.invalid && title.errors && (title.dirty || title.touched)\">\n    <mat-error *ngIf=\"title.errors.required\">The scenario name is required.</mat-error>\n    <mat-error *ngIf=\"title.errors.maxlength\"> Cannot be more than {{ title_maxlength }} characters long. </mat-error>\n    <mat-error *ngFor=\"let error of title.errors | getStringErrors\">{{ error }}</mat-error>\n  </ng-container>\n\n  <mat-form-field class=\"full-width top-margin\">\n    <input formControlName=\"description\" matInput [maxlength]=\"description_maxlength\" placeholder=\"Description\" />\n    <mat-hint>{{ description.value?.length ?? 0 }}/{{ description_maxlength }}</mat-hint>\n  </mat-form-field>\n  <ng-container *ngIf=\"description.invalid && description.errors && (description.dirty || description.touched)\">\n    <mat-error *ngIf=\"description.errors.maxlength\">\n      Cannot be more than {{ description_maxlength }} characters long.\n    </mat-error>\n  </ng-container>\n</mat-card>\n"
        },
        {
            "name": "OverviewHeaderComponent",
            "id": "component-OverviewHeaderComponent-7f920a511dc7b57d7eee5dd20495037b50c28294a636c4c7783f2c47dd94003a2ff8c1d68a39d860e796c93c6e8aa992a1b4a145e868080c5cfe8d32d00622d2",
            "file": "src/app/shared/components/overview-header/overview-header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-overview-header",
            "styleUrls": [
                "./overview-header.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./overview-header.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "header",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "TemplateRef<>",
                    "decorators": []
                },
                {
                    "name": "metadata",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "Metadata",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, TemplateRef } from '@angular/core';\nimport { Metadata } from '../../../models/mock-definition/metadata.model';\n\n@Component({\n  selector: 'app-overview-header',\n  templateUrl: './overview-header.component.html',\n  styleUrls: ['./overview-header.component.scss'],\n})\nexport class OverviewHeaderComponent {\n  @Input() metadata: Metadata;\n  @Input() header: TemplateRef<unknown>;\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".example-card {\n  border-radius: 0;\n  padding: 0 !important;\n  box-shadow: none;\n  display: flex;\n  flex-direction: column;\n}\n\n.header-title {\n  background-color: grayscale($color: #616161);\n}\n\n.title-container {\n  display: inline-flex;\n  padding-left: 2%;\n}\n\n.card-title {\n  color: white;\n  font-family: Roboto;\n  font-size: 1.4em;\n  font-style: normal;\n  font-weight: 500;\n  letter-spacing: 0.0357143em;\n}\n\n.mock-description {\n  text-align: center;\n  flex-direction: column;\n  word-wrap: break-word;\n}\n\n.mock-description h3 {\n  font-family: Roboto;\n  font-style: normal;\n  font-weight: 500;\n  font-size: 1.4em;\n  color: rgba(0, 0, 0, 0.87);\n  overflow-y: auto;\n  word-wrap: break-word;\n}\n\n.mock-description p {\n  font-family: Roboto;\n  font-style: normal;\n  font-weight: 1.6em;\n  font-size: 1.2em;\n  overflow-y: auto;\n  color: rgba(0, 0, 0, 0.541327);\n  word-wrap: break-word;\n  text-align: justify;\n  padding-right: 7%;\n  padding-left: 7%;\n  padding-bottom: 2.5%;\n  letter-spacing: 0.05em;\n  line-height: 1.6em;\n}\n",
                    "styleUrl": "./overview-header.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<mat-card class=\"example-card\">\n  <div class=\"header-title\">\n    <div class=\"title-container\">\n      <h1 class=\"card-title\">Overview</h1>\n    </div>\n  </div>\n  <mat-card-content class=\"mock-description\">\n    <ng-container *ngTemplateOutlet=\"header\"> </ng-container>\n  </mat-card-content>\n</mat-card>\n"
        },
        {
            "name": "PoliciesFormComponent",
            "id": "component-PoliciesFormComponent-c8aa872244aecd54dd64b65ff166d69947b5bacd461ed3ec4b94b5eb183946116fe126b19df1926fbd4a203f53f39fb2d0ae0a43cdfc675073f2fe7ec9c735b9",
            "file": "src/app/components/scenario-editor/policies-form/policies-form.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => PoliciesFormComponent), multi: true,\n}",
                    "type": "component"
                },
                {
                    "name": "{\n    provide: NG_VALIDATORS, useExisting: forwardRef(() => PoliciesFormComponent), multi: true,\n}",
                    "type": "component"
                }
            ],
            "selector": "app-policies-form",
            "styleUrls": [
                "./policies-form.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./policies-form.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "form",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "onChange",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<void>",
                    "optional": false,
                    "description": "",
                    "line": 209,
                    "modifierKind": [
                        144
                    ]
                },
                {
                    "name": "onTouched",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<void>",
                    "optional": false,
                    "description": "",
                    "line": 210,
                    "modifierKind": [
                        144
                    ]
                },
                {
                    "name": "policyIsDuplicatedEvent",
                    "defaultValue": "new EventEmitter<boolean>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 51
                },
                {
                    "name": "subscriptions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription[]",
                    "optional": false,
                    "description": "",
                    "line": 203,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "addPolicyHandler",
                    "args": [
                        {
                            "name": "policy",
                            "type": "PolicyFormValues",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 104,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThis method listens to the event emitter from the child component and adds the policy into the list\n",
                    "description": "<p>This method listens to the event emitter from the child component and adds the policy into the list</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 3168,
                                "end": 3174,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "policy"
                            },
                            "type": "PolicyFormValues",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 3162,
                                "end": 3167,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>The policy being taken in from the child component to be added</p>\n"
                        }
                    ]
                },
                {
                    "name": "cleanupSubscriptions",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 81,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 205,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "policyIsDuplicated",
                    "args": [
                        {
                            "name": "policy",
                            "type": "PolicyFormValues | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 135,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nTests whether the given policy already exists\n",
                    "description": "<p>Tests whether the given policy already exists</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 4274,
                                "end": 4280,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "policy"
                            },
                            "type": "PolicyFormValues | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 4268,
                                "end": 4273,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>the policy to test</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 4306,
                                "end": 4313,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "returns"
                            },
                            "comment": "<p>true if the policy is duplicated, false otherwise</p>\n"
                        }
                    ]
                },
                {
                    "name": "policyIsDuplicated",
                    "args": [
                        {
                            "name": "policies",
                            "type": "PoliciesFormValues",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "policy",
                            "type": "PolicyFormValues | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 146,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nTests whether the given policy already exists in the provided list\n",
                    "description": "<p>Tests whether the given policy already exists in the provided list</p>\n",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 4650,
                                "end": 4658,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "policies"
                            },
                            "type": "PoliciesFormValues",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 4644,
                                "end": 4649,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>the list of policies to test against</p>\n"
                        },
                        {
                            "name": {
                                "pos": 4708,
                                "end": 4714,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "policy"
                            },
                            "type": "PolicyFormValues | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 4702,
                                "end": 4707,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>the policy to test (should be a reference from the provided list to avoid self-duplicate detection)</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 4821,
                                "end": 4828,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "returns"
                            },
                            "comment": "<p>true if the policy is duplicated, false otherwise</p>\n"
                        }
                    ]
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "value",
                                    "type": "PoliciesFormValues",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 212,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "value",
                                    "type": "PoliciesFormValues",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": []
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 216,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removePolicyHandler",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 120,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHandle policy removal actions triggered by a child form button\n",
                    "description": "<p>Handle policy removal actions triggered by a child form button</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 3719,
                                "end": 3724,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "index"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 3713,
                                "end": 3718,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>the index of the policy to remove</p>\n"
                        }
                    ]
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 89,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "subscribeToAddValueChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 72,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "validate",
                    "args": [
                        {
                            "name": "_",
                            "type": "FormControl",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ValidationErrors | null",
                    "typeParameters": [],
                    "line": 85,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "_",
                            "type": "FormControl",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "validateNoDuplicates",
                    "args": [
                        {
                            "name": "formArray",
                            "type": "FormArray",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ValidationErrors | null",
                    "typeParameters": [],
                    "line": 173,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nA reactive forms validator function that validates a FormArray containing policy controls\n",
                    "description": "<p>A reactive forms validator function that validates a FormArray containing policy controls</p>\n",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 5552,
                                "end": 5561,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "formArray"
                            },
                            "type": "FormArray",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 5546,
                                "end": 5551,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>the FormArray object to validate</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 5601,
                                "end": 5608,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "returns"
                            },
                            "comment": "<p>a ValidationErrors object containing any errors, or null if there are no errors</p>\n"
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "PartialPoliciesFormValues | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 93,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "PartialPoliciesFormValues | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectorRef, Component, EventEmitter, OnDestroy, OnInit, forwardRef } from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport {\n  AbstractControl,\n  ControlValueAccessor,\n  FormArray,\n  FormBuilder,\n  FormControl,\n  FormGroup,\n  NG_VALIDATORS,\n  NG_VALUE_ACCESSOR,\n  ValidationErrors,\n  Validator,\n} from '@angular/forms';\nimport { PolicyFormComponent, PolicyFormValues } from './policy-form/policy-form.component';\nimport { PolicyType } from 'src/app/models/mock-definition/scenario/policy-type';\n\nexport type PoliciesFormValues = PolicyFormValues[];\ntype PartialPoliciesFormValues = Partial<PolicyFormValues>[];\n\n@Component({\n  selector: 'app-policies-form',\n  templateUrl: './policies-form.component.html',\n  styleUrls: ['./policies-form.component.scss'],\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => PoliciesFormComponent),\n      multi: true,\n    },\n    {\n      provide: NG_VALIDATORS,\n      useExisting: forwardRef(() => PoliciesFormComponent),\n      multi: true,\n    },\n  ],\n})\nexport class PoliciesFormComponent implements ControlValueAccessor, Validator, OnInit, OnDestroy {\n  form: FormGroup;\n\n  get formArray(): FormArray {\n    // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n    return this.form.get('formArray') as FormArray;\n  }\n\n  get add(): FormControl {\n    // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n    return this.form.get('add') as FormControl;\n  }\n\n  policyIsDuplicatedEvent = new EventEmitter<boolean>();\n\n  constructor(private formBuilder: FormBuilder, private cdRef: ChangeDetectorRef) {}\n\n  ngOnInit(): void {\n    this.form = this.formBuilder.group({\n      add: null,\n      formArray: this.formBuilder.array([], PoliciesFormComponent.validateNoDuplicates),\n    });\n\n    this.subscriptions.push(\n      this.formArray.valueChanges.subscribe((value: PoliciesFormValues | null) => {\n        this.policyIsDuplicatedEvent.emit(this.policyIsDuplicated(this.add.value));\n        this.onChange.forEach((fn) => fn(value));\n        this.onTouched.forEach((fn) => fn());\n      })\n    );\n\n    this.subscribeToAddValueChanges();\n  }\n\n  subscribeToAddValueChanges() {\n    this.subscriptions.push(\n      this.add.valueChanges.subscribe((value) => {\n        this.policyIsDuplicatedEvent.emit(this.policyIsDuplicated(value));\n      })\n    );\n    this.cleanupSubscriptions();\n  }\n\n  cleanupSubscriptions() {\n    this.subscriptions = this.subscriptions.filter((s) => !s.closed);\n  }\n\n  validate(_: FormControl): ValidationErrors | null {\n    return this.formArray.valid ? null : { policies: true };\n  }\n\n  setDisabledState(isDisabled: boolean): void {\n    isDisabled ? this.formArray.disable() : this.formArray.enable();\n  }\n\n  writeValue(value?: PartialPoliciesFormValues | null): void {\n    this.formArray.clear({ emitEvent: false });\n    if (value !== null && value !== undefined) {\n      value.forEach((policy) => this.formArray.push(PolicyFormComponent.buildForm(policy), { emitEvent: false }));\n    }\n  }\n\n  /**\n   * This method listens to the event emitter from the child component and adds the policy into the list\n   * @param policy The policy being taken in from the child component to be added\n   */\n  addPolicyHandler(policy: PolicyFormValues) {\n    if (this.policyIsDuplicated(policy)) {\n      this.policyIsDuplicatedEvent.emit(true);\n    } else {\n      const policyForm = PolicyFormComponent.buildForm(policy);\n      this.formArray.push(policyForm);\n      this.add.reset(null, { emitEvent: false });\n      this.subscribeToAddValueChanges();\n      this.cdRef.detectChanges();\n    }\n  }\n\n  /**\n   * Handle policy removal actions triggered by a child form button\n   * @param index the index of the policy to remove\n   */\n  removePolicyHandler(index: number) {\n    if (!this.formArray.length || index < 0 || index >= this.formArray.length) {\n      throw new Error(`Unable to remove policy, index (${index}) out of bounds.`);\n    }\n    this.formArray.removeAt(index);\n    this.formArray.controls.forEach((c) => c.updateValueAndValidity());\n    this.policyIsDuplicatedEvent.emit(this.policyIsDuplicated(this.add.value ?? {}));\n    this.cdRef.detectChanges();\n  }\n\n  /**\n   * Tests whether the given policy already exists\n   * @param policy the policy to test\n   * @returns true if the policy is duplicated, false otherwise\n   */\n  policyIsDuplicated(policy: PolicyFormValues | null): boolean {\n    const policies = this.formArray.value ?? [];\n    return PoliciesFormComponent.policyIsDuplicated(policies, policy);\n  }\n\n  /**\n   * Tests whether the given policy already exists in the provided list\n   * @param policies the list of policies to test against\n   * @param policy the policy to test (should be a reference from the provided list to avoid self-duplicate detection)\n   * @returns true if the policy is duplicated, false otherwise\n   */\n  static policyIsDuplicated(policies: PoliciesFormValues, policy: PolicyFormValues | null): boolean {\n    if (policy) {\n      for (const otherPolicy of policies) {\n        if (policy === otherPolicy) {\n          continue;\n        }\n        switch (policy.type) {\n          case PolicyType.DELAY_RESPONSE:\n            if (otherPolicy.type === PolicyType.DELAY_RESPONSE) {\n              return true;\n            }\n            break;\n          default: {\n            const _: never = policy.type;\n          }\n        }\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * A reactive forms validator function that validates a FormArray containing policy controls\n   * @param formArray the FormArray object to validate\n   * @returns a ValidationErrors object containing any errors, or null if there are no errors\n   */\n  static validateNoDuplicates(formArray: FormArray): ValidationErrors | null {\n    const policies: PoliciesFormValues = formArray.value ?? [];\n    const controls: AbstractControl[] = formArray.controls;\n    let error: ValidationErrors | null = null;\n\n    for (let i = 0; i < controls.length; i++) {\n      const control = controls[i];\n      const policyIsDuplicated = PoliciesFormComponent.policyIsDuplicated(policies, policies[i]);\n\n      if (policyIsDuplicated !== control.hasError('duplicate')) {\n        if (policyIsDuplicated) {\n          error = { duplicate: 'A duplicate policy (type or value) exists. Duplicates are not allowed.' };\n          control.setErrors({\n            ...(control.errors ?? {}),\n            ...error,\n          });\n        } else {\n          const { duplicate: _, ...errors } = control.errors;\n          control.setErrors(Object.keys(errors).length ? errors : null);\n        }\n      }\n    }\n\n    return error;\n  }\n\n  /*\n   * Boilerplate Code Below Here\n   */\n\n  private subscriptions: Subscription[] = [];\n\n  ngOnDestroy(): void {\n    this.subscriptions.forEach((s) => s.unsubscribe());\n  }\n\n  readonly onChange: Array<(value: PoliciesFormValues) => void> = [];\n  readonly onTouched: Array<() => void> = [];\n\n  registerOnChange(fn: (value: PoliciesFormValues) => void): void {\n    this.onChange.push(fn);\n  }\n\n  registerOnTouched(fn: () => void): void {\n    this.onTouched.push(fn);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".policy-form {\n  margin-top: 0.5rem;\n}\n\n.mat-divider {\n  margin: 1.25rem;\n}\n",
                    "styleUrl": "./policies-form.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cdRef",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 51,
                "jsdoctags": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cdRef",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "ControlValueAccessor",
                "Validator",
                "OnInit",
                "OnDestroy"
            ],
            "accessors": {
                "formArray": {
                    "name": "formArray",
                    "getSignature": {
                        "name": "formArray",
                        "type": "",
                        "returnType": "FormArray",
                        "line": 41
                    }
                },
                "add": {
                    "name": "add",
                    "getSignature": {
                        "name": "add",
                        "type": "",
                        "returnType": "FormControl",
                        "line": 46
                    }
                }
            },
            "templateData": "<ng-container [formGroup]=\"form\">\n  <app-policy-form\n    formControlName=\"add\"\n    title=\"Add Policy\"\n    mode=\"add\"\n    (addPolicyEvent)=\"addPolicyHandler($event)\"\n    [policyIsDuplicatedEvent]=\"policyIsDuplicatedEvent\"\n  ></app-policy-form>\n\n  <mat-divider></mat-divider>\n\n  <div class=\"text-muted\" *ngIf=\"!formArray.controls.length\">No policies added</div>\n\n  <div class=\"policy-form\" formArrayName=\"formArray\" *ngFor=\"let ctrl of formArray.controls; let i = index\">\n    <app-policy-form\n      [formControlName]=\"i\"\n      (removePolicyEvent)=\"removePolicyHandler(i)\"\n      [errors]=\"ctrl.errors | getStringErrors\"\n    ></app-policy-form>\n  </div>\n</ng-container>\n"
        },
        {
            "name": "PolicyFormComponent",
            "id": "component-PolicyFormComponent-a0b19d5683c3ab1733ad8b0c297f9b88d7a84783c637591a9097a0d994e9980371b36b440bfef3354fa2e5db417a3b6daeed36923c67f7e3e130cfea85dff075",
            "file": "src/app/components/scenario-editor/policies-form/policy-form/policy-form.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => PolicyFormComponent), multi: true,\n}",
                    "type": "component"
                },
                {
                    "name": "{\n    provide: NG_VALIDATORS, useExisting: forwardRef(() => PolicyFormComponent), multi: true,\n}",
                    "type": "component"
                }
            ],
            "selector": "app-policy-form",
            "styleUrls": [
                "./policy-form.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./policy-form.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "errors",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 55,
                    "type": "string[]",
                    "decorators": []
                },
                {
                    "name": "mode",
                    "defaultValue": "'edit'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 56,
                    "type": "\"add\" | \"edit\"",
                    "decorators": []
                },
                {
                    "name": "policyIsDuplicatedEvent",
                    "defaultValue": "new EventEmitter<boolean>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 57,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "title",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 54,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "addPolicyEvent",
                    "defaultValue": "new EventEmitter<PolicyFormValues>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 48,
                    "type": "EventEmitter"
                },
                {
                    "name": "removePolicyEvent",
                    "defaultValue": "new EventEmitter<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 49,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "form",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 37,
                    "modifierKind": [
                        144
                    ]
                },
                {
                    "name": "onChange",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<void>",
                    "optional": false,
                    "description": "",
                    "line": 141,
                    "modifierKind": [
                        144
                    ]
                },
                {
                    "name": "onTouched",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<void>",
                    "optional": false,
                    "description": "",
                    "line": 142,
                    "modifierKind": [
                        144
                    ]
                },
                {
                    "name": "PolicyType",
                    "defaultValue": "PolicyType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 52
                },
                {
                    "name": "policyTypes",
                    "defaultValue": "[{ value: PolicyType.DELAY_RESPONSE, label: 'Delay Response' }]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 51,
                    "modifierKind": [
                        144
                    ]
                },
                {
                    "name": "subscriptions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription[]",
                    "optional": false,
                    "description": "",
                    "line": 135,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "addPolicy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 91,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "buildForm",
                    "args": [
                        {
                            "name": "policy",
                            "type": "Partial<PolicyFormValues>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "FormGroup",
                    "typeParameters": [],
                    "line": 113,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "policy",
                            "type": "Partial<PolicyFormValues>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 137,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 73,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "value",
                                    "type": "PolicyFormValues",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 144,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "value",
                                    "type": "PolicyFormValues",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": []
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 148,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removePolicy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 97,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 101,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "validate",
                    "args": [
                        {
                            "name": "_",
                            "type": "FormControl",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ValidationErrors | null",
                    "typeParameters": [],
                    "line": 131,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "_",
                            "type": "FormControl",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "Partial<PolicyFormValues> | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 105,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "Partial<PolicyFormValues> | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, OnDestroy, OnInit, Output, forwardRef } from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { PolicyType } from 'src/app/models/mock-definition/scenario/policy-type';\nimport {\n  ControlValueAccessor,\n  FormBuilder,\n  FormControl,\n  FormGroup,\n  NG_VALIDATORS,\n  NG_VALUE_ACCESSOR,\n  ValidationErrors,\n  Validator,\n  Validators,\n} from '@angular/forms';\nimport { DelayResponsePolicy } from 'src/app/models/mock-definition/scenario/policy.model';\n\nexport type PolicyFormValues = DelayResponsePolicy;\n\n@Component({\n  selector: 'app-policy-form',\n  templateUrl: './policy-form.component.html',\n  styleUrls: ['./policy-form.component.scss'],\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => PolicyFormComponent),\n      multi: true,\n    },\n    {\n      provide: NG_VALIDATORS,\n      useExisting: forwardRef(() => PolicyFormComponent),\n      multi: true,\n    },\n  ],\n})\nexport class PolicyFormComponent implements ControlValueAccessor, Validator, OnInit, OnDestroy {\n  readonly form: FormGroup;\n\n  get type(): FormControl {\n    // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n    return this.form.get('type') as FormControl;\n  }\n  get value(): FormControl {\n    // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n    return this.form.get('value') as FormControl;\n  }\n\n  @Output() addPolicyEvent = new EventEmitter<PolicyFormValues>();\n  @Output() removePolicyEvent = new EventEmitter<void>();\n\n  readonly policyTypes = [{ value: PolicyType.DELAY_RESPONSE, label: 'Delay Response' }];\n  PolicyType = PolicyType;\n\n  @Input() title = '';\n  @Input() errors: string[] = [];\n  @Input() mode: 'add' | 'edit' = 'edit';\n  @Input() policyIsDuplicatedEvent = new EventEmitter<boolean>();\n\n  constructor(private formBuilder: FormBuilder) {\n    this.form = this.formBuilder.group({\n      type: [null, Validators.required],\n      value: [null, [Validators.required, Validators.min(1), Validators.pattern('^[0-9]+$')]],\n    });\n\n    this.subscriptions.push(\n      this.form.valueChanges.subscribe((value: PolicyFormValues | null) => {\n        this.onChange.forEach((fn) => fn(value));\n        this.onTouched.forEach((fn) => fn());\n      })\n    );\n  }\n\n  ngOnInit(): void {\n    this.subscriptions.push(\n      this.policyIsDuplicatedEvent.subscribe((isDuplicated) => {\n        if (isDuplicated !== this.form.hasError('duplicate')) {\n          if (isDuplicated) {\n            this.form.setErrors({\n              ...(this.form.errors ?? {}),\n              duplicate: 'This policy (type or value) already exists. Duplicates are not allowed.',\n            });\n          } else {\n            const { duplicate: _, ...errors } = this.form.errors;\n            this.form.setErrors(Object.keys(errors).length ? errors : null);\n          }\n        }\n      })\n    );\n  }\n\n  addPolicy() {\n    if (this.form.valid) {\n      this.addPolicyEvent.emit(this.form.value);\n    }\n  }\n\n  removePolicy() {\n    this.removePolicyEvent.emit();\n  }\n\n  setDisabledState(isDisabled: boolean): void {\n    isDisabled ? this.form.disable() : this.form.enable();\n  }\n\n  writeValue(value?: Partial<PolicyFormValues> | null): void {\n    if (value === null || value === undefined) {\n      this.form.reset({ value: null }, { emitEvent: false });\n    } else {\n      this.form.patchValue(value, { emitEvent: false });\n    }\n  }\n\n  static buildForm(policy: Partial<PolicyFormValues>): FormGroup {\n    // Note: these forms only need the structure to propagate values, no functionality required\n    const fb = new FormBuilder();\n    switch (policy.type) {\n      case PolicyType.DELAY_RESPONSE:\n        return fb.group({ type: policy.type ?? null, value: policy.value ?? null });\n      default: {\n        // Cause a type-check error if a case is missed\n        const _: never = policy.type;\n        throw new Error('Invalid Policy Type');\n      }\n    }\n  }\n\n  /*\n   * Boilerplate Code Below Here\n   */\n\n  validate(_: FormControl): ValidationErrors | null {\n    return this.form.valid ? null : { policy: true };\n  }\n\n  private subscriptions: Subscription[] = [];\n\n  ngOnDestroy(): void {\n    this.subscriptions.forEach((s) => s.unsubscribe());\n  }\n\n  readonly onChange: Array<(value: PolicyFormValues) => void> = [];\n  readonly onTouched: Array<() => void> = [];\n\n  registerOnChange(fn: (value: PolicyFormValues) => void): void {\n    this.onChange.push(fn);\n  }\n\n  registerOnTouched(fn: () => void): void {\n    this.onTouched.push(fn);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".row {\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  align-items: center;\n  padding-left: 0.5rem;\n  padding-right: 0.5rem;\n}\n\n.row > * {\n  margin-right: 1rem;\n}\n\n.row > *:last-child {\n  margin-right: 0;\n}\n\n.flex-grow {\n  flex-grow: 1;\n}\n\n.hide {\n  display: none;\n}\n\n.mat-error {\n  margin-left: 0.5rem;\n}\n\n.policy-title {\n  margin-bottom: 0.5rem;\n}\n",
                    "styleUrl": "./policy-form.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 57,
                "jsdoctags": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "ControlValueAccessor",
                "Validator",
                "OnInit",
                "OnDestroy"
            ],
            "accessors": {
                "type": {
                    "name": "type",
                    "getSignature": {
                        "name": "type",
                        "type": "",
                        "returnType": "FormControl",
                        "line": 39
                    }
                },
                "value": {
                    "name": "value",
                    "getSignature": {
                        "name": "value",
                        "type": "",
                        "returnType": "FormControl",
                        "line": 43
                    }
                }
            },
            "templateData": "<mat-card [formGroup]=\"form\">\n  <div class=\"mat-h3 policy-title\" *ngIf=\"title\">{{ title }}</div>\n\n  <div class=\"row\">\n    <mat-form-field>\n      <mat-label>Policy Type</mat-label>\n      <mat-select formControlName=\"type\">\n        <mat-option *ngFor=\"let p of policyTypes\" [value]=\"p.value\">\n          {{ p.label }}\n        </mat-option>\n      </mat-select>\n    </mat-form-field>\n\n    <mat-form-field [ngClass]=\"[type.value !== PolicyType.DELAY_RESPONSE ? 'hide' : '', 'flex-grow']\">\n      <input formControlName=\"value\" matInput type=\"number\" min=\"1\" step=\"1\" placeholder=\"Delay\" />\n      <mat-hint>Milliseconds</mat-hint>\n    </mat-form-field>\n\n    <button\n      mat-mini-fab\n      *ngIf=\"mode === 'add'\"\n      color=\"primary\"\n      [disabled]=\"!form.valid || !form.touched\"\n      (click)=\"addPolicy()\"\n    >\n      <mat-icon>add</mat-icon>\n    </button>\n    <button mat-icon-button *ngIf=\"mode === 'edit'\" color=\"warn\" (click)=\"removePolicy()\">\n      <mat-icon>delete_forever</mat-icon>\n    </button>\n  </div>\n  <ng-container *ngIf=\"value.invalid && value.errors && (value.dirty || value.touched)\">\n    <mat-error *ngIf=\"value.errors.required\">The delay amount is required</mat-error>\n    <mat-error *ngIf=\"value.errors.pattern || value.errors.min\">The delay must be a positive integer</mat-error>\n    <mat-error *ngIf=\"value.errors.duplicate\">Policy already exists</mat-error>\n    <mat-error *ngFor=\"let error of value.errors | getStringErrors\">{{ error }}</mat-error>\n  </ng-container>\n  <ng-container *ngIf=\"type.invalid && type.errors && (type.dirty || type.touched)\">\n    <mat-error *ngIf=\"type.errors.required\">The policy type is required</mat-error>\n  </ng-container>\n  <ng-container *ngIf=\"form.invalid && form.errors && (form.dirty || form.touched)\">\n    <mat-error *ngFor=\"let error of form.errors | getStringErrors\">{{ error }}</mat-error>\n  </ng-container>\n  <mat-error *ngFor=\"let error of errors\">{{ error }}</mat-error>\n</mat-card>\n"
        },
        {
            "name": "QuickExportComponent",
            "id": "component-QuickExportComponent-c76d4e00a143f427ba2b9298d0d0a25b09fd4f5e2448069cd034f6fc4b59a98bc4a739fe6e4ac49f86cd8b478faf9a778d8a513d3542c284a71f8aab4df1181c",
            "file": "src/app/shared/components/quick-export/quick-export.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-quick-export",
            "styleUrls": [
                "./quick-export.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./quick-export.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "exportErrorMessage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "exportStatusMessage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "mockInService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MockDefinition",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "triggerOpenCancelBox",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "urlInService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "urlToNavigateTo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "methodsClass": [
                {
                    "name": "openCancelDialogOrNavigateToUrl",
                    "args": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nopens dialog to dismiss current scenario to review\nRedirects to Export to Server page unless server url\nand mockdefinition are cached in service, then do\na quick export.\n\n",
                    "description": "<p>opens dialog to dismiss current scenario to review\nRedirects to Export to Server page unless server url\nand mockdefinition are cached in service, then do\na quick export.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { ExportMockdefinitionService } from '../../../services/export-mockdefinition/export-mockdefinition.service';\nimport { MockDefinition } from '../../../models/mock-definition/mock-definition.model';\nimport { NGXLogger } from 'ngx-logger';\n\n@Component({\n  selector: 'app-quick-export',\n  templateUrl: './quick-export.component.html',\n  styleUrls: ['./quick-export.component.scss'],\n})\nexport class QuickExportComponent {\n  triggerOpenCancelBox: boolean;\n  urlToNavigateTo: string;\n  urlInService: string;\n  mockInService: MockDefinition;\n  exportStatusMessage: string;\n  exportErrorMessage: string;\n\n  constructor(\n    private router: Router,\n    private mockdefinitionService: ExportMockdefinitionService,\n    private logger: NGXLogger\n  ) {}\n\n  /**\n   * opens dialog to dismiss current scenario to review\n   * Redirects to Export to Server page unless server url\n   * and mockdefinition are cached in service, then do\n   * a quick export.\n   *\n   */\n  openCancelDialogOrNavigateToUrl(url: string) {\n    this.urlInService = this.mockdefinitionService.getUrl();\n    this.mockInService = this.mockdefinitionService.getMockdefinition();\n    if (this.router.url.includes('scenario-editor')) {\n      this.triggerOpenCancelBox = true;\n    } else if (this.urlInService) {\n      this.exportStatusMessage = '';\n      this.exportErrorMessage = '';\n      this.mockdefinitionService.exportMockDefinition(this.urlInService, this.mockInService).subscribe(\n        (gotExported) => {\n          if (gotExported) {\n            this.logger.debug('Mockdefinition has been exported: ', this.mockInService);\n            this.logger.debug('To Url: ', this.urlInService);\n            this.exportStatusMessage = `File successfully exported to ${this.urlInService}`;\n            this.urlToNavigateTo = url;\n          } else {\n            this.exportErrorMessage = 'File could not be exported because of an error';\n            this.router.navigate([url]);\n          }\n        },\n        () => {\n          this.exportErrorMessage = 'File could not be exported because of an error';\n          this.router.navigate([url]);\n        }\n      );\n    } else {\n      this.exportErrorMessage = 'File could not be exported because of an error';\n      this.router.navigate([url]);\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "button mat-icon {\n  opacity: 0.54;\n}\n\na mat-icon {\n  opacity: 0.54;\n}\n\nbutton h4 {\n  font-size: 0.9em !important;\n}\n\nbutton:hover {\n  background: #f0f0f0;\n  cursor: pointer;\n  button {\n    background: #f0f0f0;\n  }\n}\n\n.status-message {\n  color: grey;\n  padding-left: 20px;\n}\n\n.error-message {\n  color: red;\n  padding-left: 20px;\n}\n",
                    "styleUrl": "./quick-export.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "mockdefinitionService",
                        "type": "ExportMockdefinitionService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "logger",
                        "type": "NGXLogger",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 18,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "mockdefinitionService",
                        "type": "ExportMockdefinitionService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "logger",
                        "type": "NGXLogger",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<div class=\"side-bar-container\" mode=\"side\" opened>\n  <div class=\"side-bar-bottom\">\n    <button mat-list-item (click)=\"openCancelDialogOrNavigateToUrl('/export-to-server')\">\n      <mat-icon mat-list-icon>new_releases</mat-icon>\n      <h4 mat-line>Quick Export</h4>\n    </button>\n    <div *ngIf=\"exportStatusMessage?.length\" class=\"status-message\">{{ exportStatusMessage }}</div>\n    <div *ngIf=\"exportErrorMessage?.length\" class=\"error-message\">{{ exportErrorMessage }}</div>\n  </div>\n</div>\n"
        },
        {
            "name": "RequestFormComponent",
            "id": "component-RequestFormComponent-d51df5c52d78501474a7ddc70a5c69f66c0a7b4a25448dc9b77f6dc9a54a204257b232542ece80e43a46add5e0e4fe96962f23565d15b31f7144586b7624d32a",
            "file": "src/app/components/scenario-editor/request-form/request-form.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => RequestFormComponent), multi: true,\n}",
                    "type": "component"
                },
                {
                    "name": "{\n    provide: NG_VALIDATORS, useExisting: forwardRef(() => RequestFormComponent), multi: true,\n}",
                    "type": "component"
                }
            ],
            "selector": "app-request-form",
            "styleUrls": [
                "./request-form.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./request-form.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "currentRuleType",
                    "defaultValue": "'header'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 83
                },
                {
                    "name": "defaults",
                    "defaultValue": "{\n    requestMatchRules: {\n      headerRules: null,\n      queryRules: null,\n      bodyRules: null,\n      urlRules: null,\n    },\n    tokenRules: null,\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "RequestFormValues",
                    "optional": false,
                    "description": "",
                    "line": 85
                },
                {
                    "name": "form",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "onChange",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<void>",
                    "optional": false,
                    "description": "",
                    "line": 157,
                    "modifierKind": [
                        144
                    ]
                },
                {
                    "name": "onTouched",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<void>",
                    "optional": false,
                    "description": "",
                    "line": 158,
                    "modifierKind": [
                        144
                    ]
                },
                {
                    "name": "ruleTypes",
                    "defaultValue": "RequestFormComponent.ruleTypesStatic",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 81,
                    "modifierKind": [
                        144
                    ]
                },
                {
                    "name": "ruleTypesStatic",
                    "defaultValue": "{\n    header: 'Header Match Rules',\n    query: 'Query Param Match Rules',\n    url: 'URL Match Rules',\n    body: 'Body Match Rules',\n    token_payload: 'Token Payload Match Rules',\n  } as const",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 73,
                    "modifierKind": [
                        124,
                        144
                    ]
                },
                {
                    "name": "subscriptions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription[]",
                    "optional": false,
                    "description": "",
                    "line": 151,
                    "modifierKind": [
                        121,
                        144
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "compareAllEqual",
                    "args": [
                        {
                            "name": "_a",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "_b",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 139,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nA sort comparison function that treats all objects as having the same order.\nNeeded until angular ticket 42490 is implemented: https://github.com/angular/angular/issues/42490\n",
                    "description": "<p>A sort comparison function that treats all objects as having the same order.\nNeeded until angular ticket 42490 is implemented: <a href=\"https://github.com/angular/angular/issues/42490\">https://github.com/angular/angular/issues/42490</a></p>\n",
                    "jsdoctags": [
                        {
                            "name": "_a",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "_b",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "tagName": {
                                "pos": 4246,
                                "end": 4253,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "returns"
                            },
                            "comment": "<p>0</p>\n"
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 153,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 97,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "value",
                                    "type": "RequestFormValues",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 160,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "value",
                                    "type": "RequestFormValues",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": []
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 164,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 124,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "validate",
                    "args": [
                        {
                            "name": "_",
                            "type": "FormControl",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ValidationErrors | null",
                    "typeParameters": [],
                    "line": 147,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "_",
                            "type": "FormControl",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "Partial<RequestFormValues> | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 116,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "Partial<RequestFormValues> | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnDestroy, OnInit, forwardRef } from '@angular/core';\nimport {\n  ControlValueAccessor,\n  FormBuilder,\n  FormControl,\n  FormGroup,\n  NG_VALIDATORS,\n  NG_VALUE_ACCESSOR,\n  ValidationErrors,\n  Validator,\n} from '@angular/forms';\nimport { Subscription } from 'rxjs';\nimport { KeyValueRuleFormValues } from 'src/app/shared/components/key-value-rule-form/key-value-rule-form.component';\nimport { UrlRuleFormValues } from 'src/app/shared/components/url-rule-form/url-rule-form.component';\nimport { BodyRuleFormValues } from '../body-rule-form/body-rule-form.component';\n\nexport interface RequestFormValues {\n  requestMatchRules: {\n    headerRules: KeyValueRuleFormValues;\n    queryRules: KeyValueRuleFormValues;\n    bodyRules: BodyRuleFormValues;\n    urlRules: UrlRuleFormValues;\n  };\n  tokenRules: KeyValueRuleFormValues;\n}\n\n@Component({\n  selector: 'app-request-form',\n  templateUrl: './request-form.component.html',\n  styleUrls: ['./request-form.component.scss'],\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => RequestFormComponent),\n      multi: true,\n    },\n    {\n      provide: NG_VALIDATORS,\n      useExisting: forwardRef(() => RequestFormComponent),\n      multi: true,\n    },\n  ],\n})\nexport class RequestFormComponent implements ControlValueAccessor, Validator, OnInit, OnDestroy {\n  form: FormGroup;\n\n  get requestMatchRules(): FormGroup {\n    // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n    return this.form.get('requestMatchRules') as FormGroup;\n  }\n\n  get headerRules(): FormControl {\n    // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n    return this.form.get('requestMatchRules.headerRules') as FormControl;\n  }\n  get queryRules(): FormControl {\n    // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n    return this.form.get('requestMatchRules.queryRules') as FormControl;\n  }\n  get bodyRules(): FormControl {\n    // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n    return this.form.get('requestMatchRules.bodyRules') as FormControl;\n  }\n  get urlRules(): FormControl {\n    // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n    return this.form.get('requestMatchRules.urlRules') as FormControl;\n  }\n  get tokenRules(): FormControl {\n    // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n    return this.form.get('tokenRules') as FormControl;\n  }\n\n  static readonly ruleTypesStatic = {\n    header: 'Header Match Rules',\n    query: 'Query Param Match Rules',\n    url: 'URL Match Rules',\n    body: 'Body Match Rules',\n    token_payload: 'Token Payload Match Rules',\n  } as const;\n\n  readonly ruleTypes = RequestFormComponent.ruleTypesStatic;\n\n  currentRuleType: keyof typeof RequestFormComponent.ruleTypesStatic = 'header';\n\n  defaults: RequestFormValues = {\n    requestMatchRules: {\n      headerRules: null,\n      queryRules: null,\n      bodyRules: null,\n      urlRules: null,\n    },\n    tokenRules: null,\n  };\n\n  constructor(private formBuilder: FormBuilder) {}\n\n  ngOnInit(): void {\n    this.form = this.formBuilder.group({\n      requestMatchRules: this.formBuilder.group({\n        headerRules: null,\n        queryRules: null,\n        bodyRules: null,\n        urlRules: null,\n      }),\n      tokenRules: null,\n    });\n\n    this.subscriptions.push(\n      this.form.valueChanges.subscribe((value: RequestFormValues | null) => {\n        this.onChange.forEach((fn) => fn(value));\n        this.onTouched.forEach((fn) => fn());\n      })\n    );\n  }\n\n  writeValue(value?: Partial<RequestFormValues> | null): void {\n    if (value === null || value === undefined) {\n      this.form.reset(this.defaults, { emitEvent: false });\n    } else {\n      this.form.patchValue(value, { emitEvent: false });\n    }\n  }\n\n  setDisabledState(isDisabled: boolean): void {\n    if (isDisabled) {\n      this.form.disable();\n      this.requestMatchRules.disable();\n    } else {\n      this.form.enable();\n      this.requestMatchRules.enable();\n    }\n  }\n\n  /**\n   * A sort comparison function that treats all objects as having the same order.\n   * Needed until angular ticket 42490 is implemented: https://github.com/angular/angular/issues/42490\n   * @returns 0\n   */\n  compareAllEqual(_a: unknown, _b: unknown) {\n    return 0;\n  }\n\n  /*\n   * Boilerplate Code Below Here\n   */\n\n  validate(_: FormControl): ValidationErrors | null {\n    return this.form.valid ? null : { request: true };\n  }\n\n  private readonly subscriptions: Subscription[] = [];\n\n  ngOnDestroy(): void {\n    this.subscriptions.forEach((s) => s.unsubscribe());\n  }\n\n  readonly onChange: Array<(value: RequestFormValues) => void> = [];\n  readonly onTouched: Array<() => void> = [];\n\n  registerOnChange(fn: (value: RequestFormValues) => void): void {\n    this.onChange.push(fn);\n  }\n\n  registerOnTouched(fn: () => void): void {\n    this.onTouched.push(fn);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".rule-set-selector-container {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n\n  ::ng-deep .mat-form-field {\n    width: 100%;\n    max-width: 30rem;\n  }\n\n  ::ng-deep .mat-form-field-wrapper {\n    padding-bottom: 0.5rem;\n  }\n}\n",
                    "styleUrl": "./request-form.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 93,
                "jsdoctags": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "ControlValueAccessor",
                "Validator",
                "OnInit",
                "OnDestroy"
            ],
            "accessors": {
                "requestMatchRules": {
                    "name": "requestMatchRules",
                    "getSignature": {
                        "name": "requestMatchRules",
                        "type": "",
                        "returnType": "FormGroup",
                        "line": 47
                    }
                },
                "headerRules": {
                    "name": "headerRules",
                    "getSignature": {
                        "name": "headerRules",
                        "type": "",
                        "returnType": "FormControl",
                        "line": 52
                    }
                },
                "queryRules": {
                    "name": "queryRules",
                    "getSignature": {
                        "name": "queryRules",
                        "type": "",
                        "returnType": "FormControl",
                        "line": 56
                    }
                },
                "bodyRules": {
                    "name": "bodyRules",
                    "getSignature": {
                        "name": "bodyRules",
                        "type": "",
                        "returnType": "FormControl",
                        "line": 60
                    }
                },
                "urlRules": {
                    "name": "urlRules",
                    "getSignature": {
                        "name": "urlRules",
                        "type": "",
                        "returnType": "FormControl",
                        "line": 64
                    }
                },
                "tokenRules": {
                    "name": "tokenRules",
                    "getSignature": {
                        "name": "tokenRules",
                        "type": "",
                        "returnType": "FormControl",
                        "line": 68
                    }
                }
            },
            "templateData": "<div class=\"rule-set-selector-container\">\n  <mat-form-field appearance=\"outline\" floatLabel=\"always\">\n    <mat-label>Request Rule Type</mat-label>\n    <mat-select [(ngModel)]=\"currentRuleType\">\n      <mat-option *ngFor=\"let rule of ruleTypes | keyvalue: compareAllEqual\" [value]=\"rule.key\">\n        {{ rule.value }}\n      </mat-option>\n    </mat-select>\n  </mat-form-field>\n</div>\n\n<div [formGroup]=\"form\">\n  <div [formGroup]=\"requestMatchRules\">\n    <app-key-value-rule-form\n      *ngIf=\"currentRuleType === 'header'\"\n      formControlName=\"headerRules\"\n      itemName=\"Header Match Rule\"\n      itemNamePlural=\"Header Match Rules\"\n    ></app-key-value-rule-form>\n\n    <app-key-value-rule-form\n      *ngIf=\"currentRuleType === 'query'\"\n      formControlName=\"queryRules\"\n      itemName=\"Query Param Match Rule\"\n      itemNamePlural=\"Query Param Match Rules\"\n    ></app-key-value-rule-form>\n\n    <app-url-rule-form *ngIf=\"currentRuleType === 'url'\" formControlName=\"urlRules\"></app-url-rule-form>\n\n    <app-body-rule-form *ngIf=\"currentRuleType === 'body'\" formControlName=\"bodyRules\"></app-body-rule-form>\n  </div>\n\n  <app-key-value-rule-form\n    *ngIf=\"currentRuleType === 'token_payload'\"\n    formControlName=\"tokenRules\"\n    itemName=\"Token (JWT) Payload Match Rule\"\n    itemNamePlural=\"Token (JWT) Payload Match Rules\"\n  ></app-key-value-rule-form>\n</div>\n"
        },
        {
            "name": "ResponseFormComponent",
            "id": "component-ResponseFormComponent-d3a420ebdd23829a907d2400d6eb4bf68e796c56180f782145e32b899467b1c8b31958e38f29550dcab7064c369c8cc1969bb18669b061cf04f602f0de54c583",
            "file": "src/app/components/scenario-editor/response-form/response-form.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => ResponseFormComponent), multi: true,\n}",
                    "type": "component"
                },
                {
                    "name": "{\n    provide: NG_VALIDATORS, useExisting: forwardRef(() => ResponseFormComponent), multi: true,\n}",
                    "type": "component"
                }
            ],
            "selector": "app-response-form",
            "styleUrls": [
                "./response-form.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./response-form.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "bodyDataWasFocused",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 87
                },
                {
                    "name": "bodyEditorOptions",
                    "defaultValue": "new JsonEditorOptions()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 77
                },
                {
                    "name": "defaults",
                    "defaultValue": "{\n    type: ResponseType.CUSTOM,\n    status: StatusCodes.OK,\n    headers: [],\n    body: '{}',\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "InternalResponseFormValues",
                    "optional": false,
                    "description": "",
                    "line": 79
                },
                {
                    "name": "form",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 53
                },
                {
                    "name": "initBodyData",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 86
                },
                {
                    "name": "onChange",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<void>",
                    "optional": false,
                    "description": "",
                    "line": 194,
                    "modifierKind": [
                        144
                    ]
                },
                {
                    "name": "onTouched",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<void>",
                    "optional": false,
                    "description": "",
                    "line": 195,
                    "modifierKind": [
                        144
                    ]
                },
                {
                    "name": "responseTypes",
                    "defaultValue": "[\n    { value: ResponseType.CUSTOM, label: 'Custom' },\n    { value: ResponseType.TEMPLATED, label: 'Templated' },\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 72,
                    "modifierKind": [
                        144
                    ]
                },
                {
                    "name": "subscriptions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription[]",
                    "optional": false,
                    "description": "",
                    "line": 188,
                    "modifierKind": [
                        121,
                        144
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "adaptExternalFormatToInternal",
                    "args": [
                        {
                            "name": "values",
                            "type": "Partial<ResponseFormValues> | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Partial | null",
                    "typeParameters": [],
                    "line": 126,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "values",
                            "type": "Partial<ResponseFormValues> | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "adaptInternalFormatToExternal",
                    "args": [
                        {
                            "name": "values",
                            "type": "InternalResponseFormValues | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ResponseFormValues | null",
                    "typeParameters": [],
                    "line": 117,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "values",
                            "type": "InternalResponseFormValues | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getStatusDescription",
                    "args": [
                        {
                            "name": "code",
                            "type": "number | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 158,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "code",
                            "type": "number | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 190,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 91,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "value",
                                    "type": "ResponseFormValues",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 197,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "value",
                                    "type": "ResponseFormValues",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": []
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 201,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "safeParseJson",
                    "args": [
                        {
                            "name": "json",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "object",
                    "typeParameters": [],
                    "line": 150,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "json",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 137,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "statusCodeValidator",
                    "args": [
                        {
                            "name": "control",
                            "type": "AbstractControl",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ValidationErrors | null",
                    "typeParameters": [],
                    "line": 169,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "control",
                            "type": "AbstractControl",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "validate",
                    "args": [
                        {
                            "name": "_",
                            "type": "FormControl",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ValidationErrors | null",
                    "typeParameters": [],
                    "line": 184,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "_",
                            "type": "FormControl",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "Partial<ResponseFormValues> | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 141,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "Partial<ResponseFormValues> | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnDestroy, OnInit, forwardRef } from '@angular/core';\nimport { ValidJsonService } from 'src/app/services/valid-json/valid-json.service';\nimport HttpStatusCodes, { StatusCodes } from 'http-status-codes';\nimport {\n  AbstractControl,\n  ControlValueAccessor,\n  FormBuilder,\n  FormControl,\n  FormGroup,\n  NG_VALIDATORS,\n  NG_VALUE_ACCESSOR,\n  ValidationErrors,\n  Validator,\n  Validators,\n} from '@angular/forms';\nimport { Subscription } from 'rxjs';\nimport { ResponseType } from 'src/app/models/mock-definition/scenario/response-type';\nimport { JsonEditorOptions } from 'ang-jsoneditor';\nimport { KeyValuePairFormValues } from 'src/app/shared/components/key-value-pair-form/key-value-pair-form.component';\n\nexport interface ResponseFormValues {\n  type: ResponseType;\n  status: number;\n  headers: Record<string, string>;\n  body: string;\n}\n\nexport interface InternalResponseFormValues {\n  type: ResponseType;\n  status: number;\n  headers: KeyValuePairFormValues;\n  body: string;\n}\n\n@Component({\n  selector: 'app-response-form',\n  templateUrl: './response-form.component.html',\n  styleUrls: ['./response-form.component.scss'],\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => ResponseFormComponent),\n      multi: true,\n    },\n    {\n      provide: NG_VALIDATORS,\n      useExisting: forwardRef(() => ResponseFormComponent),\n      multi: true,\n    },\n  ],\n})\nexport class ResponseFormComponent implements ControlValueAccessor, Validator, OnInit, OnDestroy {\n  form: FormGroup;\n\n  get type(): FormControl {\n    // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n    return this.form.get('type') as FormControl;\n  }\n  get status(): FormControl {\n    // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n    return this.form.get('status') as FormControl;\n  }\n  get headers(): FormControl {\n    // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n    return this.form.get('headers') as FormControl;\n  }\n  get body(): FormControl {\n    // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n    return this.form.get('body') as FormControl;\n  }\n\n  readonly responseTypes = [\n    { value: ResponseType.CUSTOM, label: 'Custom' },\n    { value: ResponseType.TEMPLATED, label: 'Templated' },\n  ];\n\n  bodyEditorOptions = new JsonEditorOptions();\n\n  defaults: InternalResponseFormValues = {\n    type: ResponseType.CUSTOM,\n    status: StatusCodes.OK,\n    headers: [],\n    body: '{}',\n  };\n\n  initBodyData = {};\n  bodyDataWasFocused = false;\n\n  constructor(private formBuilder: FormBuilder) {}\n\n  ngOnInit(): void {\n    this.form = this.formBuilder.group({\n      type: [this.defaults.type, Validators.required],\n      status: [this.defaults.status, [Validators.required, ResponseFormComponent.statusCodeValidator]],\n      headers: this.defaults.headers,\n      body: [this.defaults.body, [ValidJsonService.getValidator(false)]],\n    });\n\n    this.subscriptions.push(\n      this.form.valueChanges.subscribe((value: InternalResponseFormValues | null) => {\n        this.onChange.forEach((fn) => fn(this.adaptInternalFormatToExternal(value)));\n        this.onTouched.forEach((fn) => fn());\n      })\n    );\n\n    this.bodyEditorOptions.mode = 'code';\n    this.bodyEditorOptions.modes = ['code', 'text'];\n    this.bodyEditorOptions.statusBar = true;\n    this.bodyEditorOptions.onFocus = () => (this.bodyDataWasFocused = true);\n    this.bodyEditorOptions.onBlur = () => this.bodyDataWasFocused && this.body.markAsTouched();\n    this.bodyEditorOptions.onChangeText = (jsonString: string) => {\n      this.body.markAsDirty();\n      this.body.setValue(jsonString);\n    };\n  }\n\n  adaptInternalFormatToExternal(values: InternalResponseFormValues | null): ResponseFormValues | null {\n    return !values\n      ? null\n      : {\n          ...values,\n          headers: values.headers.reduce((out, { key, value }) => ({ ...out, [key]: value }), {}),\n        };\n  }\n\n  adaptExternalFormatToInternal(\n    values: Partial<ResponseFormValues> | null\n  ): Partial<InternalResponseFormValues> | null {\n    return !values\n      ? null\n      : {\n          ...values,\n          headers: !values.headers ? undefined : Object.entries(values.headers).map(([key, value]) => ({ key, value })),\n        };\n  }\n\n  setDisabledState(isDisabled: boolean): void {\n    isDisabled ? this.form.disable() : this.form.enable();\n  }\n\n  writeValue(value?: Partial<ResponseFormValues> | null): void {\n    if (value === null || value === undefined) {\n      this.form.reset(this.defaults, { emitEvent: false });\n    } else {\n      this.form.patchValue(this.adaptExternalFormatToInternal(value), { emitEvent: false });\n    }\n    this.initBodyData = this.safeParseJson(this.body.value);\n  }\n\n  safeParseJson(json: string): object {\n    try {\n      return JSON.parse(json);\n    } catch (e) {\n      return {};\n    }\n  }\n\n  getStatusDescription(code: number | null): string {\n    if (code === null) {\n      return 'Enter a Status Code';\n    }\n    try {\n      return HttpStatusCodes.getStatusText(Number(code));\n    } catch (e: unknown) {\n      return '';\n    }\n  }\n\n  static statusCodeValidator(control: AbstractControl): ValidationErrors | null {\n    try {\n      if (control.value !== null && control.value.toString() !== '') {\n        HttpStatusCodes.getStatusText(control.value);\n      }\n    } catch (e: unknown) {\n      return { invalid: 'Invalid Status Code' };\n    }\n    return null;\n  }\n\n  /*\n   * Boilerplate Code Below Here\n   */\n\n  validate(_: FormControl): ValidationErrors | null {\n    return this.form.valid ? null : { response: true };\n  }\n\n  private readonly subscriptions: Subscription[] = [];\n\n  ngOnDestroy(): void {\n    this.subscriptions.forEach((s) => s.unsubscribe());\n  }\n\n  readonly onChange: Array<(value: ResponseFormValues) => void> = [];\n  readonly onTouched: Array<() => void> = [];\n\n  registerOnChange(fn: (value: ResponseFormValues) => void): void {\n    this.onChange.push(fn);\n  }\n\n  registerOnTouched(fn: () => void): void {\n    this.onTouched.push(fn);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".mat-divider {\n  margin-top: 1rem;\n  margin-bottom: 1rem;\n}\n\n.row {\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  align-items: center;\n}\n\n.row.align-items-flex-start {\n  align-items: flex-start;\n}\n\n.row > * {\n  margin-right: 1rem;\n}\n\n.row > *:last-child {\n  margin-right: 0;\n}\n\n.flex-grow {\n  flex-grow: 1;\n}\n\n.mat-h3 {\n  margin-bottom: 0.5rem;\n}\n\n.mr-3 {\n  margin-right: 3rem !important;\n}\n\n.mb-1 {\n  margin-bottom: 1rem;\n}\n\n.status-code {\n  width: 6.75rem;\n}\n\n.response-body {\n  .mat-error {\n    margin-bottom: 0.5em;\n  }\n}\n\n:host ::ng-deep json-editor,\n:host ::ng-deep json-editor .jsoneditor,\n:host ::ng-deep json-editor > div,\n:host ::ng-deep json-editor jsoneditor-outer {\n  height: 25rem;\n}\n",
                    "styleUrl": "./response-form.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 87,
                "jsdoctags": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "ControlValueAccessor",
                "Validator",
                "OnInit",
                "OnDestroy"
            ],
            "accessors": {
                "type": {
                    "name": "type",
                    "getSignature": {
                        "name": "type",
                        "type": "",
                        "returnType": "FormControl",
                        "line": 55
                    }
                },
                "status": {
                    "name": "status",
                    "getSignature": {
                        "name": "status",
                        "type": "",
                        "returnType": "FormControl",
                        "line": 59
                    }
                },
                "headers": {
                    "name": "headers",
                    "getSignature": {
                        "name": "headers",
                        "type": "",
                        "returnType": "FormControl",
                        "line": 63
                    }
                },
                "body": {
                    "name": "body",
                    "getSignature": {
                        "name": "body",
                        "type": "",
                        "returnType": "FormControl",
                        "line": 67
                    }
                }
            },
            "templateData": "<div [formGroup]=\"form\">\n  <h3 class=\"mat-h3\">Response Metadata</h3>\n\n  <mat-card class=\"row align-items-flex-start mb-1\">\n    <mat-form-field class=\"mr-3\">\n      <mat-label>Response Type</mat-label>\n      <mat-select formControlName=\"type\">\n        <mat-option *ngFor=\"let p of responseTypes\" [value]=\"p.value\">\n          {{ p.label }}\n        </mat-option>\n      </mat-select>\n    </mat-form-field>\n\n    <div class=\"flex-grow\">\n      <div class=\"row\">\n        <mat-form-field class=\"status-code\">\n          <input matInput type=\"number\" min=\"100\" max=\"599\" formControlName=\"status\" placeholder=\"Status Code\" />\n        </mat-form-field>\n\n        <mat-form-field class=\"flex-grow\">\n          <mat-label>Status Message</mat-label>\n          <input matInput readonly [value]=\"getStatusDescription(status.value) || ' '\" />\n        </mat-form-field>\n      </div>\n\n      <ng-container *ngIf=\"status.invalid && status.errors && (status.dirty || status.touched)\">\n        <mat-error *ngIf=\"status.errors.required\">The Status Code is required</mat-error>\n        <mat-error *ngFor=\"let error of status.errors | getStringErrors\">{{ error }}</mat-error>\n      </ng-container>\n    </div>\n  </mat-card>\n\n  <h3 class=\"mat-h3\">Response Headers</h3>\n  <app-key-value-pair-form\n    formControlName=\"headers\"\n    itemName=\"Header\"\n    itemNamePlural=\"Headers\"\n  ></app-key-value-pair-form>\n\n  <br />\n  <div class=\"response-body\">\n    <h3 class=\"mat-h3\">Response Body</h3>\n\n    <ng-container *ngIf=\"body.invalid && body.errors && (body.dirty || body.touched)\">\n      <mat-error *ngIf=\"body.errors.required\">The Body is required</mat-error>\n      <mat-error *ngFor=\"let error of body.errors | getStringErrors\">{{ error }}</mat-error>\n    </ng-container>\n\n    <json-editor [options]=\"bodyEditorOptions\" [data]=\"initBodyData\"></json-editor>\n  </div>\n</div>\n"
        },
        {
            "name": "ScenarioEditorComponent",
            "id": "component-ScenarioEditorComponent-2f1f903458d8316af0a658b794493b6e0ecaaccc034cfd8dbb05c38717e5d01646e80ac6647d1b0447ef90acb562c70a861fcf58f0ba387a57a5e0cc16a2e1b6",
            "file": "src/app/components/scenario-editor/scenario-editor.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-scenario-editor",
            "styleUrls": [
                "./scenario-editor.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./scenario-editor.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "endpointPath",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 62
                },
                {
                    "name": "endpointVerb",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "VerbType",
                    "optional": false,
                    "description": "",
                    "line": 61
                },
                {
                    "name": "scenarioForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "scenarioId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 58
                },
                {
                    "name": "selectedScenario",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Scenario",
                    "optional": false,
                    "description": "",
                    "line": 59
                },
                {
                    "name": "subscriptions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription[]",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "triggerOpenCancelBox",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 60
                }
            ],
            "methodsClass": [
                {
                    "name": "cancel",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 185,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "convertPoliciesDataToFormValues",
                    "args": [
                        {
                            "name": "policies",
                            "type": "Policy[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "PoliciesFormValues",
                    "typeParameters": [],
                    "line": 126,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "policies",
                            "type": "Policy[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "convertResponseDataToFormValues",
                    "args": [
                        {
                            "name": "response",
                            "type": "Response",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ResponseFormValues",
                    "typeParameters": [],
                    "line": 119,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "response",
                            "type": "Response",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "convertScenarioToFormData",
                    "args": [
                        {
                            "name": "scenario",
                            "type": "Scenario",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "ScenarioEditorFormValues",
                    "typeParameters": [],
                    "line": 105,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "scenario",
                            "type": "Scenario",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createEmptyScenario",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "verb",
                            "type": "VerbType",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "path",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Scenario",
                    "typeParameters": [],
                    "line": 243,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCreate an empty scenario using the provided information\n",
                    "description": "<p>Create an empty scenario using the provided information</p>\n",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 8260,
                                "end": 8262,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "id"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 8254,
                                "end": 8259,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>Scenario ID of the empty scenario</p>\n"
                        },
                        {
                            "name": {
                                "pos": 8309,
                                "end": 8313,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "verb"
                            },
                            "type": "VerbType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 8303,
                                "end": 8308,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>Verb of the scenario</p>\n"
                        },
                        {
                            "name": {
                                "pos": 8347,
                                "end": 8351,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "path"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 8341,
                                "end": 8346,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>Path of the scenario</p>\n"
                        }
                    ]
                },
                {
                    "name": "insertFormDataIntoScenario",
                    "args": [
                        {
                            "name": "formData",
                            "type": "ScenarioEditorFormValues",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "scenario",
                            "type": "Scenario",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 174,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "formData",
                            "type": "ScenarioEditorFormValues",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "scenario",
                            "type": "Scenario",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 142,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 76,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRuns when the app is initialized\n",
                    "description": "<p>Runs when the app is initialized</p>\n"
                },
                {
                    "name": "onCancelDialogAction",
                    "args": [
                        {
                            "name": "shouldCancel",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 198,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHandles the response from the cancel box\n",
                    "description": "<p>Handles the response from the cancel box</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 6699,
                                "end": 6711,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "shouldCancel"
                            },
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 6693,
                                "end": 6698,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>The button pressed for the cancel box</p>\n"
                        }
                    ]
                },
                {
                    "name": "retrieveScenario",
                    "args": [
                        {
                            "name": "scenarioId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 212,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRetrieve scenario from store using the provided scenario ID;\nIf not found, create a new empty scenario\n",
                    "description": "<p>Retrieve scenario from store using the provided scenario ID;\nIf not found, create a new empty scenario</p>\n",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 7230,
                                "end": 7240,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "scenarioId"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 7224,
                                "end": 7229,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>Scenario ID</p>\n"
                        }
                    ]
                },
                {
                    "name": "save",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 146,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { ActivatedRoute, Params, Router } from '@angular/router';\nimport { DesignerStore } from 'src/app/store/designer-store';\nimport { Scenario } from 'src/app/models/mock-definition/scenario/scenario.model';\nimport { NGXLogger } from 'ngx-logger';\nimport { Subscription } from 'rxjs';\nimport { VerbType } from 'src/app/models/verb-type';\nimport { cloneDeep } from 'lodash';\nimport { FormBuilder, FormControl, FormGroup } from '@angular/forms';\nimport { ResponseType } from 'src/app/models/mock-definition/scenario/response-type';\nimport { MetadataFormValues } from './metadata-form/metadata-form.component';\nimport { PolicyType } from 'src/app/models/mock-definition/scenario/policy-type';\nimport { PoliciesFormValues } from './policies-form/policies-form.component';\nimport { ResponseFormValues } from './response-form/response-form.component';\nimport { Response, defaultResponse } from 'src/app/models/mock-definition/scenario/response.model';\nimport { RequestFormValues } from './request-form/request-form.component';\nimport { Policy } from 'src/app/models/mock-definition/scenario/policy.model';\nimport { MockDefinitionService } from 'src/app/services/mock-definition/mock-definition.service';\n\nexport interface ScenarioEditorFormValues {\n  metadata: MetadataFormValues;\n  request: RequestFormValues;\n  response: ResponseFormValues;\n  policies: PoliciesFormValues;\n}\n\n@Component({\n  selector: 'app-scenario-editor',\n  templateUrl: './scenario-editor.component.html',\n  styleUrls: ['./scenario-editor.component.scss'],\n})\nexport class ScenarioEditorComponent implements OnInit, OnDestroy {\n  subscriptions: Subscription[] = [];\n\n  // The new formGroup that the controls will be migrated into\n  scenarioForm: FormGroup;\n\n  get metadata(): FormControl {\n    // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n    return this.scenarioForm.get('metadata') as FormControl;\n  }\n\n  get request(): FormControl {\n    // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n    return this.scenarioForm.get('request') as FormControl;\n  }\n\n  get response(): FormControl {\n    // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n    return this.scenarioForm.get('response') as FormControl;\n  }\n\n  get policies(): FormControl {\n    // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n    return this.scenarioForm.get('policies') as FormControl;\n  }\n\n  scenarioId: string;\n  selectedScenario: Scenario;\n  triggerOpenCancelBox: boolean;\n  endpointVerb: VerbType;\n  endpointPath: string;\n\n  constructor(\n    private router: Router,\n    private store: DesignerStore,\n    private logger: NGXLogger,\n    private activatedRoute: ActivatedRoute,\n    private formBuilder: FormBuilder,\n    private mockDefService: MockDefinitionService\n  ) {}\n\n  /**\n   * Runs when the app is initialized\n   */\n  ngOnInit(): void {\n    this.scenarioForm = this.formBuilder.group({\n      metadata: null,\n      response: null,\n      request: null,\n      policies: null,\n    });\n\n    this.triggerOpenCancelBox = false;\n\n    this.subscriptions.push(\n      this.activatedRoute.params.subscribe((param: Params) => {\n        this.scenarioId = param.scenarioId;\n        this.logger.debug('ScenarioEditorComponent:ngOnInit: Retrieved Scenario ID from URL', param.scenarioId);\n        this.retrieveScenario(param.scenarioId);\n        this.store.selectedScenario = this.selectedScenario;\n\n        this.scenarioForm.setValue(this.convertScenarioToFormData(this.selectedScenario));\n      }),\n\n      this.store.state$.subscribe((state) => {\n        if (state.mockDefinition && state.selectedEndpoint) {\n          this.endpointVerb = state.selectedEndpoint.verb;\n          this.endpointPath = state.selectedEndpoint.path;\n        }\n      })\n    );\n  }\n\n  convertScenarioToFormData(scenario?: Scenario): ScenarioEditorFormValues {\n    const response: ResponseFormValues = this.convertResponseDataToFormValues(scenario?.response ?? defaultResponse);\n    const policies: PoliciesFormValues = this.convertPoliciesDataToFormValues(scenario?.policies ?? []);\n    return {\n      metadata: scenario?.metadata ?? null,\n      request: {\n        requestMatchRules: scenario?.requestMatchRules ?? null,\n        tokenRules: scenario?.tokenRule.rules ?? [],\n      },\n      response,\n      policies,\n    };\n  }\n\n  convertResponseDataToFormValues(response: Response): ResponseFormValues {\n    if (response.type === ResponseType.NONE) {\n      response.type = ResponseType.CUSTOM;\n    }\n    return response;\n  }\n\n  convertPoliciesDataToFormValues(policies: Policy[]): PoliciesFormValues {\n    return policies\n      .map((p) => {\n        switch (p.type) {\n          case PolicyType.DELAY_RESPONSE:\n            return p;\n          case PolicyType.NONE:\n          default: {\n            const _: PolicyType.NONE = p.type;\n            return null;\n          }\n        }\n      })\n      .filter((p) => p !== null);\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.forEach((s) => s.unsubscribe());\n  }\n\n  save(): void {\n    this.logger.debug('save() - form validity:', {\n      scenarioForm: this.scenarioForm.valid,\n      metadata: this.metadata.valid,\n      request: this.request.valid,\n      response: this.response.valid,\n      policies: this.policies.valid,\n    });\n\n    this.logger.debug('save() - this.scenarioForm.value:', this.scenarioForm.value);\n\n    if (this.scenarioForm.valid) {\n      this.logger.debug(\n        'ScenarioEditorComponent:saveScenario: Attempt to update the provided scenario',\n        this.selectedScenario\n      );\n\n      const formData: ScenarioEditorFormValues = this.scenarioForm.value;\n      this.insertFormDataIntoScenario(formData, this.selectedScenario);\n\n      this.store.addOrUpdateScenario(this.selectedScenario);\n\n      this.logger.debug('ScenarioEditorComponent:saveScenario: Updated the provided scenario', this.selectedScenario);\n\n      this.router.navigateByUrl('/scenario-view');\n    }\n  }\n\n  insertFormDataIntoScenario(formData: ScenarioEditorFormValues, scenario: Scenario) {\n    scenario.metadata = formData.metadata;\n    scenario.requestMatchRules = formData.request.requestMatchRules;\n    scenario.tokenRule.rules = formData.request.tokenRules;\n    scenario.response = formData.response;\n    scenario.policies = formData.policies;\n  }\n\n  /*\n   * Opens the cancel box\n   */\n  cancel(): void {\n    if (this.scenarioForm.dirty) {\n      this.logger.debug('Opened cancel box for scenario-editor');\n      this.triggerOpenCancelBox = true;\n    } else {\n      this.router.navigateByUrl('/scenario-view');\n    }\n  }\n\n  /**\n   * Handles the response from the cancel box\n   * @param shouldCancel The button pressed for the cancel box\n   */\n  onCancelDialogAction(shouldCancel: boolean): void {\n    this.logger.debug('User answer for scenario-editor cancel box:', shouldCancel);\n    this.triggerOpenCancelBox = false;\n    if (shouldCancel) {\n      this.logger.debug('The user has cancelled; navigating to endpoint-view');\n      this.router.navigateByUrl('/scenario-view');\n    }\n  }\n\n  /**\n   * Retrieve scenario from store using the provided scenario ID;\n   * If not found, create a new empty scenario\n   * @param scenarioId Scenario ID\n   */\n  private retrieveScenario(scenarioId: string): void {\n    const currentMock = this.store.state.mockDefinition;\n    if (!currentMock) {\n      return;\n    }\n\n    const selected = currentMock.scenarios.find((s) => s.id === scenarioId);\n    if (selected) {\n      this.selectedScenario = cloneDeep(selected);\n\n      this.logger.debug(\n        'ScenarioEditorComponent:retrieveScenario: Scenario found for the provided scenario ID',\n        this.selectedScenario\n      );\n    } else {\n      const endpointVerb = this.store.state.selectedEndpoint.verb;\n      const endpointPath = this.store.state.selectedEndpoint.path;\n      this.selectedScenario = this.createEmptyScenario(scenarioId, endpointVerb, endpointPath);\n      this.logger.debug(\n        `ScenarioEditorComponent:retrieveScenario: Scenario not found, new scenario was created for (${endpointPath}, ${endpointVerb})`,\n        this.selectedScenario\n      );\n    }\n  }\n\n  /**\n   * Create an empty scenario using the provided information\n   * @param id Scenario ID of the empty scenario\n   * @param verb Verb of the scenario\n   * @param path Path of the scenario\n   */\n  private createEmptyScenario(id: string, verb: VerbType, path: string): Scenario {\n    const newScenario: Scenario = this.mockDefService.generateNewScenario({\n      title: '',\n      description: '',\n      path,\n      verb,\n      status: 200,\n    });\n    newScenario.id = id;\n    return newScenario;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".container.editor {\n  width: 95vw !important;\n  min-height: 85vh !important;\n  margin-top: 2vh;\n  -webkit-box-shadow: 0px 1px 12px 3px rgba(153, 148, 153, 1);\n  -moz-box-shadow: 0px 1px 12px 3px rgba(153, 148, 153, 1);\n  box-shadow: 0px 1px 12px 3px rgba(153, 148, 153, 1);\n}\n\n.tab-warning-icon {\n  font-size: 1.25rem;\n  line-height: 1.25rem;\n  height: 1.4rem;\n  margin-left: 0.25rem;\n}\n\nbutton#save-button {\n  min-width: 9rem;\n  &:hover:not([disabled]) {\n    background-color: #005c50;\n  }\n}\n\n.w-100 {\n  width: 100%;\n}\n\n.mr-1 {\n  margin-right: 1rem;\n}\n\n.overlay {\n  position: fixed;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 100vw;\n  height: 100vh;\n  top: 0;\n  left: 0;\n  z-index: 10;\n  background-color: rgba(0, 0, 0, 0.5);\n}\n\n.endpoint-info {\n  display: flex;\n  align-items: center;\n}\n\n.tab-body {\n  padding: 1.5rem;\n}\n\n.button-row {\n  justify-content: space-between;\n  margin: 1rem;\n}\n",
                    "styleUrl": "./scenario-editor.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "store",
                        "type": "DesignerStore",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "logger",
                        "type": "NGXLogger",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "mockDefService",
                        "type": "MockDefinitionService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 62,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "DesignerStore",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "logger",
                        "type": "NGXLogger",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "mockDefService",
                        "type": "MockDefinitionService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "accessors": {
                "metadata": {
                    "name": "metadata",
                    "getSignature": {
                        "name": "metadata",
                        "type": "",
                        "returnType": "FormControl",
                        "line": 38
                    }
                },
                "request": {
                    "name": "request",
                    "getSignature": {
                        "name": "request",
                        "type": "",
                        "returnType": "FormControl",
                        "line": 43
                    }
                },
                "response": {
                    "name": "response",
                    "getSignature": {
                        "name": "response",
                        "type": "",
                        "returnType": "FormControl",
                        "line": 48
                    }
                },
                "policies": {
                    "name": "policies",
                    "getSignature": {
                        "name": "policies",
                        "type": "",
                        "returnType": "FormControl",
                        "line": 53
                    }
                }
            },
            "templateData": "<div class=\"fullscreen column center-hr\">\n  <div class=\"container editor\">\n    <div class=\"row\">\n      <div class=\"sidebar row\">\n        <app-side-bar class=\"row\"></app-side-bar>\n      </div>\n      <div class=\"w-100\" [formGroup]=\"scenarioForm\">\n        <div>\n          <app-overview-header [header]=\"headerContent\"></app-overview-header>\n        </div>\n        <mat-tab-group>\n          <mat-tab>\n            <ng-template mat-tab-label>\n              General\n              <mat-icon class=\"tab-warning-icon\" color=\"warn\" *ngIf=\"!metadata.valid || !policies.valid\"\n                >priority_high</mat-icon\n              >\n            </ng-template>\n            <div class=\"tab-body\">\n              <h3 class=\"mat-h3\">Metadata</h3>\n              <app-metadata-form formControlName=\"metadata\"></app-metadata-form>\n              <br />\n              <h3 class=\"mat-h3\">Policies</h3>\n              <app-policies-form formControlName=\"policies\"></app-policies-form>\n            </div>\n          </mat-tab>\n\n          <mat-tab>\n            <ng-template mat-tab-label>\n              Request\n              <mat-icon class=\"tab-warning-icon\" color=\"warn\" *ngIf=\"!request.valid\">priority_high</mat-icon>\n            </ng-template>\n            <div class=\"tab-body\">\n              <app-request-form formControlName=\"request\"></app-request-form>\n            </div>\n          </mat-tab>\n\n          <mat-tab>\n            <ng-template mat-tab-label>\n              Response\n              <mat-icon class=\"tab-warning-icon\" color=\"warn\" *ngIf=\"!response.valid\">priority_high</mat-icon>\n            </ng-template>\n            <div class=\"tab-body\">\n              <app-response-form formControlName=\"response\"></app-response-form>\n            </div>\n          </mat-tab>\n        </mat-tab-group>\n\n        <div class=\"row button-row\">\n          <div id=\"scenario-back-button-div\">\n            <button id=\"go-to-scenarios\" mat-raised-button (click)=\"cancel()\">\n              <mat-icon>chevron_left</mat-icon>Back to Scenarios\n            </button>\n          </div>\n          <div id=\"save-button-div\">\n            <button\n              id=\"save-button\"\n              color=\"primary\"\n              mat-raised-button\n              (click)=\"save()\"\n              [disabled]=\"!scenarioForm.valid || !scenarioForm.dirty\"\n            >\n              Save\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n\n<ng-template #headerContent let-path=\"path\">\n  <div class=\"title column center\">\n    <div class=\"endpoint-info\">\n      <mat-chip-list class=\"mr-1\">\n        <mat-chip [style.background-color]=\"endpointVerb | getVerbColor\">{{ endpointVerb | getVerbString }}</mat-chip>\n      </mat-chip-list>\n      <h3>\n        {{ endpointPath }}\n      </h3>\n    </div>\n    <div>\n      <h3>\n        {{ selectedScenario?.metadata?.title || 'New Scenario' }}\n      </h3>\n    </div>\n  </div>\n</ng-template>\n\n<div class=\"overlay\" *ngIf=\"triggerOpenCancelBox\">\n  <div>\n    <mat-card>\n      <app-dialog-box\n        titleText=\"Confirm Scenario Changes Discard\"\n        confirmButtonText=\"Confirm\"\n        cancelButtonText=\"Cancel\"\n        bodyText=\"Are you sure you want to discard your unsaved changes?\"\n        (choiceBoolean)=\"onCancelDialogAction($event)\"\n      ></app-dialog-box>\n    </mat-card>\n  </div>\n</div>\n"
        },
        {
            "name": "ScenarioViewComponent",
            "id": "component-ScenarioViewComponent-af198642c03f903df3da33b7693311904bc500f8500ee6565db48c02623134679dcea34d97bb78aa49648e816298a78c550ea54a9c72bbc3e6a7b1a34b3dd37d",
            "file": "src/app/components/scenario-view/scenario-view.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-scenario-view",
            "styleUrls": [
                "./scenario-view.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./scenario-view.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "scenarios",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "Scenario[]",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "shouldCloneToView",
                    "defaultValue": "new EventEmitter<Scenario>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_selectedMode",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "dropdownVisible",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "endpointPath",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "endpointVerb",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "VerbType",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "errorMessage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "filteredList",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Scenario[]",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "isHoveringOverMenu",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "mockDefinition",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MockDefinition",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "modes",
                    "defaultValue": "[\n    { value: ValidationType.NONE, viewValue: 'None' },\n    { value: ValidationType.JWT_VALIDATION, viewValue: 'JWT Validation' },\n    { value: ValidationType.JWT_VALIDATION_AND_REQUEST_MATCH, viewValue: 'JWT Validation and Contents' },\n    { value: ValidationType.CONTENT, viewValue: 'Token Contents' },\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "scenarioList",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Scenario[]",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "storeSubscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "triggerOpen",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 34
                }
            ],
            "methodsClass": [
                {
                    "name": "addScenario",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 80,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "cloneScenario",
                    "args": [
                        {
                            "name": "scenario",
                            "type": "Scenario",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 113,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nClones a scenario, and adds the -copy suffix to the name. If a scenario already exists with that suffix (and has the same name),\nthen a monotonically increasing integer will be appended such that it does not conflict with any existing scenario names.\n",
                    "description": "<p>Clones a scenario, and adds the -copy suffix to the name. If a scenario already exists with that suffix (and has the same name),\nthen a monotonically increasing integer will be appended such that it does not conflict with any existing scenario names.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "scenario",
                            "type": "Scenario",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "confirmDeleteDialog",
                    "args": [
                        {
                            "name": "scenario",
                            "type": "Scenario",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 144,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThis method opens the dialog box when called\n",
                    "description": "<p>This method opens the dialog box when called</p>\n",
                    "jsdoctags": [
                        {
                            "name": "scenario",
                            "type": "Scenario",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteScenario",
                    "args": [
                        {
                            "name": "scenario",
                            "type": "Scenario",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 166,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThis method updates the store with the current scenario filtered out\n",
                    "description": "<p>This method updates the store with the current scenario filtered out</p>\n",
                    "jsdoctags": [
                        {
                            "name": "scenario",
                            "type": "Scenario",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getBodyText",
                    "args": [
                        {
                            "name": "scenario",
                            "type": "Scenario",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 177,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThis method sets the body text with the deletion prompt\n",
                    "description": "<p>This method sets the body text with the deletion prompt</p>\n",
                    "jsdoctags": [
                        {
                            "name": "scenario",
                            "type": "Scenario",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getScenarioResponseStatusString",
                    "args": [
                        {
                            "name": "scenario",
                            "type": "Scenario",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 129,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGets the scenario response's status string\n",
                    "description": "<p>Gets the scenario response&#39;s status string</p>\n",
                    "jsdoctags": [
                        {
                            "name": "scenario",
                            "type": "Scenario",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "goToEndpoints",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 86,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGoes back to the endpoint page\n",
                    "description": "<p>Goes back to the endpoint page</p>\n"
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 76,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onDialogAction",
                    "args": [
                        {
                            "name": "confirmed",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "scenario",
                            "type": "Scenario",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 153,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThis method delete the scenario in the store when the user clicks on the confirm box and does nothing if the user cancels\nthe scenario deletion\n",
                    "description": "<p>This method delete the scenario in the store when the user clicks on the confirm box and does nothing if the user cancels\nthe scenario deletion</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 5168,
                                "end": 5177,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "confirmed"
                            },
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 5162,
                                "end": 5167,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>boolean is true when the user clicks on confirm scenario deletion</p>\n"
                        },
                        {
                            "name": "scenario",
                            "type": "Scenario",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "scenarioToString",
                    "args": [
                        {
                            "name": "scenario",
                            "type": "Scenario",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 93,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThis function takes an scenario object and return its path as a string\n",
                    "description": "<p>This function takes an scenario object and return its path as a string</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 3304,
                                "end": 3312,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "scenario"
                            },
                            "type": "Scenario",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 3298,
                                "end": 3303,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>The scenario to be converted to string</p>\n"
                        }
                    ]
                },
                {
                    "name": "setFilteredList",
                    "args": [
                        {
                            "name": "newScenarios",
                            "type": "Scenario[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 102,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThis function takes a list of scenarios and updates it to the new list of filtered scenarios\n",
                    "description": "<p>This function takes a list of scenarios and updates it to the new list of filtered scenarios</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 3601,
                                "end": 3613,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "newScenarios"
                            },
                            "type": "Scenario[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 3595,
                                "end": 3600,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>The list of scenarios</p>\n"
                        }
                    ]
                },
                {
                    "name": "showDialog",
                    "args": [
                        {
                            "name": "scenario",
                            "type": "Scenario",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 170,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "scenario",
                            "type": "Scenario",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toggleDefaultScenario",
                    "args": [
                        {
                            "name": "event",
                            "type": "MatCheckboxChange",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "scenario",
                            "type": "Scenario",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 185,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSets the default scenario to the provided scenario\n",
                    "description": "<p>Sets the default scenario to the provided scenario</p>\n",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "MatCheckboxChange",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": {
                                "pos": 6111,
                                "end": 6119,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "scenario"
                            },
                            "type": "Scenario",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 6105,
                                "end": 6110,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>The scenario to make default</p>\n"
                        }
                    ]
                },
                {
                    "name": "updateScenariosValidationType",
                    "args": [
                        {
                            "name": "mode",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 193,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "mode",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, OnDestroy, OnInit, Output } from '@angular/core';\nimport { DesignerStore } from 'src/app/store/designer-store';\nimport { Scenario } from 'src/app/models/mock-definition/scenario/scenario.model';\nimport { Router } from '@angular/router';\nimport { NGXLogger } from 'ngx-logger';\nimport * as uuid from 'uuid';\nimport { Subscription } from 'rxjs';\nimport { VerbType } from 'src/app/models/verb-type';\nimport { MockDefinitionService } from 'src/app/services/mock-definition/mock-definition.service';\nimport { map } from 'rxjs/operators';\nimport { MockDefinition } from 'src/app/models/mock-definition/mock-definition.model';\nimport * as HttpStatus from 'http-status-codes';\nimport { MatCheckboxChange } from '@angular/material/checkbox';\nimport { ValidationType } from 'src/app/models/mock-definition/scenario/token-rule.model';\n\n@Component({\n  selector: 'app-scenario-view',\n  templateUrl: './scenario-view.component.html',\n  styleUrls: ['./scenario-view.component.scss'],\n})\nexport class ScenarioViewComponent implements OnInit, OnDestroy {\n  @Input() scenarios: Scenario[] = [];\n  @Output() shouldCloneToView = new EventEmitter<Scenario>();\n  private storeSubscription: Subscription;\n  private _selectedMode: number;\n\n  endpointVerb: VerbType;\n  endpointPath: string;\n\n  scenarioList: Scenario[] = [];\n  filteredList: Scenario[] = [];\n\n  errorMessage: string;\n  triggerOpen: string;\n  mockDefinition: MockDefinition;\n  isHoveringOverMenu: boolean;\n  dropdownVisible: boolean;\n\n  modes = [\n    { value: ValidationType.NONE, viewValue: 'None' },\n    { value: ValidationType.JWT_VALIDATION, viewValue: 'JWT Validation' },\n    { value: ValidationType.JWT_VALIDATION_AND_REQUEST_MATCH, viewValue: 'JWT Validation and Contents' },\n    { value: ValidationType.CONTENT, viewValue: 'Token Contents' },\n  ];\n\n  constructor(\n    private store: DesignerStore,\n    private router: Router,\n    private logger: NGXLogger,\n    private mockDefinitionService: MockDefinitionService\n  ) {\n    this.store.state$.subscribe((state) => {\n      this.mockDefinition = state.mockDefinition;\n    });\n  }\n\n  ngOnInit() {\n    this.storeSubscription = this.store.state$.subscribe((state) => {\n      if (state.mockDefinition && state.selectedEndpoint) {\n        this.endpointVerb = state.selectedEndpoint.verb;\n        this.endpointPath = state.selectedEndpoint.path;\n        this.scenarioList = state.mockDefinition.scenarios.filter(\n          (s) => s.path === this.endpointPath && s.verb === this.endpointVerb\n        );\n        this.dropdownVisible = state.mockDefinition.tokenValidation;\n        this.logger.log('ScenarioViewComponent:ngOnInit: Resulting ScenarioList: ', this.scenarioList);\n      }\n    });\n\n    this.errorMessage = 'No scenarios exist. Click the add button to create a new scenario.';\n    if (this.scenarioList.length) {\n      this._selectedMode = this.scenarioList[0].tokenRule.validationType;\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.storeSubscription.unsubscribe();\n  }\n\n  addScenario() {\n    this.router.navigate(['/scenario-editor', uuid.v4()]);\n  }\n  /**\n   * Goes back to the endpoint page\n   */\n  goToEndpoints() {\n    this.router.navigateByUrl('/endpoint-view');\n  }\n  /**\n   * This function takes an scenario object and return its path as a string\n   * @param scenario The scenario to be converted to string\n   */\n  scenarioToString(scenario: Scenario): string {\n    if (scenario?.metadata) {\n      return scenario.metadata.title;\n    }\n  }\n  /**\n   * This function takes a list of scenarios and updates it to the new list of filtered scenarios\n   * @param newScenarios The list of scenarios\n   */\n  setFilteredList(newScenarios: Scenario[]) {\n    if (newScenarios) {\n      this.filteredList = newScenarios;\n    }\n    this.errorMessage = 'No Result(s) Found';\n  }\n\n  /**\n   * Clones a scenario, and adds the -copy suffix to the name. If a scenario already exists with that suffix (and has the same name),\n   * then a monotonically increasing integer will be appended such that it does not conflict with any existing scenario names.\n   */\n  cloneScenario(scenario: Scenario) {\n    this.logger.debug(scenario);\n    const observable = this.mockDefinitionService\n      .cloneScenario(this.store.state.mockDefinition.metadata.title, scenario)\n      .pipe(map((value) => value));\n\n    observable.subscribe((result) => {\n      if (result) {\n        this.logger.log('Scenario successfully cloned');\n      }\n    });\n  }\n\n  /**\n   * Gets the scenario response's status string\n   */\n  getScenarioResponseStatusString(scenario: Scenario) {\n    try {\n      return HttpStatus.getStatusText(scenario.response.status);\n    } catch (Error) {\n      this.logger.warn(\n        `Returning unknown for scenario status as the status is invalid:\n          ${scenario.response.status}`\n      );\n      return 'Unknown';\n    }\n  }\n\n  /**\n   * This method opens the dialog box when called\n   */\n  confirmDeleteDialog(scenario: Scenario) {\n    this.triggerOpen = scenario.id;\n  }\n\n  /**\n   * This method delete the scenario in the store when the user clicks on the confirm box and does nothing if the user cancels\n   * the scenario deletion\n   * @param confirmed boolean is true when the user clicks on confirm scenario deletion\n   */\n  onDialogAction(confirmed: boolean, scenario: Scenario) {\n    if (confirmed) {\n      this.deleteScenario(scenario);\n      this.logger.debug(`Scenario ${scenario.metadata.title} deleted successfully`);\n    }\n\n    this.triggerOpen = null;\n    this.logger.debug(`Scenario ${scenario.metadata.title} deletion aborted`);\n  }\n\n  /**\n   * This method updates the store with the current scenario filtered out\n   */\n  deleteScenario(scenario: Scenario) {\n    this.store.deleteScenario(scenario.id);\n  }\n\n  showDialog(scenario: Scenario) {\n    return this.triggerOpen === scenario.id;\n  }\n\n  /**\n   * This method sets the body text with the deletion prompt\n   */\n  getBodyText(scenario: Scenario): string {\n    return `Are you sure you want to delete '${scenario.metadata.title.bold()}' ?`;\n  }\n\n  /**\n   * Sets the default scenario to the provided scenario\n   * @param scenario The scenario to make default\n   */\n  toggleDefaultScenario(event: MatCheckboxChange, scenario: Scenario) {\n    this.scenarioList.forEach((aScenario) => (aScenario.defaultScenario = false));\n    if (event.checked) {\n      scenario.defaultScenario = true;\n      this.logger.debug('Set default scenario to ', scenario);\n    }\n  }\n\n  updateScenariosValidationType(mode: number) {\n    this.scenarioList.forEach((scenario) => {\n      scenario.tokenRule.validationType = mode;\n      this.store.addOrUpdateScenario(scenario);\n    });\n  }\n\n  get selectedMode(): number {\n    return this._selectedMode;\n  }\n\n  set selectedMode(value: number) {\n    this._selectedMode = value;\n    this.updateScenariosValidationType(this.selectedMode);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".container.scenarioview {\n  width: 95vw !important;\n  min-height: 85vh !important;\n  margin-top: 2vh;\n  -webkit-box-shadow: 0px 1px 12px 3px rgba(153, 148, 153, 1);\n  -moz-box-shadow: 0px 1px 12px 3px rgba(153, 148, 153, 1);\n  box-shadow: 0px 1px 12px 3px rgba(153, 148, 153, 1);\n}\n\n.scenario {\n  width: 100% !important;\n}\n\napp-overview-header {\n  width: 100%;\n  height: 19%;\n  display: flex;\n  flex-direction: column;\n}\n\ndiv#scenario-list {\n  max-width: 96%;\n  display: flex;\n  flex-direction: column;\n  margin-left: 2%;\n}\n\ndiv.scenarios {\n  width: 100%;\n  overflow-y: hidden;\n}\n\np#description {\n  font-size: 1.4em;\n  color: rgba(0, 0, 0, 0.541327);\n  font-family: Roboto;\n  padding: 0 2em 0.5em 2em;\n}\n\nbutton#add {\n  font-size: 1.6em;\n  font-weight: 300;\n  float: right;\n  margin-right: 10%;\n  margin-top: 1%;\n}\n\n.footer-buttons {\n  margin-left: 2.8rem;\n  display: flex;\n  align-items: flex-start;\n  width: 94%;\n  justify-content: space-between;\n  button {\n    margin-top: 1em;\n    &:hover {\n      background-color: #005c50;\n    }\n  }\n}\n\n.title mat-chip-list {\n  margin-right: 1em;\n}\n\np#notFoundMessage {\n  font-size: 1.4em;\n  color: rgba(0, 0, 0, 0.541327);\n  font-family: Roboto;\n  padding: 0 2em 0.5em 2em;\n  display: flex;\n  justify-content: center;\n}\n\n.scenariolistcontainer {\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  overflow-y: scroll;\n  overflow-x: hidden;\n\n  mat-list-item {\n    margin-top: 0.6em;\n    width: 100%;\n    height: auto;\n  }\n\n  div#scenario-list-item {\n    width: 100%;\n  }\n}\n\n.scenario-list-item-container {\n  padding: 0em;\n  display: flex;\n  flex-direction: row;\n  width: 100%;\n\n  &:hover {\n    background-color: #f0f0f0;\n    cursor: pointer;\n  }\n\n  mat-card-content {\n    min-width: 90%;\n    max-width: 90%;\n    margin-left: 7%;\n    padding: 1.7%;\n  }\n\n  mat-card-title {\n    font-size: 1.2em;\n    display: flex;\n    justify-content: space-between;\n    align-content: center;\n    margin-bottom: 0;\n  }\n\n  .scenario-options-menu {\n    position: relative;\n    bottom: 0.6em;\n  }\n\n  .verb {\n    font-weight: bold;\n    text-align: center;\n    vertical-align: 50%;\n    font-size: 0.75em;\n  }\n\n  .post {\n    min-width: 10%;\n    max-width: 10%;\n  }\n\n  .get {\n    min-width: 10%;\n    max-width: 10%;\n  }\n\n  .delete {\n    min-width: 10%;\n    max-width: 10%;\n  }\n\n  .subtitle {\n    display: flex;\n    flex-direction: row;\n    justify-content: space-between;\n    min-width: 80%;\n    max-width: 80%;\n\n    .description {\n      width: 30%;\n      word-wrap: break-word;\n    }\n  }\n}\n\n.overlay {\n  position: fixed;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 100vw;\n  height: 100vh;\n  top: 0;\n  left: 0;\n  z-index: 1;\n  background-color: rgba(0, 0, 0, 0.5);\n}\n\n.validation-type {\n  margin-left: 2.5rem;\n  margin-top: 0.25rem;\n  width: 15rem;\n}\n\n.mat-card-footer {\n  justify-content: space-between;\n  button {\n    float: right;\n    margin-right: 0.8rem;\n    background-color: #dfdfdf;\n    &:hover {\n      background-color: #b6b6b6;\n    }\n  }\n}\n\n.title {\n  display: flex;\n  place-items: lwft;\n}\n",
                    "styleUrl": "./scenario-view.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "DesignerStore",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "logger",
                        "type": "NGXLogger",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "mockDefinitionService",
                        "type": "MockDefinitionService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 44,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "DesignerStore",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "logger",
                        "type": "NGXLogger",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "mockDefinitionService",
                        "type": "MockDefinitionService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "accessors": {
                "selectedMode": {
                    "name": "selectedMode",
                    "setSignature": {
                        "name": "selectedMode",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "number",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 204,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "number",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "selectedMode",
                        "type": "number",
                        "returnType": "number",
                        "line": 200
                    }
                }
            },
            "templateData": "<div class=\"fullscreen column center-hr\">\n  <div class=\"container scenarioview\">\n    <div class=\"row\">\n      <div class=\"sidebar\">\n        <app-side-bar></app-side-bar>\n      </div>\n      <div class=\"scenarios\">\n        <div>\n          <app-overview-header [header]=\"headerContent\"></app-overview-header>\n        </div>\n        <div>\n          <app-search-bar\n            [list]=\"scenarioList\"\n            (filteredList)=\"setFilteredList($event)\"\n            [itemToStringFn]=\"scenarioToString\"\n          >\n          </app-search-bar>\n          <div *ngIf=\"dropdownVisible\">\n            <mat-form-field class=\"validation-type\">\n              <mat-label>Validation Type</mat-label>\n              <mat-select name=\"validation-type\" [(ngModel)]=\"selectedMode\" required>\n                <div *ngFor=\"let mode of modes\">\n                  <mat-option [value]=\"mode.value\">\n                    {{ mode.viewValue }}\n                  </mat-option>\n                </div>\n              </mat-select>\n            </mat-form-field>\n          </div>\n          <p id=\"notFoundMessage\" *ngIf=\"this.filteredList.length === 0\">\n            {{ this.errorMessage }}\n          </p>\n          <div id=\"scenario-list\">\n            <mat-list class=\"scenariolistcontainer\">\n              <mat-list-item *ngFor=\"let scenario of filteredList\">\n                <div id=\"scenario-list-item\">\n                  <mat-card\n                    *ngIf=\"scenario\"\n                    class=\"scenario-list-item-container min-card-height\"\n                    [routerLink]=\"this.isHoveringOverMenu ? null : ['/scenario-editor', scenario.id]\"\n                    routerLinkActive=\"is-active\"\n                  >\n                    <mat-card-content>\n                      <mat-card-title>\n                        <div>{{ scenario?.metadata.title }}</div>\n                        <div class=\"scenario-options-menu\">\n                          <button\n                            mat-icon-button\n                            [mat-menu-trigger-for]=\"menu\"\n                            aria-label=\"Example icon-button with a menu\"\n                            (mouseout)=\"this.isHoveringOverMenu = false\"\n                            (mouseover)=\"this.isHoveringOverMenu = true\"\n                          >\n                            <mat-icon>more_horiz</mat-icon>\n                          </button>\n                          <mat-menu #menu=\"matMenu\" xPosition=\"before\">\n                            <button mat-menu-item (click)=\"cloneScenario(scenario)\">\n                              <mat-icon>file_copy</mat-icon>\n                              <span>Clone</span>\n                            </button>\n                            <button mat-menu-item (click)=\"confirmDeleteDialog(scenario)\">\n                              <mat-icon>delete</mat-icon>\n                              <span>Delete</span>\n                            </button>\n                          </mat-menu>\n                        </div>\n                      </mat-card-title>\n\n                      <mat-card-subtitle>\n                        <div class=\"subtitle\">\n                          <div class=\"description\">{{ scenario?.metadata.description }}</div>\n                          <div>\n                            <div *ngIf=\"scenario.requestMatchRules.urlRules.length > 0\">\n                              URL Rules: {{ scenario.requestMatchRules.urlRules.length }}\n                            </div>\n                            <div *ngIf=\"scenario.requestMatchRules.headerRules.length > 0\">\n                              Header Rules: {{ scenario.requestMatchRules.headerRules.length }}\n                            </div>\n                            <div *ngIf=\"scenario.requestMatchRules.queryRules.length > 0\">\n                              Query Rules: {{ scenario.requestMatchRules.queryRules.length }}\n                            </div>\n                            <div *ngIf=\"scenario.requestMatchRules.bodyRules.length > 0\">\n                              Body Rules: {{ scenario.requestMatchRules.bodyRules.length }}\n                            </div>\n                            <div *ngIf=\"scenario.tokenRule.rules.length > 0\">\n                              Token Rules: {{ scenario.tokenRule.rules.length }}\n                            </div>\n                            <div *ngIf=\"scenario.policies.length > 0\">Policies: {{ scenario.policies.length }}</div>\n                          </div>\n                          <div>\n                            {{ scenario?.response.status }} |\n                            {{ getScenarioResponseStatusString(scenario) }}\n                          </div>\n                        </div>\n                      </mat-card-subtitle>\n                      <mat-card-footer>\n                        <mat-checkbox\n                          (mouseout)=\"this.isHoveringOverMenu = false\"\n                          (mouseover)=\"this.isHoveringOverMenu = true\"\n                          (change)=\"toggleDefaultScenario($event, scenario)\"\n                          [checked]=\"scenario.defaultScenario\"\n                          >Default Scenario</mat-checkbox\n                        >\n                      </mat-card-footer>\n                    </mat-card-content>\n                  </mat-card>\n\n                  <div class=\"overlay\" *ngIf=\"showDialog(scenario)\">\n                    <div class=\"confirm-scenario-delete-dialog\">\n                      <mat-card>\n                        <app-dialog-box\n                          titleText=\"Confirm Scenario Deletion\"\n                          confirmButtonText=\"DELETE\"\n                          cancelButtonText=\"CANCEL\"\n                          [bodyText]=\"getBodyText(scenario)\"\n                          (choiceBoolean)=\"onDialogAction($event, scenario)\"\n                        ></app-dialog-box>\n                      </mat-card>\n                    </div>\n                  </div>\n                </div>\n              </mat-list-item>\n            </mat-list>\n          </div>\n        </div>\n        <div class=\"footer-buttons\">\n          <button mat-raised-button color=\"primary\" (click)=\"goToEndpoints()\">Back to Endpoints</button>\n          <button (click)=\"addScenario()\" mat-raised-button color=\"primary\">Add Scenario</button>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n\n<ng-template #headerContent let-path=\"path\">\n  <div class=\"title row center\">\n    <mat-chip-list\n      ><mat-chip [style.background-color]=\"this.endpointVerb | getVerbColor\">{{\n        this.endpointVerb | getVerbString\n      }}</mat-chip>\n    </mat-chip-list>\n    <h3>\n      {{ this.endpointPath }}\n    </h3>\n  </div>\n</ng-template>\n"
        },
        {
            "name": "SearchBarComponent",
            "id": "component-SearchBarComponent-d81a82cbae2ef2c74f55947ad17f961f22cdfb459aafcd733518cc95280d3a096a398df96e3041fe01aa58d08a3d23ca066389260179b4f6987afc33f1c7129f",
            "file": "src/app/shared/components/search-bar/search-bar.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-search-bar",
            "styleUrls": [
                "./search-bar.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./search-bar.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "itemToStringFn",
                    "defaultValue": "(x: string) => x",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "function",
                    "decorators": []
                },
                {
                    "name": "list",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "[]",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "filteredList",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "EventEmitter<[]>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "input",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatInput",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "MatInput"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ignoreCaseContainsMatch",
                    "args": [
                        {
                            "name": "target",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "substring",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nReturns true if the target parameter contains the substring parameter. It sets\nboth of them to lowercase before performing the compares in order to ignore case.\n",
                    "description": "<p>Returns true if the target parameter contains the substring parameter. It sets\nboth of them to lowercase before performing the compares in order to ignore case.</p>\n",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "target",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "substring",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onSearchInput",
                    "args": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nFunction that takes a string and a list as input and filters out the mat list\nbased on the input text\n",
                    "description": "<p>Function that takes a string and a list as input and filters out the mat list\nbased on the input text</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 757,
                                "end": 762,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "value"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 751,
                                "end": 756,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>The string to be searched</p>\n"
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, OnChanges, Output, SimpleChanges, ViewChild } from '@angular/core';\nimport { MatInput } from '@angular/material/input';\n\n@Component({\n  selector: 'app-search-bar',\n  templateUrl: './search-bar.component.html',\n  styleUrls: ['./search-bar.component.scss'],\n})\nexport class SearchBarComponent implements OnChanges {\n  @Output() filteredList: EventEmitter<unknown[]>;\n  @ViewChild(MatInput) input: MatInput;\n  @Input() list: unknown[] = [];\n  @Input() itemToStringFn: (_: unknown) => string = (x: string) => x;\n  constructor() {\n    this.filteredList = new EventEmitter<unknown[]>();\n  }\n\n  /**\n   * Function that takes a string and a list as input and filters out the mat list\n   * based on the input text\n   * @param value The string to be searched\n   */\n\n  onSearchInput(value: string) {\n    this.filteredList.emit(\n      this.list.filter((option) => SearchBarComponent.ignoreCaseContainsMatch(this.itemToStringFn(option), value))\n    );\n  }\n\n  /**\n   * Returns true if the target parameter contains the substring parameter. It sets\n   * both of them to lowercase before performing the compares in order to ignore case.\n   */\n  static ignoreCaseContainsMatch(target: string, substring: string): boolean {\n    return target.toLowerCase().includes(substring.toLowerCase());\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.list) {\n      if (this.input) {\n        this.input.value = '';\n      }\n      this.onSearchInput('');\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".container {\n  display: flex;\n  flex-direction: column;\n  padding: 1em 2em;\n\n  .search-bar-div {\n    display: flex;\n    flex-direction: row;\n    box-shadow: 0px 2px 2px rgba(0, 0, 0, 0.24), 0px 0px 2px rgba(0, 0, 0, 0.12);\n    background-color: rgb(255, 255, 255);\n    padding: 0.3em;\n    input {\n      flex-grow: 1;\n    }\n\n    mat-icon {\n      color: rgba(0, 0, 0, 0.4);\n      padding-left: 0.5em;\n    }\n  }\n}\n",
                    "styleUrl": "./search-bar.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 13
            },
            "implements": [
                "OnChanges"
            ],
            "templateData": "<div class=\"container\">\n  <div class=\"search-bar-div\">\n    <mat-icon>search</mat-icon>\n    <input (keyup)=\"onSearchInput($event.target.value)\" matInput />\n  </div>\n</div>\n"
        },
        {
            "name": "ShuttleListComponent",
            "id": "component-ShuttleListComponent-91e8d6623e62ac006d1ed3129378094abfe5267e68bc0c6984db3740d650f02cee69a79a8cb266b4e8eebe92a77d0e50c7a5a02a5f37dbf9e818a93e024a790f",
            "file": "src/app/shared/components/shuttle-list/shuttle-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-shuttle-list",
            "styleUrls": [
                "./shuttle-list.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./shuttle-list.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "emptyListMessage",
                    "defaultValue": "'List is empty'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "itemToStringFn",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 31,
                    "type": "function",
                    "decorators": []
                },
                {
                    "name": "leftTitle",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "list",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "MockDefinition[]",
                    "decorators": []
                },
                {
                    "name": "noSearchResultsMessage",
                    "defaultValue": "'No search results found'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "rightTitle",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "outputList",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "EventEmitter<MockDefinition[]>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "leftList",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MockDefinition[]",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "leftSelected",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MockDefinition[]",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "rightList",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MockDefinition[]",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "rightSelected",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MockDefinition[]",
                    "optional": false,
                    "description": "",
                    "line": 29
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ncompletes event emitter\n",
                    "description": "<p>completes event emitter</p>\n"
                },
                {
                    "name": "onMoveLeft",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 73,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nResponsible for moving the selected list items form the right list to the left list\n",
                    "description": "<p>Responsible for moving the selected list items form the right list to the left list</p>\n"
                },
                {
                    "name": "onMoveRight",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nResponsible for moving the selected list items from the left list to the right list.\n",
                    "description": "<p>Responsible for moving the selected list items from the left list to the right list.</p>\n"
                },
                {
                    "name": "onSelectLeft",
                    "args": [
                        {
                            "name": "items",
                            "type": "MockDefinition[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSets the leftSelected list to the items passed into it\n",
                    "description": "<p>Sets the leftSelected list to the items passed into it</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1192,
                                "end": 1197,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "items"
                            },
                            "type": "MockDefinition[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1186,
                                "end": 1191,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>The list of items to set as selected from the left list</p>\n"
                        }
                    ]
                },
                {
                    "name": "onSelectRight",
                    "args": [
                        {
                            "name": "items",
                            "type": "MockDefinition[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSets the rightSelected list to the items passed into it\n",
                    "description": "<p>Sets the rightSelected list to the items passed into it</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1428,
                                "end": 1433,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "items"
                            },
                            "type": "MockDefinition[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1422,
                                "end": 1427,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>The list of items to set as selected from the right list</p>\n"
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, OnDestroy, Output } from '@angular/core';\nimport { MockDefinition } from 'src/app/models/mock-definition/mock-definition.model';\n\n@Component({\n  selector: 'app-shuttle-list',\n  templateUrl: './shuttle-list.component.html',\n  styleUrls: ['./shuttle-list.component.scss'],\n})\nexport class ShuttleListComponent implements OnDestroy {\n  @Input() leftTitle = '';\n  @Input() rightTitle = '';\n\n  @Output() outputList: EventEmitter<MockDefinition[]>;\n\n  @Input() set list(list: MockDefinition[]) {\n    if (list) {\n      this.leftList = list;\n      this.rightList = [];\n    }\n  }\n\n  @Input() emptyListMessage = 'List is empty';\n  @Input() noSearchResultsMessage = 'No search results found';\n\n  leftList: MockDefinition[] = [];\n  rightList: MockDefinition[] = [];\n\n  leftSelected: MockDefinition[] = [];\n  rightSelected: MockDefinition[] = [];\n\n  @Input() itemToStringFn: (_: MockDefinition) => string;\n\n  constructor() {\n    this.outputList = new EventEmitter<MockDefinition[]>();\n  }\n\n  /**\n   * completes event emitter\n   */\n  ngOnDestroy() {\n    this.outputList.complete();\n  }\n\n  /**\n   * Sets the leftSelected list to the items passed into it\n   * @param items The list of items to set as selected from the left list\n   */\n  onSelectLeft(items: MockDefinition[]): void {\n    this.leftSelected = [...items];\n  }\n\n  /**\n   * Sets the rightSelected list to the items passed into it\n   * @param items The list of items to set as selected from the right list\n   */\n  onSelectRight(items: MockDefinition[]): void {\n    this.rightSelected = [...items];\n  }\n\n  /**\n   * Responsible for moving the selected list items from the left list to the right list.\n   */\n  onMoveRight(): void {\n    this.rightList = [...this.rightList, ...this.leftSelected];\n    this.leftList = this.leftList.filter((item) => !this.leftSelected.includes(item));\n    this.leftSelected = [];\n    this.outputList.emit(this.rightList);\n  }\n\n  /**\n   * Responsible for moving the selected list items form the right list to the left list\n   */\n  onMoveLeft(): void {\n    this.leftList = [...this.leftList, ...this.rightSelected];\n    this.rightList = this.rightList.filter((item) => !this.rightSelected.includes(item));\n    this.rightSelected = [];\n    this.outputList.emit(this.rightList);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".container {\n  display: flex;\n  flex-direction: row;\n\n  .selectionList {\n    flex-grow: 1;\n    display: flex;\n    flex-direction: column;\n\n    .list-label {\n      align-self: center;\n      margin-bottom: 1em;\n      color: rgba(0, 0, 0, 0.539261);\n      font-size: 0.9em;\n      font-weight: 500;\n    }\n\n    .list-card {\n      flex-grow: 1;\n      box-shadow: 0px 19px 38px rgba(0, 0, 0, 0.3), 0px 15px 12px rgba(0, 0, 0, 0.22);\n      border-radius: 0.1em;\n    }\n  }\n\n  .button-div {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    margin: 0 1em;\n\n    button {\n      margin: 1em 0;\n    }\n  }\n}\n",
                    "styleUrl": "./shuttle-list.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 31
            },
            "implements": [
                "OnDestroy"
            ],
            "accessors": {
                "list": {
                    "name": "list",
                    "setSignature": {
                        "name": "list",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "list",
                                "type": "MockDefinition[]",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 15,
                        "jsdoctags": [
                            {
                                "name": "list",
                                "type": "MockDefinition[]",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            },
            "templateData": "<div class=\"container\">\n  <div class=\"selectionList\">\n    <label class=\"list-label\">{{ leftTitle }}</label>\n    <mat-card class=\"list-card\">\n      <app-shuttle-sub-list\n        class=\"list\"\n        [list]=\"leftList\"\n        [emptyListMessage]=\"emptyListMessage\"\n        [noSearchResultsMessage]=\"noSearchResultsMessage\"\n        (itemSelected)=\"onSelectLeft($event)\"\n      ></app-shuttle-sub-list>\n    </mat-card>\n  </div>\n  <div class=\"button-div\">\n    <button mat-raised-button color=\"primary\" (click)=\"onMoveRight()\">></button>\n    <button mat-raised-button color=\"primary\" (click)=\"onMoveLeft()\"><</button>\n  </div>\n  <div class=\"selectionList\">\n    <label class=\"list-label\">{{ rightTitle }}</label>\n    <mat-card class=\"list-card\">\n      <app-shuttle-sub-list\n        class=\"list\"\n        [list]=\"rightList\"\n        [emptyListMessage]=\"emptyListMessage\"\n        [noSearchResultsMessage]=\"noSearchResultsMessage\"\n        (itemSelected)=\"onSelectRight($event)\"\n      ></app-shuttle-sub-list\n    ></mat-card>\n  </div>\n</div>\n"
        },
        {
            "name": "ShuttleSubListComponent",
            "id": "component-ShuttleSubListComponent-decee7724fc8fd4d5109201eee0be78918953d3cb68e239e7bce185b2d023f6fe2a817316d229fd14ab76531a40497dfafdaa8bc0425d5f734239fca77ffcae4",
            "file": "src/app/shared/components/shuttle-list/shuttle-sub-list/shuttle-sub-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-shuttle-sub-list",
            "styleUrls": [
                "./shuttle-sub-list.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./shuttle-sub-list.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "emptyListMessage",
                    "defaultValue": "'List is empty'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "list",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "FormControl[]",
                    "decorators": []
                },
                {
                    "name": "noSearchResultsMessage",
                    "defaultValue": "'No search results found'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "itemSelected",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "EventEmitter<MockDefinition[]>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "deselectAllString",
                    "defaultValue": "'Deselect All'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        124,
                        144
                    ]
                },
                {
                    "name": "filteredOutOptions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatListOption[]",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "matList",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatSelectionList",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'matList'"
                        }
                    ]
                },
                {
                    "name": "selectAllString",
                    "defaultValue": "'Select All'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        124,
                        144
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "emitSearchResultsSelected",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 112,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nEmits the selected items in the search results that are visible to the user\n",
                    "description": "<p>Emits the selected items in the search results that are visible to the user</p>\n",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "hideOption",
                    "args": [
                        {
                            "name": "item",
                            "type": "MockDefinition",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nReturns true if the item should be hidden from view (filtered),\nfalse otherwise\n",
                    "description": "<p>Returns true if the item should be hidden from view (filtered),\nfalse otherwise</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2710,
                                "end": 2714,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "item"
                            },
                            "type": "MockDefinition",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2704,
                                "end": 2709,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>The item being checked against</p>\n"
                        }
                    ]
                },
                {
                    "name": "ignoreCaseContainsMatch",
                    "args": [
                        {
                            "name": "target",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "substring",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 105,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nReturns true if the target parameter contains the substring parameter. It sets\nboth of them to lowercase before performing the compares in order to ignore case.\n",
                    "description": "<p>Returns true if the target parameter contains the substring parameter. It sets\nboth of them to lowercase before performing the compares in order to ignore case.</p>\n",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "target",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "substring",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onSearchInput",
                    "args": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 86,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nfunction run that updates the filteredOptions property based on the inputs value\n",
                    "description": "<p>function run that updates the filteredOptions property based on the inputs value</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 3057,
                                "end": 3062,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "value"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 3051,
                                "end": 3056,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>The string value from the input</p>\n"
                        }
                    ]
                },
                {
                    "name": "onSelectAll",
                    "args": [
                        {
                            "name": "event",
                            "type": "MatCheckboxChange",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nA function that selects or deselects all options depending on wether the checkbox is\nbeing selected or deselected.\n",
                    "description": "<p>A function that selects or deselects all options depending on wether the checkbox is\nbeing selected or deselected.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2053,
                                "end": 2058,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "event"
                            },
                            "type": "MatCheckboxChange",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2047,
                                "end": 2052,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>The checkbox change event emitted by the select/deselect all checkbox</p>\n"
                        }
                    ]
                },
                {
                    "name": "optionSelected",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOutputs the selected items through the itemSelected emitter\n",
                    "description": "<p>Outputs the selected items through the itemSelected emitter</p>\n"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output, ViewChild } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { MatCheckboxChange } from '@angular/material/checkbox';\nimport { MatListOption, MatSelectionList } from '@angular/material/list';\nimport { MockDefinition } from 'src/app/models/mock-definition/mock-definition.model';\n\n@Component({\n  selector: 'app-shuttle-sub-list',\n  templateUrl: './shuttle-sub-list.component.html',\n  styleUrls: ['./shuttle-sub-list.component.scss'],\n})\nexport class ShuttleSubListComponent {\n  static readonly selectAllString = 'Select All';\n  static readonly deselectAllString = 'Deselect All';\n\n  filteredOutOptions: MatListOption[] = [];\n\n  @ViewChild('matList') matList: MatSelectionList;\n\n  @Output() itemSelected: EventEmitter<MockDefinition[]>;\n\n  @Input() list: FormControl[] = [];\n  @Input() emptyListMessage = 'List is empty';\n  @Input() noSearchResultsMessage = 'No search results found';\n\n  constructor() {\n    this.itemSelected = new EventEmitter<MockDefinition[]>();\n  }\n\n  /**\n   * Returns the label for the check box based upon whether or not\n   * the checkbox should be selected or not. If the check box should be selected then\n   * it returns the deselectAllString, else it returns the selectAllString\n   */\n  get checkboxLabel() {\n    return this.selectAllChecked ? ShuttleSubListComponent.deselectAllString : ShuttleSubListComponent.selectAllString;\n  }\n\n  /**\n   * Returns true if the selection check box should be marked as checked, false otherwise\n   * This is determined by checking to see if any of the options are selected. If any\n   * of the options are selected then the checkbox should be selected because it's\n   * functionality is now to deselect the selected options.\n   */\n  get selectAllChecked(): boolean {\n    return !!this.matList?.selectedOptions.selected.filter((opt) => !this.hideOption(opt.value)).length;\n  }\n\n  /**\n   * A function that selects or deselects all options depending on wether the checkbox is\n   * being selected or deselected.\n   * @param event The checkbox change event emitted by the select/deselect all checkbox\n   */\n  onSelectAll(event: MatCheckboxChange) {\n    this.matList.options.forEach(\n      (option) => (option.selected = this.hideOption(option.value) ? option.selected : event.checked)\n    );\n    this.itemSelected.emit(this.matList.selectedOptions.selected.map((option) => option.value));\n\n    this.emitSearchResultsSelected();\n  }\n\n  /**\n   * Outputs the selected items through the itemSelected emitter\n   */\n  optionSelected() {\n    this.emitSearchResultsSelected();\n  }\n\n  /**\n   * Returns true if the item should be hidden from view (filtered),\n   * false otherwise\n   * @param item The item being checked against\n   */\n  hideOption(item: MockDefinition): boolean {\n    if (this.filteredOutOptions.length > 0) {\n      return !!this.filteredOutOptions.find((option) => option.value === item);\n    }\n    return false;\n  }\n\n  /**\n   * function run that updates the filteredOptions property based on the inputs value\n   * @param value The string value from the input\n   */\n  onSearchInput(value: string) {\n    this.filteredOutOptions = this.matList.options.filter(\n      (option) => !ShuttleSubListComponent.ignoreCaseContainsMatch(option.value.value.metadata.title, value)\n    );\n    this.emitSearchResultsSelected();\n  }\n\n  get isEmpty() {\n    return this.list.length === 0;\n  }\n\n  get noSearchResults() {\n    return this.list.length > 0 && this.list.length === this.filteredOutOptions.length;\n  }\n\n  /**\n   * Returns true if the target parameter contains the substring parameter. It sets\n   * both of them to lowercase before performing the compares in order to ignore case.\n   */\n  static ignoreCaseContainsMatch(target: string, substring: string): boolean {\n    return target.toLowerCase().includes(substring.toLowerCase());\n  }\n\n  /**\n   * Emits the selected items in the search results that are visible to the user\n   */\n  private emitSearchResultsSelected() {\n    this.itemSelected.emit(\n      this.matList.selectedOptions.selected\n        .filter((e) => !this.filteredOutOptions.includes(e))\n        .filter((option) => option.selected)\n        .map((option) => option.value)\n    );\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".container {\n  display: flex;\n  flex-direction: column;\n  padding: 1em 2em;\n\n  .search-bar-div {\n    display: flex;\n    flex-direction: row;\n    box-shadow: 0px 2px 2px rgba(0, 0, 0, 0.24), 0px 0px 2px rgba(0, 0, 0, 0.12);\n    padding: 0.3em;\n    input {\n      flex-grow: 1;\n    }\n\n    mat-icon {\n      color: rgba(0, 0, 0, 0.4);\n    }\n  }\n\n  .checkbox-div {\n    padding-top: 1em;\n  }\n\n  mat-divider {\n    position: static;\n    margin-top: 0.3em;\n  }\n\n  .matList {\n    flex: 1;\n    overflow-y: scroll;\n    outline-width: 0;\n    padding-top: 0;\n\n    .emptyMessage {\n      font-size: 0.9em;\n      color: rgba(0, 0, 0, 0.6);\n      span {\n        margin: auto;\n      }\n    }\n\n    mat-list-option {\n      height: auto !important;\n\n      &.filtered {\n        display: none;\n      }\n    }\n  }\n}\n\nmat-selection-list::-webkit-scrollbar {\n  width: 5px;\n}\n\nmat-selection-list::-webkit-scrollbar-thumb {\n  background: rgba(0, 0, 0, 0.26);\n}\n\n.list-item {\n  width: 100%;\n  margin: 1em 0 !important;\n  h5 {\n    font-weight: 400;\n    font-size: 1.2em;\n    margin: 0;\n  }\n}\n",
                    "styleUrl": "./shuttle-sub-list.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 24
            },
            "accessors": {
                "checkboxLabel": {
                    "name": "checkboxLabel",
                    "getSignature": {
                        "name": "checkboxLabel",
                        "type": "",
                        "returnType": "",
                        "line": 35,
                        "rawdescription": "\n\nReturns the label for the check box based upon whether or not\nthe checkbox should be selected or not. If the check box should be selected then\nit returns the deselectAllString, else it returns the selectAllString\n",
                        "description": "<p>Returns the label for the check box based upon whether or not\nthe checkbox should be selected or not. If the check box should be selected then\nit returns the deselectAllString, else it returns the selectAllString</p>\n"
                    }
                },
                "selectAllChecked": {
                    "name": "selectAllChecked",
                    "getSignature": {
                        "name": "selectAllChecked",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 45,
                        "rawdescription": "\n\nReturns true if the selection check box should be marked as checked, false otherwise\nThis is determined by checking to see if any of the options are selected. If any\nof the options are selected then the checkbox should be selected because it's\nfunctionality is now to deselect the selected options.\n",
                        "description": "<p>Returns true if the selection check box should be marked as checked, false otherwise\nThis is determined by checking to see if any of the options are selected. If any\nof the options are selected then the checkbox should be selected because it&#39;s\nfunctionality is now to deselect the selected options.</p>\n"
                    }
                },
                "isEmpty": {
                    "name": "isEmpty",
                    "getSignature": {
                        "name": "isEmpty",
                        "type": "",
                        "returnType": "",
                        "line": 93
                    }
                },
                "noSearchResults": {
                    "name": "noSearchResults",
                    "getSignature": {
                        "name": "noSearchResults",
                        "type": "",
                        "returnType": "",
                        "line": 97
                    }
                }
            },
            "templateData": "<div class=\"container\">\n  <div class=\"search-bar-div\">\n    <mat-icon>search</mat-icon><input matInput (keyup)=\"onSearchInput($event.target.value)\" />\n  </div>\n  <div *ngIf=\"this.list.length\" class=\"checkbox-div\">\n    <mat-checkbox\n      color=\"primary\"\n      (change)=\"onSelectAll($event)\"\n      [checked]=\"selectAllChecked\"\n      [disabled]=\"noSearchResults\"\n    >\n      {{ checkboxLabel }}\n    </mat-checkbox>\n    <mat-divider></mat-divider>\n  </div>\n  <mat-selection-list #matList class=\"matList\" (selectionChange)=\"optionSelected()\">\n    <mat-list-option\n      *ngFor=\"let item of list\"\n      [value]=\"item\"\n      [ngClass]=\"{ filtered: hideOption(item) }\"\n      color=\"primary\"\n      checkboxPosition=\"before\"\n    >\n      <div class=\"list-item\">\n        <h5>{{ item.value?.metadata?.title }}</h5>\n        <mat-divider></mat-divider>\n      </div>\n    </mat-list-option>\n    <mat-list-item class=\"emptyMessage\" *ngIf=\"isEmpty\">\n      <span>{{ emptyListMessage }}</span>\n    </mat-list-item>\n    <mat-list-item class=\"emptyMessage\" *ngIf=\"noSearchResults\">\n      <span>{{ noSearchResultsMessage }}</span>\n    </mat-list-item>\n  </mat-selection-list>\n</div>\n"
        },
        {
            "name": "SideBarComponent",
            "id": "component-SideBarComponent-3870a63e9f682fe0118707fefe291bc39fd882bd00c2a9421d6c62865b3bd88a19d2ec1b780f52ace86f729134f6ad4df0a9b7024637b4360cde09a5d3dde576",
            "file": "src/app/shared/components/side-bar/side-bar.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-side-bar",
            "styleUrls": [
                "./side-bar.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./side-bar.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "mockDefinitions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MockDefinition[]",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "mockDefinitionToBeDismissed",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MockDefinition",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "selectedMockDefinition",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "title",
                    "defaultValue": "'MOCKDEFINITIONS'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "triggerOpenCancelBox",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "triggerOpenConfirmBox",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "urlToNavigateTo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 21
                }
            ],
            "methodsClass": [
                {
                    "name": "editMock",
                    "args": [
                        {
                            "name": "mockDefinition",
                            "type": "MockDefinition",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 86,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "mockDefinition",
                            "type": "MockDefinition",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isSelected",
                    "args": [
                        {
                            "name": "title",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "title",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onCancelDialogAction",
                    "args": [
                        {
                            "name": "shouldCancel",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 111,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHandles the response from the cancel box\n",
                    "description": "<p>Handles the response from the cancel box</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 3558,
                                "end": 3570,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "shouldCancel"
                            },
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 3552,
                                "end": 3557,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>The button pressed for the cancel box</p>\n"
                        }
                    ]
                },
                {
                    "name": "onConfirmDialogAction",
                    "args": [
                        {
                            "name": "shouldConfirm",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 67,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHandles the response from the confirm box\n",
                    "description": "<p>Handles the response from the confirm box</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2213,
                                "end": 2226,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "shouldConfirm"
                            },
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2207,
                                "end": 2212,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>The button pressed for the cancel box</p>\n"
                        }
                    ]
                },
                {
                    "name": "onDismiss",
                    "args": [
                        {
                            "name": "mockDefinition",
                            "type": "MockDefinition",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDismisses a Mockdefinition from the side bar view and removes it from the store\nNavigates back to homepage if the last mockdefinition is dismissed\n",
                    "description": "<p>Dismisses a Mockdefinition from the side bar view and removes it from the store\nNavigates back to homepage if the last mockdefinition is dismissed</p>\n",
                    "jsdoctags": [
                        {
                            "name": "mockDefinition",
                            "type": "MockDefinition",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "openCancelDialogOrNavigateToUrl",
                    "args": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 98,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nopens dialog to dismiss current scenario to review\n\n",
                    "description": "<p>opens dialog to dismiss current scenario to review</p>\n",
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "openDialogBox",
                    "args": [
                        {
                            "name": "mockDefinition",
                            "type": "MockDefinition",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 81,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOpens the dialog box for the Mockdefinition to be dismissed\n",
                    "description": "<p>Opens the dialog box for the Mockdefinition to be dismissed</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2698,
                                "end": 2712,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "mockDefinition"
                            },
                            "type": "MockDefinition",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2692,
                                "end": 2697,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>The Mockdefinition to be dismissed</p>\n"
                        }
                    ]
                },
                {
                    "name": "updateSelected",
                    "args": [
                        {
                            "name": "mockDefinition",
                            "type": "MockDefinition",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "mockDefinition",
                            "type": "MockDefinition",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { NGXLogger } from 'ngx-logger';\nimport { MockDefinition } from 'src/app/models/mock-definition/mock-definition.model';\nimport { recordMap } from 'src/app/models/record';\nimport { DesignerStore } from 'src/app/store/designer-store';\nimport * as uuid from 'uuid';\n\n@Component({\n  selector: 'app-side-bar',\n  templateUrl: './side-bar.component.html',\n  styleUrls: ['./side-bar.component.scss'],\n})\nexport class SideBarComponent {\n  mockDefinitions: MockDefinition[];\n  selectedMockDefinition: string;\n  title = 'MOCKDEFINITIONS';\n\n  triggerOpenConfirmBox: boolean;\n  triggerOpenCancelBox: boolean;\n  urlToNavigateTo: string;\n\n  mockDefinitionToBeDismissed: MockDefinition;\n\n  constructor(private store: DesignerStore, private router: Router, private logger: NGXLogger) {\n    this.store.state$.subscribe((state) => {\n      if (state.mockDefinition) {\n        this.mockDefinitions = recordMap(state.mockDefinitions, (md) => md);\n        this.selectedMockDefinition = state.mockDefinition.metadata.title;\n      }\n    });\n  }\n\n  // Pass a string title value selected and set it to the string title.\n  isSelected(title: string): boolean {\n    if (this.selectedMockDefinition === null) {\n      return false;\n    }\n    return title === this.selectedMockDefinition;\n  }\n\n  // Updates the value of the mock definition after selecting it.\n  // this.store.mockDefinition is set and then the state updated.\n  updateSelected(mockDefinition: MockDefinition) {\n    this.store.mockDefinition = mockDefinition;\n    this.router.navigateByUrl('/endpoint-view');\n  }\n\n  /**\n   * Dismisses a Mockdefinition from the side bar view and removes it from the store\n   * Navigates back to homepage if the last mockdefinition is dismissed\n   */\n  onDismiss(mockDefinition: MockDefinition) {\n    this.store.deleteMockDefinitionByTitle(mockDefinition.metadata.title);\n    this.logger.info('Mockdefinition Dismissed', mockDefinition);\n    if (this.mockDefinitions.length <= 0) {\n      this.router.navigate(['/']);\n    } else {\n      this.router.navigateByUrl('/endpoint-view');\n    }\n  }\n\n  /**\n   * Handles the response from the confirm box\n   * @param shouldConfirm The button pressed for the cancel box\n   */\n  onConfirmDialogAction(shouldConfirm: boolean) {\n    if (shouldConfirm) {\n      this.onDismiss(this.mockDefinitionToBeDismissed);\n      this.logger.debug('The user has confirmed Mockdefinition deletion');\n    } else {\n      this.logger.debug('The user has canceled Mockdefinition deletion');\n    }\n    this.triggerOpenConfirmBox = false;\n  }\n\n  /**\n   * Opens the dialog box for the Mockdefinition to be dismissed\n   * @param mockDefinition The Mockdefinition to be dismissed\n   */\n  openDialogBox(mockDefinition: MockDefinition) {\n    this.mockDefinitionToBeDismissed = mockDefinition;\n    this.triggerOpenConfirmBox = true;\n  }\n\n  editMock(mockDefinition: MockDefinition) {\n    if (mockDefinition.id === null || mockDefinition.id === undefined) {\n      mockDefinition.id = uuid.v4();\n      this.store.appendMockDefinition(mockDefinition);\n    }\n    this.router.navigate(['edit-mock', mockDefinition.id]);\n  }\n\n  /**\n   * opens dialog to dismiss current scenario to review\n   *\n   */\n  openCancelDialogOrNavigateToUrl(url: string) {\n    if (this.router.url.includes('scenario-editor')) {\n      this.urlToNavigateTo = url;\n      this.triggerOpenCancelBox = true;\n    } else {\n      this.router.navigate([url]);\n    }\n  }\n\n  /**\n   * Handles the response from the cancel box\n   * @param shouldCancel The button pressed for the cancel box\n   */\n  onCancelDialogAction(shouldCancel: boolean) {\n    this.logger.debug('User answer for scenario-editor cancel box', shouldCancel);\n    this.triggerOpenCancelBox = false;\n    if (shouldCancel) {\n      this.logger.debug('The user has cancelled; navigating to', this.urlToNavigateTo);\n      this.router.navigate([this.urlToNavigateTo]);\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".side-bar-container {\n  min-width: 14vw;\n  min-height: 85vh;\n  background-color: white;\n  border-right: 0.1em solid rgba(0, 0, 0, 0.12);\n  overflow-y: scroll;\n  position: sticky;\n  top: 0;\n  height: 98vh;\n  .side-bar-top {\n    min-width: 14vw;\n    display: flex;\n    justify-content: center;\n    flex-direction: column;\n    margin-bottom: 0.4vh;\n    h1 {\n      opacity: 0.54;\n      font-size: 1em;\n      margin-left: 1.5em;\n      margin-top: 2vh;\n    }\n  }\n\n  .divider {\n    width: 90% !important;\n    margin: auto;\n  }\n\n  .side-bar-middle {\n    min-width: 14vw;\n    margin-bottom: 2vh;\n\n    mat-icon {\n      opacity: 0.54;\n    }\n\n    h4 {\n      font-weight: 400;\n      padding-left: 1em;\n      width: 7.5em;\n      overflow: hidden;\n      text-overflow: ellipsis;\n    }\n\n    .selected {\n      background: #646464 !important;\n      color: white !important;\n      opacity: 1;\n\n      mat-icon {\n        opacity: 1;\n      }\n    }\n\n    .mock-name {\n      justify-content: space-between;\n\n      .mock-list-item {\n        overflow: hidden;\n        max-width: 15em;\n        cursor: pointer;\n        margin-left: 18px;\n      }\n\n      .edit-close-buttons {\n        display: inline-flex;\n        justify-content: right;\n      }\n    }\n  }\n\n  .side-bar-bottom {\n    min-width: 14vw;\n    margin-top: 1vh;\n  }\n}\n\nmat-action-list button mat-icon {\n  opacity: 0.54;\n}\n\nmat-action-list a mat-icon {\n  opacity: 0.54;\n}\n\nmat-action-list button h4 {\n  font-size: 0.9em !important;\n}\n\nmat-action-list button:hover {\n  background: #f0f0f0;\n  cursor: pointer;\n  button {\n    background: #f0f0f0;\n  }\n}\n\n.overlay {\n  position: fixed;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 100vw;\n  height: 100vh;\n  top: 0;\n  left: 0;\n  z-index: 10;\n  background-color: rgba(0, 0, 0, 0.5);\n}\n",
                    "styleUrl": "./side-bar.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "DesignerStore",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "logger",
                        "type": "NGXLogger",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 23,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "DesignerStore",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "logger",
                        "type": "NGXLogger",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<div class=\"side-bar-container\" mode=\"side\" opened>\n  <div class=\"side-bar-top\">\n    <h1>{{ title }}</h1>\n  </div>\n  <mat-divider class=\"divider\"></mat-divider>\n  <div class=\"side-bar-middle\">\n    <mat-action-list *ngIf=\"mockDefinitions\">\n      <div\n        mat-list-item\n        class=\"mock-name row center-vt\"\n        *ngFor=\"let mockDefinition of mockDefinitions\"\n        [ngClass]=\"{ selected: isSelected(mockDefinition.metadata.title) }\"\n      >\n        <div class=\"mock-list-item row center-vt\" (click)=\"updateSelected(mockDefinition)\">\n          <mat-icon mat-list-icon>insert_drive_file_outline</mat-icon>\n          <h4 mat-line>{{ mockDefinition.metadata.title }}</h4>\n        </div>\n        <div class=\"edit-close-buttons\">\n          <button class=\"edit-button\" mat-icon-button (click)=\"editMock(mockDefinition)\">\n            <mat-icon>edit</mat-icon>\n          </button>\n          <button class=\"close-button\" mat-icon-button (click)=\"openDialogBox(mockDefinition)\">\n            <mat-icon mat-list-icon>close</mat-icon>\n          </button>\n        </div>\n      </div>\n    </mat-action-list>\n  </div>\n  <mat-divider class=\"divider\"></mat-divider>\n  <div class=\"side-bar-bottom\">\n    <mat-action-list>\n      <button mat-list-item (click)=\"openCancelDialogOrNavigateToUrl('/create-new-mock')\">\n        <mat-icon mat-list-icon>add</mat-icon>\n        <h4 mat-line>Create New Mock</h4>\n      </button>\n      <button mat-list-item (click)=\"openCancelDialogOrNavigateToUrl('/import-from-file')\">\n        <mat-icon mat-list-icon>folder</mat-icon>\n        <h4 mat-line>Import From File</h4>\n      </button>\n      <button mat-list-item (click)=\"openCancelDialogOrNavigateToUrl('/export-to-server')\">\n        <mat-icon mat-list-icon>cloud_upload</mat-icon>\n        <h4 mat-line>Export Mock To Server</h4>\n      </button>\n      <button mat-list-item (click)=\"openCancelDialogOrNavigateToUrl('/import-from-server')\">\n        <mat-icon mat-list-icon>cloud_download</mat-icon>\n        <h4 mat-line>Import From Mock Server</h4>\n      </button>\n      <button mat-list-item (click)=\"openCancelDialogOrNavigateToUrl('/download-mockdefinitions')\">\n        <mat-icon mat-list-icon>arrow_downward</mat-icon>\n        <h4 mat-line>Download Mockdefinitions</h4>\n      </button>\n      <button mat-list-item (click)=\"openCancelDialogOrNavigateToUrl('/delete-from-server')\">\n        <mat-icon mat-list-icon>delete</mat-icon>\n        <h4 mat-line>Delete From Mock Server</h4>\n      </button>\n      <app-quick-export></app-quick-export>\n    </mat-action-list>\n  </div>\n</div>\n\n<div class=\"overlay\" *ngIf=\"triggerOpenConfirmBox\">\n  <div>\n    <mat-card>\n      <app-dialog-box\n        titleText=\"Confirm Mockdefinition Dismissal\"\n        confirmButtonText=\"Confirm\"\n        cancelButtonText=\"Cancel\"\n        bodyText=\"Are you sure you want to discard your Mockdefinition?\"\n        (choiceBoolean)=\"onConfirmDialogAction($event)\"\n      ></app-dialog-box>\n    </mat-card>\n  </div>\n</div>\n\n<div class=\"overlay\" *ngIf=\"triggerOpenCancelBox\">\n  <div>\n    <mat-card>\n      <app-dialog-box\n        titleText=\"Confirm Scenario Changes Discard\"\n        confirmButtonText=\"Confirm\"\n        cancelButtonText=\"Cancel\"\n        bodyText=\"Are you sure you want to discard your unsaved changes?\"\n        (choiceBoolean)=\"onCancelDialogAction($event)\"\n      ></app-dialog-box>\n    </mat-card>\n  </div>\n</div>\n"
        },
        {
            "name": "TextInputComponent",
            "id": "component-TextInputComponent-7f70a1ef3ac41c6f78655843eade2ec63c6392cc28b567ed80e5b4df64d40d8f5947f9628253284b54f8428b3e940a7d78bf4a7764da85e1ab44cfcedbb64e11",
            "file": "src/app/shared/components/text-input/text-input.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-text-input",
            "styleUrls": [
                "./text-input.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./text-input.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "control",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "FormControl",
                    "decorators": []
                },
                {
                    "name": "maxLength",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "multiLine",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "title",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "errorStateMatcher",
                    "defaultValue": "new ShowOnDirtyErrorStateMatcher()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "methodsClass": [
                {
                    "name": "getErrors",
                    "args": [],
                    "optional": false,
                    "returnType": "string[]",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setDirty",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSets the text input to dirty when it becomes out of focus. Required\nto show the error messages since the state matcher checks if the input is dirty\n",
                    "description": "<p>Sets the text input to dirty when it becomes out of focus. Required\nto show the error messages since the state matcher checks if the input is dirty</p>\n"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { ShowOnDirtyErrorStateMatcher } from '@angular/material/core';\n\n@Component({\n  selector: 'app-text-input',\n  templateUrl: './text-input.component.html',\n  styleUrls: ['./text-input.component.scss'],\n})\nexport class TextInputComponent {\n  errorStateMatcher = new ShowOnDirtyErrorStateMatcher();\n  @Input() title = '';\n  @Input() maxLength: number;\n  @Input() multiLine = false;\n  @Input() control!: FormControl;\n\n  getErrors(): string[] {\n    return this.control.errors ? Object.values(this.control.errors) : [];\n  }\n\n  /**\n   * Sets the text input to dirty when it becomes out of focus. Required\n   * to show the error messages since the state matcher checks if the input is dirty\n   */\n  setDirty() {\n    this.control.markAsDirty();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "mat-error {\n  white-space: pre-wrap;\n}\n\nmat-form-field {\n  width: 38.984vw;\n  max-width: 499px;\n  margin: auto;\n  display: flex;\n  flex-direction: column;\n}\n",
                    "styleUrl": "./text-input.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<mat-form-field *ngIf=\"!multiLine\">\n  <input\n    matInput\n    [placeholder]=\"title\"\n    [formControl]=\"control\"\n    (focusout)=\"setDirty()\"\n    [errorStateMatcher]=\"errorStateMatcher\"\n    autocomplete=\"off\"\n    [maxlength]=\"maxLength\"\n  />\n  <mat-error *ngFor=\"let error of getErrors()\">\n    {{ error }}\n  </mat-error>\n  <mat-hint *ngIf=\"maxLength\" align=\"end\">{{ control.value?.length }}/{{ maxLength }}</mat-hint>\n</mat-form-field>\n<mat-form-field *ngIf=\"multiLine\">\n  <textarea\n    matInput\n    cdkTextareaAutosize\n    cdkAutosizeMinRows=\"8\"\n    [placeholder]=\"title\"\n    [formControl]=\"control\"\n    [errorStateMatcher]=\"errorStateMatcher\"\n    autocomplete=\"off\"\n    (focusout)=\"setDirty()\"\n    [maxlength]=\"maxLength\"\n  ></textarea>\n  <mat-error *ngFor=\"let error of getErrors()\">\n    {{ error }}\n  </mat-error>\n  <mat-hint *ngIf=\"maxLength\" align=\"end\">{{ control.value?.length }}/{{ maxLength }}</mat-hint>\n</mat-form-field>\n"
        },
        {
            "name": "ToolTipComponent",
            "id": "component-ToolTipComponent-fb40dd019eb3fd167a9eccf0c14530c25a2e6c34e0b08f338e07489f0e55430055ad61ff6babba682bfef30f41d1084ef3117cd41556bc7ecbfae25fa8f698d3",
            "file": "src/app/shared/components/tooltip/tooltip.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-tooltip",
            "styleUrls": [
                "./tooltip.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./tooltip.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "delay",
                    "defaultValue": "this.default_delay",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "icon",
                    "defaultValue": "'help_outline'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "matTooltipClass",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "",
                    "decorators": []
                },
                {
                    "name": "message",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "default_delay",
                    "defaultValue": "2000",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        144
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'app-tooltip',\n  templateUrl: './tooltip.component.html',\n  styleUrls: ['./tooltip.component.scss'],\n})\nexport class ToolTipComponent {\n  readonly default_delay = 2000;\n  @Input() message!: string;\n  @Input() matTooltipClass: unknown = '';\n  @Input() icon = 'help_outline';\n  @Input() delay = this.default_delay;\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "div {\n  display: flex;\n  flex-direction: row;\n\n  ::ng-deep > *:first-child {\n    flex: 1;\n  }\n\n  mat-icon {\n    margin-left: 0.5em;\n    padding-top: 1em;\n  }\n}\n",
                    "styleUrl": "./tooltip.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<div>\n  <ng-content></ng-content>\n  <mat-icon\n    [matTooltip]=\"message\"\n    matTooltipPosition=\"after\"\n    [matTooltipHideDelay]=\"delay\"\n    [matTooltipClass]=\"matTooltipClass\"\n    >{{ icon }}</mat-icon\n  >\n</div>\n"
        },
        {
            "name": "UrlRuleFormComponent",
            "id": "component-UrlRuleFormComponent-a08a60ead0bbc95b64a37c52e20a2a07715a7d94d70e3c56ac5eec2a3fe67f1d4c86ad3a0b51688d3280b5f44d60490405ec62d15ed0b7fb52d30252a28dce99",
            "file": "src/app/shared/components/url-rule-form/url-rule-form.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => UrlRuleFormComponent), multi: true,\n}",
                    "type": "component"
                },
                {
                    "name": "{\n    provide: NG_VALIDATORS, useExisting: forwardRef(() => UrlRuleFormComponent), multi: true,\n}",
                    "type": "component"
                }
            ],
            "selector": "app-url-rule-form",
            "styleUrls": [
                "./url-rule-form.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./url-rule-form.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "itemName",
                    "defaultValue": "'URL Match Rule'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 49,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "itemNamePlural",
                    "defaultValue": "'URL Match Rules'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 50,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "form",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "itemIsDuplicatedEvent",
                    "defaultValue": "new EventEmitter<boolean>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 52
                },
                {
                    "name": "onChange",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<void>",
                    "optional": false,
                    "description": "",
                    "line": 206,
                    "modifierKind": [
                        144
                    ]
                },
                {
                    "name": "onTouched",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<void>",
                    "optional": false,
                    "description": "",
                    "line": 207,
                    "modifierKind": [
                        144
                    ]
                },
                {
                    "name": "subscriptions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription[]",
                    "optional": false,
                    "description": "",
                    "line": 200,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "addItemHandler",
                    "args": [
                        {
                            "name": "item",
                            "type": "UrlRuleItemFormValues",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 105,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThis method listens to the event emitter from the child component and adds the item into the list\n",
                    "description": "<p>This method listens to the event emitter from the child component and adds the item into the list</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 3123,
                                "end": 3127,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "item"
                            },
                            "type": "UrlRuleItemFormValues",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 3117,
                                "end": 3122,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>The item being taken in from the child component to be added</p>\n"
                        }
                    ]
                },
                {
                    "name": "cleanupSubscriptions",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 82,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "itemIsDuplicated",
                    "args": [
                        {
                            "name": "item",
                            "type": "UrlRuleItemFormValues | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 136,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nTests whether the given item already exists\n",
                    "description": "<p>Tests whether the given item already exists</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 4205,
                                "end": 4209,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "item"
                            },
                            "type": "UrlRuleItemFormValues | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 4199,
                                "end": 4204,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>the item to test</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 4233,
                                "end": 4240,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "returns"
                            },
                            "comment": "<p>true if the item is duplicated, false otherwise</p>\n"
                        }
                    ]
                },
                {
                    "name": "itemIsDuplicated",
                    "args": [
                        {
                            "name": "items",
                            "type": "UrlRuleFormValues",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "item",
                            "type": "UrlRuleItemFormValues | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 147,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nTests whether the given item already exists in the provided list\n",
                    "description": "<p>Tests whether the given item already exists in the provided list</p>\n",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 4563,
                                "end": 4568,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "items"
                            },
                            "type": "UrlRuleFormValues",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 4557,
                                "end": 4562,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>the list of items to test against</p>\n"
                        },
                        {
                            "name": {
                                "pos": 4615,
                                "end": 4619,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "item"
                            },
                            "type": "UrlRuleItemFormValues | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 4609,
                                "end": 4614,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>the item to test (should be a reference from the provided list to avoid self-duplicate detection)</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 4724,
                                "end": 4731,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "returns"
                            },
                            "comment": "<p>true if the item is duplicated, false otherwise</p>\n"
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 202,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "value",
                                    "type": "UrlRuleFormValues",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 209,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "value",
                                    "type": "UrlRuleFormValues",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": []
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 213,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeItemHandler",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 121,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHandle item removal actions triggered by a child form button\n",
                    "description": "<p>Handle item removal actions triggered by a child form button</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 3662,
                                "end": 3667,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "index"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 3656,
                                "end": 3661,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>the index of the item to remove</p>\n"
                        }
                    ]
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 90,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "subscribeToAddValueChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 73,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "validate",
                    "args": [
                        {
                            "name": "_",
                            "type": "FormControl",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ValidationErrors | null",
                    "typeParameters": [],
                    "line": 86,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "_",
                            "type": "FormControl",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "validateNoDuplicates",
                    "args": [
                        {
                            "name": "formArray",
                            "type": "FormArray",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ValidationErrors | null",
                    "typeParameters": [],
                    "line": 170,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nA reactive forms validator function that validates a FormArray containing kvp controls\n",
                    "description": "<p>A reactive forms validator function that validates a FormArray containing kvp controls</p>\n",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 5298,
                                "end": 5307,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "formArray"
                            },
                            "type": "FormArray",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 5292,
                                "end": 5297,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>the FormArray object to validate</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 5347,
                                "end": 5354,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "returns"
                            },
                            "comment": "<p>a ValidationErrors object containing any errors, or null if there are no errors</p>\n"
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "values",
                            "type": "UrlRuleFormValues | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 94,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "values",
                            "type": "UrlRuleFormValues | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectorRef, Component, EventEmitter, Input, OnDestroy, OnInit, forwardRef } from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport {\n  AbstractControl,\n  ControlValueAccessor,\n  FormArray,\n  FormBuilder,\n  FormControl,\n  FormGroup,\n  NG_VALIDATORS,\n  NG_VALUE_ACCESSOR,\n  ValidationErrors,\n  Validator,\n} from '@angular/forms';\nimport { UrlRuleItemFormComponent, UrlRuleItemFormValues } from './url-rule-item-form/url-rule-item-form.component';\n\nexport type UrlRuleFormValues = UrlRuleItemFormValues[];\n\n@Component({\n  selector: 'app-url-rule-form',\n  templateUrl: './url-rule-form.component.html',\n  styleUrls: ['./url-rule-form.component.scss'],\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => UrlRuleFormComponent),\n      multi: true,\n    },\n    {\n      provide: NG_VALIDATORS,\n      useExisting: forwardRef(() => UrlRuleFormComponent),\n      multi: true,\n    },\n  ],\n})\nexport class UrlRuleFormComponent implements ControlValueAccessor, Validator, OnInit, OnDestroy {\n  form: FormGroup;\n\n  get formArray(): FormArray {\n    // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n    return this.form.get('formArray') as FormArray;\n  }\n\n  get add(): FormControl {\n    // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n    return this.form.get('add') as FormControl;\n  }\n\n  @Input() itemName = 'URL Match Rule';\n  @Input() itemNamePlural = 'URL Match Rules';\n\n  itemIsDuplicatedEvent = new EventEmitter<boolean>();\n\n  constructor(private formBuilder: FormBuilder, private cdRef: ChangeDetectorRef) {}\n\n  ngOnInit() {\n    this.form = this.formBuilder.group({\n      add: null,\n      formArray: this.formBuilder.array([], UrlRuleFormComponent.validateNoDuplicates),\n    });\n\n    this.subscriptions.push(\n      this.formArray.valueChanges.subscribe((values: UrlRuleFormValues | null) => {\n        this.itemIsDuplicatedEvent.emit(this.itemIsDuplicated(this.add.value));\n        this.onChange.forEach((fn) => fn(values));\n        this.onTouched.forEach((fn) => fn());\n      })\n    );\n\n    this.subscribeToAddValueChanges();\n  }\n\n  subscribeToAddValueChanges() {\n    this.subscriptions.push(\n      this.add.valueChanges.subscribe((value) => {\n        this.itemIsDuplicatedEvent.emit(this.itemIsDuplicated(value));\n      })\n    );\n    this.cleanupSubscriptions();\n  }\n\n  cleanupSubscriptions() {\n    this.subscriptions = this.subscriptions.filter((s) => !s.closed);\n  }\n\n  validate(_: FormControl): ValidationErrors | null {\n    return this.formArray.valid ? null : { url_rule: true };\n  }\n\n  setDisabledState(isDisabled: boolean): void {\n    isDisabled ? this.formArray.disable() : this.formArray.enable();\n  }\n\n  writeValue(values?: UrlRuleFormValues | null): void {\n    this.formArray.clear({ emitEvent: false });\n    if (values !== null && values !== undefined) {\n      values.forEach((item) => this.formArray.push(UrlRuleItemFormComponent.buildForm(item), { emitEvent: false }));\n    }\n  }\n\n  /**\n   * This method listens to the event emitter from the child component and adds the item into the list\n   * @param item The item being taken in from the child component to be added\n   */\n  addItemHandler(item: UrlRuleItemFormValues) {\n    if (this.itemIsDuplicated(item)) {\n      this.itemIsDuplicatedEvent.emit(true);\n    } else {\n      const itemForm = UrlRuleItemFormComponent.buildForm(item);\n      this.formArray.push(itemForm);\n      this.add.reset(null, { emitEvent: false });\n      this.subscribeToAddValueChanges();\n      this.cdRef.detectChanges();\n    }\n  }\n\n  /**\n   * Handle item removal actions triggered by a child form button\n   * @param index the index of the item to remove\n   */\n  removeItemHandler(index: number) {\n    if (!this.formArray.length || index < 0 || index >= this.formArray.length) {\n      throw new Error(`Unable to remove item, index (${index}) out of bounds.`);\n    }\n    this.formArray.removeAt(index);\n    this.formArray.controls.forEach((c) => c.updateValueAndValidity());\n    this.itemIsDuplicatedEvent.emit(this.itemIsDuplicated(this.add.value ?? {}));\n    this.cdRef.detectChanges();\n  }\n\n  /**\n   * Tests whether the given item already exists\n   * @param item the item to test\n   * @returns true if the item is duplicated, false otherwise\n   */\n  itemIsDuplicated(item: UrlRuleItemFormValues | null): boolean {\n    const items = this.formArray.value ?? [];\n    return UrlRuleFormComponent.itemIsDuplicated(items, item);\n  }\n\n  /**\n   * Tests whether the given item already exists in the provided list\n   * @param items the list of items to test against\n   * @param item the item to test (should be a reference from the provided list to avoid self-duplicate detection)\n   * @returns true if the item is duplicated, false otherwise\n   */\n  static itemIsDuplicated(items: UrlRuleFormValues, item: UrlRuleItemFormValues | null): boolean {\n    if (item) {\n      for (const other of items) {\n        if (item === other) {\n          continue;\n        }\n\n        const itemIsDuplicated = item.path === other.path && item.type === other.type;\n\n        if (itemIsDuplicated) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * A reactive forms validator function that validates a FormArray containing kvp controls\n   * @param formArray the FormArray object to validate\n   * @returns a ValidationErrors object containing any errors, or null if there are no errors\n   */\n  static validateNoDuplicates(formArray: FormArray): ValidationErrors | null {\n    const items: UrlRuleFormValues = formArray.value ?? [];\n    const controls: AbstractControl[] = formArray.controls;\n    let error: ValidationErrors | null = null;\n\n    for (let i = 0; i < controls.length; i++) {\n      const control = controls[i];\n      const itemIsDuplicated = UrlRuleFormComponent.itemIsDuplicated(items, items[i]);\n\n      if (itemIsDuplicated !== control.hasError('duplicate')) {\n        if (itemIsDuplicated) {\n          error = { duplicate: 'A duplicate item exists. Duplicates are not allowed.' };\n          control.setErrors({\n            ...(control.errors ?? {}),\n            ...error,\n          });\n        } else {\n          const { duplicate: _, ...errors } = control.errors;\n          control.setErrors(Object.keys(errors).length ? errors : null);\n        }\n      }\n    }\n\n    return error;\n  }\n\n  /*\n   * Boilerplate Code Below Here\n   */\n\n  private subscriptions: Subscription[] = [];\n\n  ngOnDestroy(): void {\n    this.subscriptions.forEach((s) => s.unsubscribe());\n  }\n\n  readonly onChange: Array<(value: UrlRuleFormValues) => void> = [];\n  readonly onTouched: Array<() => void> = [];\n\n  registerOnChange(fn: (value: UrlRuleFormValues) => void): void {\n    this.onChange.push(fn);\n  }\n\n  registerOnTouched(fn: () => void): void {\n    this.onTouched.push(fn);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".item-form {\n  margin-top: 0.5rem;\n}\n\n.mat-divider {\n  margin: 1.25rem;\n}\n",
                    "styleUrl": "./url-rule-form.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cdRef",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 52,
                "jsdoctags": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cdRef",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "ControlValueAccessor",
                "Validator",
                "OnInit",
                "OnDestroy"
            ],
            "accessors": {
                "formArray": {
                    "name": "formArray",
                    "getSignature": {
                        "name": "formArray",
                        "type": "",
                        "returnType": "FormArray",
                        "line": 39
                    }
                },
                "add": {
                    "name": "add",
                    "getSignature": {
                        "name": "add",
                        "type": "",
                        "returnType": "FormControl",
                        "line": 44
                    }
                }
            },
            "templateData": "<ng-container [formGroup]=\"form\">\n  <app-url-rule-item-form\n    formControlName=\"add\"\n    title=\"Add {{ itemName }}\"\n    mode=\"add\"\n    (addItemEvent)=\"addItemHandler($event)\"\n    [itemIsDuplicatedEvent]=\"itemIsDuplicatedEvent\"\n  ></app-url-rule-item-form>\n\n  <mat-divider></mat-divider>\n\n  <div class=\"text-muted\" *ngIf=\"!formArray.controls.length\">No {{ itemNamePlural }} added</div>\n\n  <div class=\"item-form\" formArrayName=\"formArray\" *ngFor=\"let ctrl of formArray.controls; let i = index\">\n    <app-url-rule-item-form\n      [formControlName]=\"i\"\n      (removeItemEvent)=\"removeItemHandler(i)\"\n      [errors]=\"ctrl.errors | getStringErrors\"\n    ></app-url-rule-item-form>\n  </div>\n</ng-container>\n"
        },
        {
            "name": "UrlRuleItemFormComponent",
            "id": "component-UrlRuleItemFormComponent-51fbeb4b9cb7f336cdcb90ac72c8b85fd80c4978f27da861ba496e581b6063e283f644c894502e7a8a4f2764d444511dc5c435396a1494e8cfc02f3afc70e09a",
            "file": "src/app/shared/components/url-rule-form/url-rule-item-form/url-rule-item-form.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => UrlRuleItemFormComponent), multi: true,\n}",
                    "type": "component"
                },
                {
                    "name": "{\n    provide: NG_VALIDATORS, useExisting: forwardRef(() => UrlRuleItemFormComponent), multi: true,\n}",
                    "type": "component"
                }
            ],
            "selector": "app-url-rule-item-form",
            "styleUrls": [
                "./url-rule-item-form.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./url-rule-item-form.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "errors",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 55,
                    "type": "string[]",
                    "decorators": []
                },
                {
                    "name": "itemIsDuplicatedEvent",
                    "defaultValue": "new EventEmitter<boolean>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 57,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "mode",
                    "defaultValue": "'edit'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 56,
                    "type": "\"add\" | \"edit\"",
                    "decorators": []
                },
                {
                    "name": "pathMaxLength",
                    "defaultValue": "3000",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 58,
                    "type": "3000",
                    "decorators": []
                },
                {
                    "name": "title",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 54,
                    "type": "\"\"",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "addItemEvent",
                    "defaultValue": "new EventEmitter<UrlRuleItemFormValues>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 51,
                    "type": "EventEmitter"
                },
                {
                    "name": "removeItemEvent",
                    "defaultValue": "new EventEmitter<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 52,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "form",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "onChange",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<void>",
                    "optional": false,
                    "description": "",
                    "line": 171,
                    "modifierKind": [
                        144
                    ]
                },
                {
                    "name": "onTouched",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<void>",
                    "optional": false,
                    "description": "",
                    "line": 172,
                    "modifierKind": [
                        144
                    ]
                },
                {
                    "name": "ruleType",
                    "defaultValue": "RuleType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 65
                },
                {
                    "name": "ruleTypes",
                    "defaultValue": "[\n    { value: RuleType.ACCEPTALL, label: 'Accept All' },\n    { value: RuleType.REGEX, label: 'Matches Regex' },\n    { value: RuleType.TEXTEQUALS, label: 'Equals' },\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 60,
                    "modifierKind": [
                        144
                    ]
                },
                {
                    "name": "subscriptions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription[]",
                    "optional": false,
                    "description": "",
                    "line": 165,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "addItem",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 128,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "adjustFormValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "UrlRuleItemFormValues | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "UrlRuleItemFormValues | null",
                    "typeParameters": [],
                    "line": 90,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "UrlRuleItemFormValues | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "buildForm",
                    "args": [
                        {
                            "name": "item",
                            "type": "Partial<UrlRuleItemFormValues>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "FormGroup",
                    "typeParameters": [],
                    "line": 151,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "Partial<UrlRuleItemFormValues>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleDisablingPathField",
                    "args": [
                        {
                            "name": "type",
                            "type": "RuleType | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 101,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "type",
                            "type": "RuleType | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleIsDuplicatedEvent",
                    "args": [
                        {
                            "name": "isDuplicated",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 114,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "isDuplicated",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 167,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 69,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "value",
                                    "type": "UrlRuleItemFormValues",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 174,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "value",
                                    "type": "UrlRuleItemFormValues",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": []
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 178,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeItem",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 134,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 138,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "validate",
                    "args": [
                        {
                            "name": "_",
                            "type": "FormControl",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ValidationErrors | null",
                    "typeParameters": [],
                    "line": 161,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "_",
                            "type": "FormControl",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "Partial<UrlRuleItemFormValues> | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 142,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "Partial<UrlRuleItemFormValues> | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, OnDestroy, OnInit, Output, forwardRef } from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport {\n  ControlValueAccessor,\n  FormBuilder,\n  FormControl,\n  FormGroup,\n  NG_VALIDATORS,\n  NG_VALUE_ACCESSOR,\n  ValidationErrors,\n  Validator,\n  Validators,\n} from '@angular/forms';\nimport { RuleType } from 'src/app/models/mock-definition/scenario/rule-type';\n\nexport interface UrlRuleItemFormValues {\n  type: RuleType;\n  path: string;\n}\n\n@Component({\n  selector: 'app-url-rule-item-form',\n  templateUrl: './url-rule-item-form.component.html',\n  styleUrls: ['./url-rule-item-form.component.scss'],\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => UrlRuleItemFormComponent),\n      multi: true,\n    },\n    {\n      provide: NG_VALIDATORS,\n      useExisting: forwardRef(() => UrlRuleItemFormComponent),\n      multi: true,\n    },\n  ],\n})\nexport class UrlRuleItemFormComponent implements ControlValueAccessor, Validator, OnInit, OnDestroy {\n  form: FormGroup;\n\n  get type(): FormControl {\n    // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n    return this.form.get('type') as FormControl;\n  }\n\n  get path(): FormControl {\n    // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n    return this.form.get('path') as FormControl;\n  }\n\n  @Output() readonly addItemEvent = new EventEmitter<UrlRuleItemFormValues>();\n  @Output() readonly removeItemEvent = new EventEmitter<void>();\n\n  @Input() readonly title = '';\n  @Input() readonly errors: string[] = [];\n  @Input() readonly mode: 'add' | 'edit' = 'edit';\n  @Input() readonly itemIsDuplicatedEvent = new EventEmitter<boolean>();\n  @Input() readonly pathMaxLength = 3000;\n\n  readonly ruleTypes = [\n    { value: RuleType.ACCEPTALL, label: 'Accept All' },\n    { value: RuleType.REGEX, label: 'Matches Regex' },\n    { value: RuleType.TEXTEQUALS, label: 'Equals' },\n  ];\n  ruleType = RuleType;\n\n  constructor(private formBuilder: FormBuilder) {}\n\n  ngOnInit(): void {\n    this.form = this.formBuilder.group({\n      type: [null, Validators.required],\n      path: [{ value: null, disabled: true }, Validators.required],\n    });\n\n    this.subscriptions.push(\n      this.form.valueChanges.subscribe((value: UrlRuleItemFormValues | null) => {\n        const adjustedValue = this.adjustFormValue(value);\n        this.onChange.forEach((fn) => fn(adjustedValue));\n        this.onTouched.forEach((fn) => fn());\n        // Must be after the callbacks since it triggers another event on this observable\n        if (value) {\n          this.handleDisablingPathField(value.type);\n        }\n      }),\n\n      this.itemIsDuplicatedEvent.subscribe((isDuplicated) => this.handleIsDuplicatedEvent(isDuplicated))\n    );\n  }\n\n  adjustFormValue(value: UrlRuleItemFormValues | null): UrlRuleItemFormValues | null {\n    if (!value) {\n      return null;\n    }\n    const newValue = { ...value };\n    if (!value.path || value?.type === RuleType.ACCEPTALL) {\n      newValue.path = '';\n    }\n    return newValue;\n  }\n\n  handleDisablingPathField(type: RuleType | null) {\n    if (!type || type === RuleType.ACCEPTALL) {\n      if (this.path.enabled) {\n        this.path.disable();\n      }\n    } else {\n      if (this.path.disabled) {\n        this.path.enable({ emitEvent: false });\n        this.path.setValue(this.path.value);\n      }\n    }\n  }\n\n  handleIsDuplicatedEvent(isDuplicated: boolean) {\n    if (isDuplicated !== this.form.hasError('duplicate')) {\n      if (isDuplicated) {\n        this.form.setErrors({\n          ...(this.form.errors ?? {}),\n          duplicate: 'This item already exists. Duplicates are not allowed.',\n        });\n      } else {\n        const { duplicate: _, ...errors } = this.form.errors;\n        this.form.setErrors(Object.keys(errors).length ? errors : null);\n      }\n    }\n  }\n\n  addItem() {\n    if (this.form.valid) {\n      this.addItemEvent.emit(this.adjustFormValue(this.form.value));\n    }\n  }\n\n  removeItem() {\n    this.removeItemEvent.emit();\n  }\n\n  setDisabledState(isDisabled: boolean): void {\n    isDisabled ? this.form.disable() : this.form.enable();\n  }\n\n  writeValue(value?: Partial<UrlRuleItemFormValues> | null): void {\n    if (value === null || value === undefined) {\n      this.form.reset({ value: null }, { emitEvent: false });\n      this.path.disable({ emitEvent: false });\n    } else {\n      this.form.patchValue(value);\n    }\n  }\n\n  static buildForm(item: Partial<UrlRuleItemFormValues>): FormGroup {\n    // Note: this forms only needs the structure to propagate values, no functionality required\n    const fb = new FormBuilder();\n    return fb.group({ type: item.type ?? null, path: item.path ?? null });\n  }\n\n  /*\n   * Boilerplate Code Below Here\n   */\n\n  validate(_: FormControl): ValidationErrors | null {\n    return this.form.valid ? null : { url_rule_item: true };\n  }\n\n  private subscriptions: Subscription[] = [];\n\n  ngOnDestroy(): void {\n    this.subscriptions.forEach((s) => s.unsubscribe());\n  }\n\n  readonly onChange: Array<(value: UrlRuleItemFormValues) => void> = [];\n  readonly onTouched: Array<() => void> = [];\n\n  registerOnChange(fn: (value: UrlRuleItemFormValues) => void): void {\n    this.onChange.push(fn);\n  }\n\n  registerOnTouched(fn: () => void): void {\n    this.onTouched.push(fn);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".row {\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  align-items: center;\n  padding-left: 0.5rem;\n  padding-right: 0.5rem;\n}\n\n.row > * {\n  margin-right: 1rem;\n}\n\n.row > *:last-child {\n  margin-right: 0;\n}\n\n.flex-grow {\n  flex-grow: 1;\n}\n\n.flex-grow-2 {\n  flex-grow: 2;\n}\n\n.hide {\n  display: none;\n}\n\n.mat-error {\n  margin-left: 0.5rem;\n}\n\n.item-title {\n  margin-bottom: 0.5rem;\n}\n",
                    "styleUrl": "./url-rule-item-form.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 65,
                "jsdoctags": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "ControlValueAccessor",
                "Validator",
                "OnInit",
                "OnDestroy"
            ],
            "accessors": {
                "type": {
                    "name": "type",
                    "getSignature": {
                        "name": "type",
                        "type": "",
                        "returnType": "FormControl",
                        "line": 41
                    }
                },
                "path": {
                    "name": "path",
                    "getSignature": {
                        "name": "path",
                        "type": "",
                        "returnType": "FormControl",
                        "line": 46
                    }
                }
            },
            "templateData": "<mat-card [formGroup]=\"form\">\n  <div class=\"mat-h3 policy-title\" *ngIf=\"title\">{{ title }}</div>\n\n  <div class=\"row\">\n    <mat-form-field>\n      <mat-label>Match Type</mat-label>\n      <mat-select formControlName=\"type\">\n        <mat-option *ngFor=\"let ruleType of ruleTypes\" [value]=\"ruleType.value\">\n          {{ ruleType.label }}\n        </mat-option>\n      </mat-select>\n    </mat-form-field>\n\n    <mat-form-field [ngClass]=\"['flex-grow', !type.value || type.value === ruleType.ACCEPTALL ? 'hide' : '']\">\n      <input matInput formControlName=\"path\" placeholder=\"URL Path\" [maxlength]=\"pathMaxLength\" />\n      <mat-hint>{{ path.value?.length || 0 }}/{{ pathMaxLength }}</mat-hint>\n    </mat-form-field>\n\n    <button\n      mat-mini-fab\n      *ngIf=\"mode === 'add'\"\n      color=\"primary\"\n      [disabled]=\"!form.valid || !form.touched\"\n      (click)=\"addItem()\"\n    >\n      <mat-icon>add</mat-icon>\n    </button>\n    <button mat-icon-button *ngIf=\"mode === 'edit'\" color=\"warn\" (click)=\"removeItem()\">\n      <mat-icon>delete_forever</mat-icon>\n    </button>\n  </div>\n  <ng-container *ngIf=\"type.invalid && type.errors && (type.dirty || type.touched)\">\n    <mat-error *ngIf=\"type.errors.required\">The Match Type is required</mat-error>\n    <mat-error *ngFor=\"let error of type.errors | getStringErrors\">{{ error }}</mat-error>\n  </ng-container>\n  <ng-container *ngIf=\"path.invalid && path.errors && (path.dirty || path.touched)\">\n    <mat-error *ngIf=\"path.errors.required\">The Path is required</mat-error>\n    <mat-error *ngFor=\"let error of path.errors | getStringErrors\">{{ error }}</mat-error>\n  </ng-container>\n  <ng-container *ngIf=\"form.invalid && form.errors && (form.dirty || form.touched)\">\n    <mat-error *ngFor=\"let error of form.errors | getStringErrors\">{{ error }}</mat-error>\n  </ng-container>\n  <mat-error *ngFor=\"let error of errors\">{{ error }}</mat-error>\n</mat-card>\n"
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "id": "module-AppModule-ae19279e26b570781c627f8b924bc071d788f3c9f4be1abeb1d0b684af7983fbf64d67864be62b617abaf6ee77509a2b08851ee84aad88fd1f4fa386688f4828",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app.module.ts",
            "methods": [],
            "sourceCode": "import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { HttpClientModule } from '@angular/common/http';\nimport { LoggerModule, NgxLoggerLevel } from 'ngx-logger';\nimport { CommonModule } from '@angular/common';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatDividerModule } from '@angular/material/divider';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { SharedModule } from './shared/shared.module';\nimport { MaterialModule } from './shared/material.module';\nimport { GetEndpointScenariosPipe } from './pipes/get-endpoint-scenarios/get-endpoint-scenarios.pipe';\nimport { GetVerbColorPipe } from './pipes/get-verb-color/get-verb-color.pipe';\nimport { DesignerStore } from './store/designer-store';\nimport { HomeViewComponent } from './components/home-view/home-view.component';\nimport { CreateEditMockViewComponent } from './components/create-edit-mock-view/create-edit-mock-view.component';\nimport { MatListModule } from '@angular/material/list';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { ImportFromFileViewComponent } from './components/import-from-file-view/import-from-file-view.component';\nimport { ImportFromServerViewComponent } from './components/import-from-server-view/import-from-server-view.component';\nimport { EndpointViewComponent } from './components/endpoint-view/endpoint-view.component';\nimport { EndpointListComponent } from './components/endpoint-view/endpoint-list/endpoint-list.component';\nimport { OverviewHeaderComponent } from './shared/components/overview-header/overview-header.component';\nimport { EndpointListItemComponent } from './components/endpoint-view/endpoint-list-item/endpoint-list-item.component';\nimport { SideBarComponent } from './shared/components/side-bar/side-bar.component';\nimport { ScenarioViewComponent } from './components/scenario-view/scenario-view.component';\nimport { ScenarioEditorComponent } from './components/scenario-editor/scenario-editor.component';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MetadataFormComponent } from './components/scenario-editor/metadata-form/metadata-form.component';\nimport { ResponseFormComponent } from './components/scenario-editor/response-form/response-form.component';\nimport { DownloadMockdefinitionsComponent } from './components/download-mockdefinitions/download-mockdefinitions.component';\nimport { ExportToServerViewComponent } from './components/export-to-server-view/export-to-server-view.component';\nimport { GetVerbStringPipe } from './pipes/get-verb-string/get-verb-string.pipe';\nimport { GetRuleTypeStringPipe } from './pipes/get-rule-type-string/get-rule-type-string.pipe';\nimport { PoliciesFormComponent } from './components/scenario-editor/policies-form/policies-form.component';\nimport { DeleteFromServerViewComponent } from './components/delete-from-server-view/delete-from-server-view.component';\nimport { CoreModule } from './core/core.module';\nimport { NgJsonEditorModule } from 'ang-jsoneditor';\nimport { PolicyFormComponent } from './components/scenario-editor/policies-form/policy-form/policy-form.component';\nimport { BodyRuleFormComponent } from './components/scenario-editor/body-rule-form/body-rule-form.component';\nimport { BodyRuleItemFormComponent } from './components/scenario-editor/body-rule-form/body-rule-item-form/body-rule-item-form.component';\nimport { RequestFormComponent } from './components/scenario-editor/request-form/request-form.component';\n\n@NgModule({\n  declarations: [\n    MetadataFormComponent,\n    RequestFormComponent,\n    ResponseFormComponent,\n    AppComponent,\n    CreateEditMockViewComponent,\n    DeleteFromServerViewComponent,\n    DownloadMockdefinitionsComponent,\n    EndpointListComponent,\n    EndpointListItemComponent,\n    EndpointViewComponent,\n    ExportToServerViewComponent,\n    GetEndpointScenariosPipe,\n    GetRuleTypeStringPipe,\n    GetVerbColorPipe,\n    GetVerbStringPipe,\n    HomeViewComponent,\n    ImportFromFileViewComponent,\n    ImportFromServerViewComponent,\n    OverviewHeaderComponent,\n    PoliciesFormComponent,\n    PolicyFormComponent,\n    ScenarioEditorComponent,\n    ScenarioViewComponent,\n    SideBarComponent,\n    BodyRuleItemFormComponent,\n    BodyRuleFormComponent,\n  ],\n  imports: [\n    AppRoutingModule,\n    BrowserAnimationsModule,\n    BrowserModule,\n    CommonModule,\n    CoreModule,\n    HttpClientModule,\n    LoggerModule.forRoot({ level: NgxLoggerLevel.DEBUG }),\n    MaterialModule,\n    MatButtonModule,\n    MatCardModule,\n    MatChipsModule,\n    MatDividerModule,\n    MatExpansionModule,\n    MatGridListModule,\n    MatIconModule,\n    MatListModule,\n    MatMenuModule,\n    MatSnackBarModule,\n    MatTabsModule,\n    NgJsonEditorModule,\n    ReactiveFormsModule,\n    SharedModule,\n  ],\n  providers: [DesignerStore],\n  bootstrap: [AppComponent],\n})\nexport class AppModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "DesignerStore"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        },
                        {
                            "name": "BodyRuleFormComponent"
                        },
                        {
                            "name": "BodyRuleItemFormComponent"
                        },
                        {
                            "name": "CreateEditMockViewComponent"
                        },
                        {
                            "name": "DeleteFromServerViewComponent"
                        },
                        {
                            "name": "DownloadMockdefinitionsComponent"
                        },
                        {
                            "name": "EndpointListComponent"
                        },
                        {
                            "name": "EndpointListItemComponent"
                        },
                        {
                            "name": "EndpointViewComponent"
                        },
                        {
                            "name": "ExportToServerViewComponent"
                        },
                        {
                            "name": "GetEndpointScenariosPipe"
                        },
                        {
                            "name": "GetRuleTypeStringPipe"
                        },
                        {
                            "name": "GetVerbColorPipe"
                        },
                        {
                            "name": "GetVerbStringPipe"
                        },
                        {
                            "name": "HomeViewComponent"
                        },
                        {
                            "name": "ImportFromFileViewComponent"
                        },
                        {
                            "name": "ImportFromServerViewComponent"
                        },
                        {
                            "name": "MetadataFormComponent"
                        },
                        {
                            "name": "OverviewHeaderComponent"
                        },
                        {
                            "name": "PoliciesFormComponent"
                        },
                        {
                            "name": "PolicyFormComponent"
                        },
                        {
                            "name": "RequestFormComponent"
                        },
                        {
                            "name": "ResponseFormComponent"
                        },
                        {
                            "name": "ScenarioEditorComponent"
                        },
                        {
                            "name": "ScenarioViewComponent"
                        },
                        {
                            "name": "SideBarComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppRoutingModule"
                        },
                        {
                            "name": "CoreModule"
                        },
                        {
                            "name": "MaterialModule"
                        },
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "id": "module-AppRoutingModule-927a7c61d4e50b9af1a29ccfbb83b5573b35aca5ee649e9327c10d4b90a54d206d1080bede22fd7e0c9972d31ca67b6d92249c06eeb4e52a9ee32805dc3f8b70",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { OverviewRedirectService } from './services/overview-redirect/overview-redirect.service';\nimport { HomeViewComponent } from './components/home-view/home-view.component';\nimport { CreateEditMockViewComponent } from './components/create-edit-mock-view/create-edit-mock-view.component';\nimport { ImportFromFileViewComponent } from './components/import-from-file-view/import-from-file-view.component';\nimport { ImportFromServerViewComponent } from './components/import-from-server-view/import-from-server-view.component';\nimport { EndpointViewComponent } from './components/endpoint-view/endpoint-view.component';\nimport { ScenarioViewComponent } from './components/scenario-view/scenario-view.component';\nimport { ScenarioEditorComponent } from './components/scenario-editor/scenario-editor.component';\nimport { DownloadMockdefinitionsComponent } from './components/download-mockdefinitions/download-mockdefinitions.component';\nimport { ExportToServerViewComponent } from './components/export-to-server-view/export-to-server-view.component';\nimport { DeleteFromServerViewComponent } from './components/delete-from-server-view/delete-from-server-view.component';\n\nconst routes: Routes = [\n  { path: 'create-new-mock', component: CreateEditMockViewComponent },\n  { path: 'edit-mock/:uuid', component: CreateEditMockViewComponent },\n  { path: 'import-from-file', component: ImportFromFileViewComponent },\n  {\n    path: 'download-mockdefinitions',\n    component: DownloadMockdefinitionsComponent,\n  },\n  { path: 'import-from-server', component: ImportFromServerViewComponent },\n  {\n    path: 'endpoint-view',\n    component: EndpointViewComponent,\n    canActivate: [OverviewRedirectService],\n  },\n  {\n    path: 'scenario-view',\n    component: ScenarioViewComponent,\n    canActivate: [OverviewRedirectService],\n  },\n  {\n    path: 'scenario-editor/:scenarioId',\n    component: ScenarioEditorComponent,\n    canActivate: [OverviewRedirectService],\n  },\n  {\n    path: 'export-to-server',\n    component: ExportToServerViewComponent,\n    canActivate: [OverviewRedirectService],\n  },\n  { path: 'delete-from-server', component: DeleteFromServerViewComponent },\n  { path: '**', component: HomeViewComponent },\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes, { relativeLinkResolution: 'legacy' })],\n  exports: [RouterModule],\n})\nexport class AppRoutingModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "CoreModule",
            "id": "module-CoreModule-0128f9bb8043ad3b6e66d095fc56833a847d053a8b9ba3a50719efa3e5edd6e900d9699a9528917ab7d69ed9d3a5b2eba14ee17bff742af059203a44e2d0ca94",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/core/core.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule, Optional, SkipSelf } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\n@NgModule({\n  declarations: [],\n  imports: [CommonModule],\n})\nexport class CoreModule {\n  constructor(@Optional() @SkipSelf() parentModule: CoreModule) {\n    if (parentModule) {\n      throw new Error('CoreModule is already loaded. Import it in the AppModule only');\n    }\n  }\n}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "MaterialModule",
            "id": "module-MaterialModule-f9909abcb66028684df70a1bcc53466089bfe3849c63d3e728f12fe1ad918532f2ce593985b1b01fb70a596e1e2a85b3aba228e44be88390ad94edeb119f11e3",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/shared/material.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\n\nimport { A11yModule } from '@angular/cdk/a11y';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\nimport { PortalModule } from '@angular/cdk/portal';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nimport { CdkStepperModule } from '@angular/cdk/stepper';\nimport { CdkTableModule } from '@angular/cdk/table';\nimport { CdkTreeModule } from '@angular/cdk/tree';\nimport { MatAutocompleteModule } from '@angular/material/autocomplete';\nimport { MatBadgeModule } from '@angular/material/badge';\nimport { MatBottomSheetModule } from '@angular/material/bottom-sheet';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatNativeDateModule, MatRippleModule } from '@angular/material/core';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { MatDividerModule } from '@angular/material/divider';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { MatSliderModule } from '@angular/material/slider';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatStepperModule } from '@angular/material/stepper';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { MatTreeModule } from '@angular/material/tree';\n\n@NgModule({\n  exports: [\n    A11yModule,\n    DragDropModule,\n    PortalModule,\n    ScrollingModule,\n    CdkStepperModule,\n    CdkTableModule,\n    CdkTreeModule,\n    MatAutocompleteModule,\n    MatBadgeModule,\n    MatBottomSheetModule,\n    MatButtonModule,\n    MatButtonToggleModule,\n    MatCardModule,\n    MatCheckboxModule,\n    MatChipsModule,\n    MatStepperModule,\n    MatDatepickerModule,\n    MatDialogModule,\n    MatDividerModule,\n    MatExpansionModule,\n    MatGridListModule,\n    MatIconModule,\n    MatInputModule,\n    MatListModule,\n    MatMenuModule,\n    MatNativeDateModule,\n    MatPaginatorModule,\n    MatProgressBarModule,\n    MatProgressSpinnerModule,\n    MatRadioModule,\n    MatRippleModule,\n    MatSelectModule,\n    MatSidenavModule,\n    MatSliderModule,\n    MatSlideToggleModule,\n    MatSnackBarModule,\n    MatSortModule,\n    MatTableModule,\n    MatTabsModule,\n    MatToolbarModule,\n    MatTooltipModule,\n    MatTreeModule,\n  ],\n})\nexport class MaterialModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SharedModule",
            "id": "module-SharedModule-eb0b83f9614a41ce9730b1a067df221594224404b6cfe790384a681fa7fe130417455091742c77e5101390c6f65265ee7758b564e49f2093418074d0f765de36",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/shared/shared.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatButtonModule } from '@angular/material/button';\nimport { TextInputComponent } from './components/text-input/text-input.component';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { FileInputComponent } from './components/file-input/file-input.component';\nimport { MatCardModule } from '@angular/material/card';\nimport { ToolTipComponent } from './components/tooltip/tooltip.component';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { ShuttleSubListComponent } from './components/shuttle-list/shuttle-sub-list/shuttle-sub-list.component';\nimport { MatListModule } from '@angular/material/list';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { SearchBarComponent } from './components/search-bar/search-bar.component';\nimport { ShuttleListComponent } from './components/shuttle-list/shuttle-list.component';\nimport { DialogBoxComponent } from './components/dialog-box/dialog-box.component';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { QuickExportComponent } from './components/quick-export/quick-export.component';\nimport { HttpClientModule } from '@angular/common/http';\nimport { KeyValuePairFormComponent } from './components/key-value-pair-form/key-value-pair-form.component';\nimport { KeyValuePairItemFormComponent } from './components/key-value-pair-form/key-value-pair-item-form/key-value-pair-item-form.component';\nimport { GetStringErrorsPipe } from './pipes/get-string-errors/get-string-errors.pipe';\nimport { KeyValueRuleItemFormComponent } from './components/key-value-rule-form/key-value-rule-item-form/key-value-rule-item-form.component';\nimport { KeyValueRuleFormComponent } from './components/key-value-rule-form/key-value-rule-form.component';\nimport { UrlRuleItemFormComponent } from './components/url-rule-form/url-rule-item-form/url-rule-item-form.component';\nimport { UrlRuleFormComponent } from './components/url-rule-form/url-rule-form.component';\n\n@NgModule({\n  declarations: [\n    TextInputComponent,\n    FileInputComponent,\n    ToolTipComponent,\n    ShuttleSubListComponent,\n    SearchBarComponent,\n    ShuttleListComponent,\n    DialogBoxComponent,\n    QuickExportComponent,\n    KeyValuePairFormComponent,\n    KeyValuePairItemFormComponent,\n    KeyValueRuleItemFormComponent,\n    KeyValueRuleFormComponent,\n    UrlRuleItemFormComponent,\n    UrlRuleFormComponent,\n    GetStringErrorsPipe,\n  ],\n  exports: [\n    TextInputComponent,\n    FileInputComponent,\n    ToolTipComponent,\n    ShuttleSubListComponent,\n    MatInputModule,\n    MatFormFieldModule,\n    ReactiveFormsModule,\n    FormsModule,\n    MatButtonModule,\n    MatIconModule,\n    MatListModule,\n    MatProgressSpinnerModule,\n    MatSelectModule,\n    MatCheckboxModule,\n    SearchBarComponent,\n    ShuttleListComponent,\n    DialogBoxComponent,\n    MatExpansionModule,\n    QuickExportComponent,\n    KeyValuePairFormComponent,\n    KeyValuePairItemFormComponent,\n    KeyValueRuleItemFormComponent,\n    KeyValueRuleFormComponent,\n    UrlRuleItemFormComponent,\n    UrlRuleFormComponent,\n    GetStringErrorsPipe,\n  ],\n  imports: [\n    CommonModule,\n    MatTooltipModule,\n    MatInputModule,\n    MatFormFieldModule,\n    ReactiveFormsModule,\n    FormsModule,\n    MatButtonModule,\n    MatIconModule,\n    MatCardModule,\n    MatListModule,\n    MatProgressSpinnerModule,\n    MatSelectModule,\n    MatCheckboxModule,\n    MatExpansionModule,\n    HttpClientModule,\n  ],\n})\nexport class SharedModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "DialogBoxComponent"
                        },
                        {
                            "name": "FileInputComponent"
                        },
                        {
                            "name": "GetStringErrorsPipe"
                        },
                        {
                            "name": "KeyValuePairFormComponent"
                        },
                        {
                            "name": "KeyValuePairItemFormComponent"
                        },
                        {
                            "name": "KeyValueRuleFormComponent"
                        },
                        {
                            "name": "KeyValueRuleItemFormComponent"
                        },
                        {
                            "name": "QuickExportComponent"
                        },
                        {
                            "name": "SearchBarComponent"
                        },
                        {
                            "name": "ShuttleListComponent"
                        },
                        {
                            "name": "ShuttleSubListComponent"
                        },
                        {
                            "name": "TextInputComponent"
                        },
                        {
                            "name": "ToolTipComponent"
                        },
                        {
                            "name": "UrlRuleFormComponent"
                        },
                        {
                            "name": "UrlRuleItemFormComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "DialogBoxComponent"
                        },
                        {
                            "name": "FileInputComponent"
                        },
                        {
                            "name": "GetStringErrorsPipe"
                        },
                        {
                            "name": "KeyValuePairFormComponent"
                        },
                        {
                            "name": "KeyValuePairItemFormComponent"
                        },
                        {
                            "name": "KeyValueRuleFormComponent"
                        },
                        {
                            "name": "KeyValueRuleItemFormComponent"
                        },
                        {
                            "name": "QuickExportComponent"
                        },
                        {
                            "name": "SearchBarComponent"
                        },
                        {
                            "name": "ShuttleListComponent"
                        },
                        {
                            "name": "ShuttleSubListComponent"
                        },
                        {
                            "name": "TextInputComponent"
                        },
                        {
                            "name": "ToolTipComponent"
                        },
                        {
                            "name": "UrlRuleFormComponent"
                        },
                        {
                            "name": "UrlRuleItemFormComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "CreateMock",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/components/create-edit-mock-view.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "() => ({})"
            },
            {
                "name": "defaultBodyRule",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/models/mock-definition/scenario/body-rule.model.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "BodyRule",
                "defaultValue": "{\n  type: RuleType.JSONCONTAINS,\n  value: '',\n}"
            },
            {
                "name": "defaultMetadata",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/models/mock-definition/metadata.model.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Metadata",
                "defaultValue": "{\n  title: '',\n  description: '',\n}"
            },
            {
                "name": "defaultMockDefinition",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/models/mock-definition/mock-definition.model.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "MockDefinition",
                "defaultValue": "{\n  id: uuid.v4(),\n  metadata: defaultMetadata,\n  tokenValidation: false,\n  host: '',\n  basePath: '',\n  scenarios: [emptyScenario],\n  openApi: {\n    info: { title: '', version: '' },\n    paths: {},\n    swagger: '',\n  },\n}"
            },
            {
                "name": "defaultPolicy",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/models/mock-definition/scenario/policy.model.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Policy",
                "defaultValue": "{\n  type: PolicyType.NONE,\n}"
            },
            {
                "name": "defaultRequestMatchRule",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/models/mock-definition/scenario/request-match-rules.model.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "RequestMatchRules",
                "defaultValue": "{\n  headerRules: [],\n  queryRules: [],\n  bodyRules: [],\n  urlRules: [],\n}"
            },
            {
                "name": "defaultResponse",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/models/mock-definition/scenario/response.model.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Response",
                "defaultValue": "{\n  headers: {},\n  body: '',\n  status: 200,\n  type: ResponseType.CUSTOM,\n}"
            },
            {
                "name": "defaultTokenRule",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/models/mock-definition/scenario/token-rule.model.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "TokenRule",
                "defaultValue": "{\n  validationType: ValidationType.NONE,\n  rules: [],\n}"
            },
            {
                "name": "defaultUrlRule",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/models/mock-definition/scenario/url-rule.model.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "UrlRule",
                "defaultValue": "{\n  type: RuleType.TEXTEQUALS,\n  path: '',\n}"
            },
            {
                "name": "EditMock",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/components/create-edit-mock-view.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "() => ({\n  props: {\n    editMode: true,\n    formGroup: new FormGroup({\n      title: new FormControl('Test Mock'),\n      description: new FormControl('Storybook test mock!'),\n      validateToken: new FormControl(true),\n    }),\n  },\n})"
            },
            {
                "name": "emptyScenario",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/models/mock-definition/scenario/scenario.model.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Scenario",
                "defaultValue": "{\n  id: uuid.v4(),\n  metadata: defaultMetadata,\n  verb: VerbType.GET,\n  path: '',\n  response: defaultResponse,\n  requestMatchRules: defaultRequestMatchRule,\n  policies: [],\n  defaultScenario: false,\n  tokenRule: defaultTokenRule,\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  production: true,\n  apiUrl: '',\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  production: false,\n  apiUrl: 'https://localhost:5001/api/v1/OrbitalAdmin',\n}"
            },
            {
                "name": "Large",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/shared/tooltip.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "MaxLength10",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/shared/text-input.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/shared/dialog-box.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta",
                "defaultValue": "{\n  title: 'Shared/DialogBox',\n  decorators: [\n    moduleMetadata({\n      declarations: [],\n      imports: [SharedModule],\n    }),\n  ],\n  component: DialogBoxComponent,\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/components/create-edit-mock-view.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta",
                "defaultValue": "{\n  /* 👇 The title prop is optional.\n   * See https://storybook.js.org/docs/angular/configure/overview#configure-story-loading\n   * to learn how to generate automatic titles\n   */\n  title: 'Components/CreateEditMockView',\n  decorators: [\n    moduleMetadata({\n      //👇 Imports both components to allow component composition with Storybook\n      declarations: [CreateEditMockViewComponent],\n      imports: [\n        SharedModule,\n        MatCardModule,\n        MatTooltipModule,\n        BrowserAnimationsModule,\n        RouterTestingModule,\n        LoggerTestingModule,\n      ],\n      providers: [Location, DesignerStore, OpenApiSpecService, ReadFileService, MockDefinitionService],\n    }),\n  ],\n  component: CreateEditMockViewComponent,\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/shared/search-bar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta",
                "defaultValue": "{\n  title: 'Shared/User Input/Search Bar',\n  decorators: [\n    moduleMetadata({\n      //👇 Imports both components to allow component composition with Storybook\n      declarations: [],\n      imports: [SharedModule],\n    }),\n  ],\n  component: SearchBarComponent,\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/shared/overview-header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta",
                "defaultValue": "{\n  title: 'Shared/Titles/Overview Header',\n  decorators: [\n    moduleMetadata({\n      declarations: [OverviewHeaderComponent],\n      imports: [SharedModule],\n    }),\n  ],\n  component: OverviewHeaderComponent,\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/shared/shuttle-list.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta",
                "defaultValue": "{\n  title: 'Shared/ShuttleList',\n  decorators: [\n    moduleMetadata({\n      declarations: [],\n      imports: [SharedModule],\n    }),\n  ],\n  component: ShuttleListComponent,\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/shared/text-input.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta",
                "defaultValue": "{\n  title: 'Shared/User Input/Text Input',\n  decorators: [\n    moduleMetadata({\n      //👇 Imports both components to allow component composition with Storybook\n      declarations: [],\n      imports: [SharedModule],\n    }),\n  ],\n  component: TextInputComponent,\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/shared/tooltip.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta",
                "defaultValue": "{\n  title: 'Shared/ToolTip',\n  component: ToolTipComponent,\n  decorators: [\n    moduleMetadata({\n      //👇 Imports both components to allow component composition with Storybook\n      declarations: [],\n      imports: [SharedModule],\n    }),\n  ],\n  // More on argTypes: https://storybook.js.org/docs/angular/api/argtypes\n  argTypes: {\n    backgroundColor: { control: 'color' },\n  },\n}"
            },
            {
                "name": "MultiLine",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/shared/text-input.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "NoTitle",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/shared/text-input.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/shared/dialog-box.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/shared/search-bar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/shared/overview-header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/shared/shuttle-list.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/shared/tooltip.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Secondary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/shared/search-bar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Secondary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/shared/tooltip.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "SingleLine",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/shared/text-input.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "SingleLineInvalid",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/shared/text-input.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Small",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/shared/tooltip.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/shared/dialog-box.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<DialogBoxComponent>",
                "defaultValue": "(args: DialogBoxComponent) => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/shared/search-bar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<SearchBarComponent>",
                "defaultValue": "(args: SearchBarComponent) => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/shared/overview-header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<OverviewHeaderComponent>",
                "defaultValue": "(args: OverviewHeaderComponent) => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/shared/shuttle-list.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<ShuttleListComponent>",
                "defaultValue": "(args: ShuttleListComponent) => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/shared/text-input.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<TextInputComponent>",
                "defaultValue": "(args: TextInputComponent) => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/shared/tooltip.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<ToolTipComponent>",
                "defaultValue": "(args: ToolTipComponent) => ({\n  props: args,\n})"
            },
            {
                "name": "validMockDefinition",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test-files/test-mockdefinition-object.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "MockDefinition",
                "defaultValue": "{\n  scenarios: [\n    {\n      id: '72dded1d-3755-4749-9aad-f7b4d769ea57',\n      metadata: {\n        title: 'Another Scenario',\n        description: 'Another test scenario',\n      },\n      verb: 0,\n      path: '/',\n      response: {\n        headers: {},\n        status: 404,\n        body: '',\n        type: ResponseType.CUSTOM,\n      },\n      requestMatchRules: {\n        bodyRules: [],\n        headerRules: [],\n        queryRules: [],\n        urlRules: [\n          {\n            type: 5,\n            path: '/pets/12',\n          },\n        ],\n      },\n      policies: [],\n      defaultScenario: false,\n      tokenRule: defaultTokenRule,\n    },\n  ],\n  openApi: {\n    swagger: '2.0',\n    info: {\n      title: 'Simple API overview',\n      version: 'v2',\n    },\n    paths: {\n      '/': {\n        get: {\n          operationId: 'listVersionsv2',\n          summary: 'List API versions',\n          produces: ['application/json'],\n          responses: {\n            200: {\n              description: '200 300 response',\n            },\n            300: {\n              description: '200 300 response',\n            },\n          },\n        },\n      },\n      '/v2': {\n        get: {\n          operationId: 'getVersionDetailsv2',\n          summary: 'Show API version details',\n          produces: ['application/json'],\n          responses: {\n            200: {\n              description: '200 203 response',\n            },\n            203: {\n              description: '200 203 response',\n            },\n          },\n        },\n      },\n    },\n    consumes: ['application/json'],\n  },\n  id: uuid.v4(),\n  metadata: {\n    title: 'Test Mock',\n    description: 'A Test Mock',\n  },\n  tokenValidation: true,\n}"
            },
            {
                "name": "warn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "setup-jest.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "console.warn"
            },
            {
                "name": "WARN_SUPPRESSING_PATTERNS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "setup-jest.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[/Could not find Angular Material core theme/, /Could not find HammerJS/]",
                "rawdescription": "Begin warning suppression for material core and hammerjs",
                "description": "<p>Begin warning suppression for material core and hammerjs</p>\n"
            }
        ],
        "functions": [
            {
                "name": "compareRecords",
                "file": "src/app/models/record.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": true,
                "deprecationMessage": "Do not use, to be removed after refactoring code",
                "description": "<p>Performs a shallow equality check on two objects.</p>\n",
                "args": [
                    {
                        "name": "record",
                        "type": "Record",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "recordToCompare",
                        "type": "Record",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "boolean",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 549,
                            "end": 555,
                            "flags": 4194304,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "record"
                        },
                        "type": "Record",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 543,
                            "end": 548,
                            "flags": 4194304,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>The first object to compare</p>\n"
                    },
                    {
                        "name": {
                            "pos": 594,
                            "end": 609,
                            "flags": 4194304,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "recordToCompare"
                        },
                        "type": "Record",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 588,
                            "end": 593,
                            "flags": 4194304,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>The second object to compare</p>\n"
                    },
                    {
                        "tagName": {
                            "pos": 643,
                            "end": 650,
                            "flags": 4194304,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "returns"
                        },
                        "comment": "<p>true if the objects have the same keys with the same values, false otherwise</p>\n"
                    }
                ]
            },
            {
                "name": "recordMap",
                "file": "src/app/models/record.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": true,
                "deprecationMessage": "Do not use, to be removed after refactoring code",
                "description": "<p>Converts the list of records into an array, in the form of (key, value)</p>\n",
                "args": [
                    {
                        "name": "record",
                        "type": "Record",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "fn",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "TResult[]",
                "jsdoctags": [
                    {
                        "name": "record",
                        "type": "Record",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "fn",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        ],
        "typealiases": [
            {
                "name": "BodyRuleFormValues",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "BodyRuleItemFormValues[]",
                "file": "src/app/components/scenario-editor/body-rule-form/body-rule-form.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 182
            },
            {
                "name": "InternalBodyRuleItemFormValues",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "JsonBodyRule | TextBodyRule",
                "file": "src/app/components/scenario-editor/body-rule-form/body-rule-item-form/body-rule-item-form.types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 186
            },
            {
                "name": "InternalRuleType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "Pick<TextBodyRule | \"ruleType\" | \"ruleCondition\"> | Pick<JsonBodyRule | \"ruleType\" | \"ruleCondition\">",
                "file": "src/app/components/scenario-editor/body-rule-form/body-rule-item-form/body-rule-item-form.types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 186
            },
            {
                "name": "KeyValuePairFormValues",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "KeyValuePairItemFormValues[]",
                "file": "src/app/shared/components/key-value-pair-form/key-value-pair-form.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 182
            },
            {
                "name": "KeyValueRuleFormValues",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "KeyValueRuleItemFormValues[]",
                "file": "src/app/shared/components/key-value-rule-form/key-value-rule-form.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 182
            },
            {
                "name": "PartialPoliciesFormValues",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "Partial<PolicyFormValues>[]",
                "file": "src/app/components/scenario-editor/policies-form/policies-form.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 182
            },
            {
                "name": "PoliciesFormValues",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "PolicyFormValues[]",
                "file": "src/app/components/scenario-editor/policies-form/policies-form.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 182
            },
            {
                "name": "Policy",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "DelayResponsePolicy | NonePolicy",
                "file": "src/app/models/mock-definition/scenario/policy.model.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 186
            },
            {
                "name": "PolicyFormValues",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "DelayResponsePolicy",
                "file": "src/app/components/scenario-editor/policies-form/policy-form/policy-form.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 177
            },
            {
                "name": "UrlRuleFormValues",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "UrlRuleItemFormValues[]",
                "file": "src/app/shared/components/url-rule-form/url-rule-form.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 182
            }
        ],
        "enumerations": [
            {
                "name": "BodyRuleType",
                "childs": [
                    {
                        "name": "JSON",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": 1
                    },
                    {
                        "name": "TEXT",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/components/scenario-editor/body-rule-form/body-rule-item-form/body-rule-item-form.types.ts"
            },
            {
                "name": "JsonRuleCondition",
                "childs": [
                    {
                        "name": "PATH",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": 0
                    },
                    {
                        "name": "EQUALITY",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "CONTAINS",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "SCHEMA",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/components/scenario-editor/body-rule-form/body-rule-item-form/body-rule-item-form.types.ts"
            },
            {
                "name": "PolicyType",
                "childs": [
                    {
                        "name": "NONE",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": 0
                    },
                    {
                        "name": "DELAY_RESPONSE",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Enum representation for different policies</p>\n",
                "file": "src/app/models/mock-definition/scenario/policy-type.ts"
            },
            {
                "name": "ResponseType",
                "childs": [
                    {
                        "name": "NONE",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": 0
                    },
                    {
                        "name": "CUSTOM",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "TEMPLATED",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Enum representation for different response types</p>\n",
                "file": "src/app/models/mock-definition/scenario/response-type.ts"
            },
            {
                "name": "RuleType",
                "childs": [
                    {
                        "name": "NONE",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": 0
                    },
                    {
                        "name": "REGEX",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "TEXTSTARTSWITH",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "TEXTENDSWITH",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "TEXTCONTAINS",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "TEXTEQUALS",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "JSONPATH",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "JSONEQUALITY",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "JSONCONTAINS",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "JSONSCHEMA",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "ACCEPTALL",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Enum representation for different comparers</p>\n",
                "file": "src/app/models/mock-definition/scenario/rule-type.ts"
            },
            {
                "name": "TextRuleCondition",
                "childs": [
                    {
                        "name": "STARTS_WITH",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": 0
                    },
                    {
                        "name": "ENDS_WITH",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "CONTAINS",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "EQUALS",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/components/scenario-editor/body-rule-form/body-rule-item-form/body-rule-item-form.types.ts"
            },
            {
                "name": "ValidationType",
                "childs": [
                    {
                        "name": "NONE",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "JWT_VALIDATION",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "JWT_VALIDATION_AND_REQUEST_MATCH",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "CONTENT",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/models/mock-definition/scenario/token-rule.model.ts"
            },
            {
                "name": "VerbType",
                "childs": [
                    {
                        "name": "GET",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": 0
                    },
                    {
                        "name": "PUT",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": 1
                    },
                    {
                        "name": "DELETE",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": 2
                    },
                    {
                        "name": "POST",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": 3
                    },
                    {
                        "name": "HEAD",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": 4
                    },
                    {
                        "name": "TRACE",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": 5
                    },
                    {
                        "name": "PATCH",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": 6
                    },
                    {
                        "name": "CONNECT",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": 7
                    },
                    {
                        "name": "OPTIONS",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": 8
                    },
                    {
                        "name": "CUSTOM",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": 9
                    },
                    {
                        "name": "NONE",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": 255
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Enum representation of different type of http verb</p>\n",
                "file": "src/app/models/verb-type.ts"
            }
        ],
        "groupedVariables": {
            "src/stories/components/create-edit-mock-view.stories.ts": [
                {
                    "name": "CreateMock",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/components/create-edit-mock-view.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "() => ({})"
                },
                {
                    "name": "EditMock",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/components/create-edit-mock-view.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "() => ({\n  props: {\n    editMode: true,\n    formGroup: new FormGroup({\n      title: new FormControl('Test Mock'),\n      description: new FormControl('Storybook test mock!'),\n      validateToken: new FormControl(true),\n    }),\n  },\n})"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/components/create-edit-mock-view.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta",
                    "defaultValue": "{\n  /* 👇 The title prop is optional.\n   * See https://storybook.js.org/docs/angular/configure/overview#configure-story-loading\n   * to learn how to generate automatic titles\n   */\n  title: 'Components/CreateEditMockView',\n  decorators: [\n    moduleMetadata({\n      //👇 Imports both components to allow component composition with Storybook\n      declarations: [CreateEditMockViewComponent],\n      imports: [\n        SharedModule,\n        MatCardModule,\n        MatTooltipModule,\n        BrowserAnimationsModule,\n        RouterTestingModule,\n        LoggerTestingModule,\n      ],\n      providers: [Location, DesignerStore, OpenApiSpecService, ReadFileService, MockDefinitionService],\n    }),\n  ],\n  component: CreateEditMockViewComponent,\n}"
                }
            ],
            "src/app/models/mock-definition/scenario/body-rule.model.ts": [
                {
                    "name": "defaultBodyRule",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/models/mock-definition/scenario/body-rule.model.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BodyRule",
                    "defaultValue": "{\n  type: RuleType.JSONCONTAINS,\n  value: '',\n}"
                }
            ],
            "src/app/models/mock-definition/metadata.model.ts": [
                {
                    "name": "defaultMetadata",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/models/mock-definition/metadata.model.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Metadata",
                    "defaultValue": "{\n  title: '',\n  description: '',\n}"
                }
            ],
            "src/app/models/mock-definition/mock-definition.model.ts": [
                {
                    "name": "defaultMockDefinition",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/models/mock-definition/mock-definition.model.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MockDefinition",
                    "defaultValue": "{\n  id: uuid.v4(),\n  metadata: defaultMetadata,\n  tokenValidation: false,\n  host: '',\n  basePath: '',\n  scenarios: [emptyScenario],\n  openApi: {\n    info: { title: '', version: '' },\n    paths: {},\n    swagger: '',\n  },\n}"
                }
            ],
            "src/app/models/mock-definition/scenario/policy.model.ts": [
                {
                    "name": "defaultPolicy",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/models/mock-definition/scenario/policy.model.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Policy",
                    "defaultValue": "{\n  type: PolicyType.NONE,\n}"
                }
            ],
            "src/app/models/mock-definition/scenario/request-match-rules.model.ts": [
                {
                    "name": "defaultRequestMatchRule",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/models/mock-definition/scenario/request-match-rules.model.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "RequestMatchRules",
                    "defaultValue": "{\n  headerRules: [],\n  queryRules: [],\n  bodyRules: [],\n  urlRules: [],\n}"
                }
            ],
            "src/app/models/mock-definition/scenario/response.model.ts": [
                {
                    "name": "defaultResponse",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/models/mock-definition/scenario/response.model.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Response",
                    "defaultValue": "{\n  headers: {},\n  body: '',\n  status: 200,\n  type: ResponseType.CUSTOM,\n}"
                }
            ],
            "src/app/models/mock-definition/scenario/token-rule.model.ts": [
                {
                    "name": "defaultTokenRule",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/models/mock-definition/scenario/token-rule.model.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TokenRule",
                    "defaultValue": "{\n  validationType: ValidationType.NONE,\n  rules: [],\n}"
                }
            ],
            "src/app/models/mock-definition/scenario/url-rule.model.ts": [
                {
                    "name": "defaultUrlRule",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/models/mock-definition/scenario/url-rule.model.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "UrlRule",
                    "defaultValue": "{\n  type: RuleType.TEXTEQUALS,\n  path: '',\n}"
                }
            ],
            "src/app/models/mock-definition/scenario/scenario.model.ts": [
                {
                    "name": "emptyScenario",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/models/mock-definition/scenario/scenario.model.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Scenario",
                    "defaultValue": "{\n  id: uuid.v4(),\n  metadata: defaultMetadata,\n  verb: VerbType.GET,\n  path: '',\n  response: defaultResponse,\n  requestMatchRules: defaultRequestMatchRule,\n  policies: [],\n  defaultScenario: false,\n  tokenRule: defaultTokenRule,\n}"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  production: true,\n  apiUrl: '',\n}"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  production: false,\n  apiUrl: 'https://localhost:5001/api/v1/OrbitalAdmin',\n}"
                }
            ],
            "src/stories/shared/tooltip.stories.ts": [
                {
                    "name": "Large",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/shared/tooltip.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/shared/tooltip.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta",
                    "defaultValue": "{\n  title: 'Shared/ToolTip',\n  component: ToolTipComponent,\n  decorators: [\n    moduleMetadata({\n      //👇 Imports both components to allow component composition with Storybook\n      declarations: [],\n      imports: [SharedModule],\n    }),\n  ],\n  // More on argTypes: https://storybook.js.org/docs/angular/api/argtypes\n  argTypes: {\n    backgroundColor: { control: 'color' },\n  },\n}"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/shared/tooltip.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Secondary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/shared/tooltip.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Small",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/shared/tooltip.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/shared/tooltip.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<ToolTipComponent>",
                    "defaultValue": "(args: ToolTipComponent) => ({\n  props: args,\n})"
                }
            ],
            "src/stories/shared/text-input.stories.ts": [
                {
                    "name": "MaxLength10",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/shared/text-input.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/shared/text-input.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta",
                    "defaultValue": "{\n  title: 'Shared/User Input/Text Input',\n  decorators: [\n    moduleMetadata({\n      //👇 Imports both components to allow component composition with Storybook\n      declarations: [],\n      imports: [SharedModule],\n    }),\n  ],\n  component: TextInputComponent,\n}"
                },
                {
                    "name": "MultiLine",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/shared/text-input.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "NoTitle",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/shared/text-input.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "SingleLine",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/shared/text-input.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "SingleLineInvalid",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/shared/text-input.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/shared/text-input.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<TextInputComponent>",
                    "defaultValue": "(args: TextInputComponent) => ({\n  props: args,\n})"
                }
            ],
            "src/stories/shared/dialog-box.stories.ts": [
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/shared/dialog-box.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta",
                    "defaultValue": "{\n  title: 'Shared/DialogBox',\n  decorators: [\n    moduleMetadata({\n      declarations: [],\n      imports: [SharedModule],\n    }),\n  ],\n  component: DialogBoxComponent,\n}"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/shared/dialog-box.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/shared/dialog-box.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<DialogBoxComponent>",
                    "defaultValue": "(args: DialogBoxComponent) => ({\n  props: args,\n})"
                }
            ],
            "src/stories/shared/search-bar.stories.ts": [
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/shared/search-bar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta",
                    "defaultValue": "{\n  title: 'Shared/User Input/Search Bar',\n  decorators: [\n    moduleMetadata({\n      //👇 Imports both components to allow component composition with Storybook\n      declarations: [],\n      imports: [SharedModule],\n    }),\n  ],\n  component: SearchBarComponent,\n}"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/shared/search-bar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Secondary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/shared/search-bar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/shared/search-bar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<SearchBarComponent>",
                    "defaultValue": "(args: SearchBarComponent) => ({\n  props: args,\n})"
                }
            ],
            "src/stories/shared/overview-header.stories.ts": [
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/shared/overview-header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta",
                    "defaultValue": "{\n  title: 'Shared/Titles/Overview Header',\n  decorators: [\n    moduleMetadata({\n      declarations: [OverviewHeaderComponent],\n      imports: [SharedModule],\n    }),\n  ],\n  component: OverviewHeaderComponent,\n}"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/shared/overview-header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/shared/overview-header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<OverviewHeaderComponent>",
                    "defaultValue": "(args: OverviewHeaderComponent) => ({\n  props: args,\n})"
                }
            ],
            "src/stories/shared/shuttle-list.stories.ts": [
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/shared/shuttle-list.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta",
                    "defaultValue": "{\n  title: 'Shared/ShuttleList',\n  decorators: [\n    moduleMetadata({\n      declarations: [],\n      imports: [SharedModule],\n    }),\n  ],\n  component: ShuttleListComponent,\n}"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/shared/shuttle-list.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/shared/shuttle-list.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<ShuttleListComponent>",
                    "defaultValue": "(args: ShuttleListComponent) => ({\n  props: args,\n})"
                }
            ],
            "src/test-files/test-mockdefinition-object.ts": [
                {
                    "name": "validMockDefinition",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test-files/test-mockdefinition-object.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MockDefinition",
                    "defaultValue": "{\n  scenarios: [\n    {\n      id: '72dded1d-3755-4749-9aad-f7b4d769ea57',\n      metadata: {\n        title: 'Another Scenario',\n        description: 'Another test scenario',\n      },\n      verb: 0,\n      path: '/',\n      response: {\n        headers: {},\n        status: 404,\n        body: '',\n        type: ResponseType.CUSTOM,\n      },\n      requestMatchRules: {\n        bodyRules: [],\n        headerRules: [],\n        queryRules: [],\n        urlRules: [\n          {\n            type: 5,\n            path: '/pets/12',\n          },\n        ],\n      },\n      policies: [],\n      defaultScenario: false,\n      tokenRule: defaultTokenRule,\n    },\n  ],\n  openApi: {\n    swagger: '2.0',\n    info: {\n      title: 'Simple API overview',\n      version: 'v2',\n    },\n    paths: {\n      '/': {\n        get: {\n          operationId: 'listVersionsv2',\n          summary: 'List API versions',\n          produces: ['application/json'],\n          responses: {\n            200: {\n              description: '200 300 response',\n            },\n            300: {\n              description: '200 300 response',\n            },\n          },\n        },\n      },\n      '/v2': {\n        get: {\n          operationId: 'getVersionDetailsv2',\n          summary: 'Show API version details',\n          produces: ['application/json'],\n          responses: {\n            200: {\n              description: '200 203 response',\n            },\n            203: {\n              description: '200 203 response',\n            },\n          },\n        },\n      },\n    },\n    consumes: ['application/json'],\n  },\n  id: uuid.v4(),\n  metadata: {\n    title: 'Test Mock',\n    description: 'A Test Mock',\n  },\n  tokenValidation: true,\n}"
                }
            ],
            "setup-jest.ts": [
                {
                    "name": "warn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "setup-jest.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "console.warn"
                },
                {
                    "name": "WARN_SUPPRESSING_PATTERNS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "setup-jest.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[/Could not find Angular Material core theme/, /Could not find HammerJS/]",
                    "rawdescription": "Begin warning suppression for material core and hammerjs",
                    "description": "<p>Begin warning suppression for material core and hammerjs</p>\n"
                }
            ]
        },
        "groupedFunctions": {
            "src/app/models/record.ts": [
                {
                    "name": "compareRecords",
                    "file": "src/app/models/record.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": true,
                    "deprecationMessage": "Do not use, to be removed after refactoring code",
                    "description": "<p>Performs a shallow equality check on two objects.</p>\n",
                    "args": [
                        {
                            "name": "record",
                            "type": "Record",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "recordToCompare",
                            "type": "Record",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "boolean",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 549,
                                "end": 555,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "record"
                            },
                            "type": "Record",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 543,
                                "end": 548,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>The first object to compare</p>\n"
                        },
                        {
                            "name": {
                                "pos": 594,
                                "end": 609,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "recordToCompare"
                            },
                            "type": "Record",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 588,
                                "end": 593,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>The second object to compare</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 643,
                                "end": 650,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "returns"
                            },
                            "comment": "<p>true if the objects have the same keys with the same values, false otherwise</p>\n"
                        }
                    ]
                },
                {
                    "name": "recordMap",
                    "file": "src/app/models/record.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": true,
                    "deprecationMessage": "Do not use, to be removed after refactoring code",
                    "description": "<p>Converts the list of records into an array, in the form of (key, value)</p>\n",
                    "args": [
                        {
                            "name": "record",
                            "type": "Record",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "fn",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "TResult[]",
                    "jsdoctags": [
                        {
                            "name": "record",
                            "type": "Record",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "fn",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        "groupedEnumerations": {
            "src/app/components/scenario-editor/body-rule-form/body-rule-item-form/body-rule-item-form.types.ts": [
                {
                    "name": "BodyRuleType",
                    "childs": [
                        {
                            "name": "JSON",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": 1
                        },
                        {
                            "name": "TEXT",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/components/scenario-editor/body-rule-form/body-rule-item-form/body-rule-item-form.types.ts"
                },
                {
                    "name": "JsonRuleCondition",
                    "childs": [
                        {
                            "name": "PATH",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": 0
                        },
                        {
                            "name": "EQUALITY",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "CONTAINS",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "SCHEMA",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/components/scenario-editor/body-rule-form/body-rule-item-form/body-rule-item-form.types.ts"
                },
                {
                    "name": "TextRuleCondition",
                    "childs": [
                        {
                            "name": "STARTS_WITH",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": 0
                        },
                        {
                            "name": "ENDS_WITH",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "CONTAINS",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "EQUALS",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/components/scenario-editor/body-rule-form/body-rule-item-form/body-rule-item-form.types.ts"
                }
            ],
            "src/app/models/mock-definition/scenario/policy-type.ts": [
                {
                    "name": "PolicyType",
                    "childs": [
                        {
                            "name": "NONE",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": 0
                        },
                        {
                            "name": "DELAY_RESPONSE",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Enum representation for different policies</p>\n",
                    "file": "src/app/models/mock-definition/scenario/policy-type.ts"
                }
            ],
            "src/app/models/mock-definition/scenario/response-type.ts": [
                {
                    "name": "ResponseType",
                    "childs": [
                        {
                            "name": "NONE",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": 0
                        },
                        {
                            "name": "CUSTOM",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "TEMPLATED",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Enum representation for different response types</p>\n",
                    "file": "src/app/models/mock-definition/scenario/response-type.ts"
                }
            ],
            "src/app/models/mock-definition/scenario/rule-type.ts": [
                {
                    "name": "RuleType",
                    "childs": [
                        {
                            "name": "NONE",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": 0
                        },
                        {
                            "name": "REGEX",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "TEXTSTARTSWITH",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "TEXTENDSWITH",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "TEXTCONTAINS",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "TEXTEQUALS",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "JSONPATH",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "JSONEQUALITY",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "JSONCONTAINS",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "JSONSCHEMA",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "ACCEPTALL",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Enum representation for different comparers</p>\n",
                    "file": "src/app/models/mock-definition/scenario/rule-type.ts"
                }
            ],
            "src/app/models/mock-definition/scenario/token-rule.model.ts": [
                {
                    "name": "ValidationType",
                    "childs": [
                        {
                            "name": "NONE",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "JWT_VALIDATION",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "JWT_VALIDATION_AND_REQUEST_MATCH",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "CONTENT",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/models/mock-definition/scenario/token-rule.model.ts"
                }
            ],
            "src/app/models/verb-type.ts": [
                {
                    "name": "VerbType",
                    "childs": [
                        {
                            "name": "GET",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": 0
                        },
                        {
                            "name": "PUT",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": 1
                        },
                        {
                            "name": "DELETE",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": 2
                        },
                        {
                            "name": "POST",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": 3
                        },
                        {
                            "name": "HEAD",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": 4
                        },
                        {
                            "name": "TRACE",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": 5
                        },
                        {
                            "name": "PATCH",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": 6
                        },
                        {
                            "name": "CONNECT",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": 7
                        },
                        {
                            "name": "OPTIONS",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": 8
                        },
                        {
                            "name": "CUSTOM",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": 9
                        },
                        {
                            "name": "NONE",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": 255
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Enum representation of different type of http verb</p>\n",
                    "file": "src/app/models/verb-type.ts"
                }
            ]
        },
        "groupedTypeAliases": {
            "src/app/components/scenario-editor/body-rule-form/body-rule-form.component.ts": [
                {
                    "name": "BodyRuleFormValues",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "BodyRuleItemFormValues[]",
                    "file": "src/app/components/scenario-editor/body-rule-form/body-rule-form.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 182
                }
            ],
            "src/app/components/scenario-editor/body-rule-form/body-rule-item-form/body-rule-item-form.types.ts": [
                {
                    "name": "InternalBodyRuleItemFormValues",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "JsonBodyRule | TextBodyRule",
                    "file": "src/app/components/scenario-editor/body-rule-form/body-rule-item-form/body-rule-item-form.types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 186
                },
                {
                    "name": "InternalRuleType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "Pick<TextBodyRule | \"ruleType\" | \"ruleCondition\"> | Pick<JsonBodyRule | \"ruleType\" | \"ruleCondition\">",
                    "file": "src/app/components/scenario-editor/body-rule-form/body-rule-item-form/body-rule-item-form.types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 186
                }
            ],
            "src/app/shared/components/key-value-pair-form/key-value-pair-form.component.ts": [
                {
                    "name": "KeyValuePairFormValues",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "KeyValuePairItemFormValues[]",
                    "file": "src/app/shared/components/key-value-pair-form/key-value-pair-form.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 182
                }
            ],
            "src/app/shared/components/key-value-rule-form/key-value-rule-form.component.ts": [
                {
                    "name": "KeyValueRuleFormValues",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "KeyValueRuleItemFormValues[]",
                    "file": "src/app/shared/components/key-value-rule-form/key-value-rule-form.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 182
                }
            ],
            "src/app/components/scenario-editor/policies-form/policies-form.component.ts": [
                {
                    "name": "PartialPoliciesFormValues",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "Partial<PolicyFormValues>[]",
                    "file": "src/app/components/scenario-editor/policies-form/policies-form.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 182
                },
                {
                    "name": "PoliciesFormValues",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "PolicyFormValues[]",
                    "file": "src/app/components/scenario-editor/policies-form/policies-form.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 182
                }
            ],
            "src/app/models/mock-definition/scenario/policy.model.ts": [
                {
                    "name": "Policy",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "DelayResponsePolicy | NonePolicy",
                    "file": "src/app/models/mock-definition/scenario/policy.model.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 186
                }
            ],
            "src/app/components/scenario-editor/policies-form/policy-form/policy-form.component.ts": [
                {
                    "name": "PolicyFormValues",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "DelayResponsePolicy",
                    "file": "src/app/components/scenario-editor/policies-form/policy-form/policy-form.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 177
                }
            ],
            "src/app/shared/components/url-rule-form/url-rule-form.component.ts": [
                {
                    "name": "UrlRuleFormValues",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "UrlRuleItemFormValues[]",
                    "file": "src/app/shared/components/url-rule-form/url-rule-form.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 182
                }
            ]
        }
    },
    "routes": {
        "name": "<root>",
        "kind": "module",
        "className": "AppModule",
        "children": [
            {
                "name": "routes",
                "filename": "src/app/app-routing.module.ts",
                "module": "AppRoutingModule",
                "children": [
                    {
                        "path": "create-new-mock",
                        "component": "CreateEditMockViewComponent"
                    },
                    {
                        "path": "edit-mock/:uuid",
                        "component": "CreateEditMockViewComponent"
                    },
                    {
                        "path": "import-from-file",
                        "component": "ImportFromFileViewComponent"
                    },
                    {
                        "path": "download-mockdefinitions",
                        "component": "DownloadMockdefinitionsComponent"
                    },
                    {
                        "path": "import-from-server",
                        "component": "ImportFromServerViewComponent"
                    },
                    {
                        "path": "endpoint-view",
                        "component": "EndpointViewComponent",
                        "canActivate": [
                            "OverviewRedirectService"
                        ]
                    },
                    {
                        "path": "scenario-view",
                        "component": "ScenarioViewComponent",
                        "canActivate": [
                            "OverviewRedirectService"
                        ]
                    },
                    {
                        "path": "scenario-editor/:scenarioId",
                        "component": "ScenarioEditorComponent",
                        "canActivate": [
                            "OverviewRedirectService"
                        ]
                    },
                    {
                        "path": "export-to-server",
                        "component": "ExportToServerViewComponent",
                        "canActivate": [
                            "OverviewRedirectService"
                        ]
                    },
                    {
                        "path": "delete-from-server",
                        "component": "DeleteFromServerViewComponent"
                    },
                    {
                        "path": "**",
                        "component": "HomeViewComponent"
                    }
                ],
                "kind": "module"
            }
        ]
    },
    "coverage": {
        "count": 11,
        "status": "low",
        "files": [
            {
                "filePath": "setup-jest.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "warn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "setup-jest.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WARN_SUPPRESSING_PATTERNS",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/create-edit-mock-view/create-edit-mock-view.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CreateEditMockViewComponent",
                "coveragePercent": 20,
                "coverageCount": "5/25",
                "status": "low"
            },
            {
                "filePath": "src/app/components/delete-from-server-view/delete-from-server-view.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DeleteFromServerViewComponent",
                "coveragePercent": 25,
                "coverageCount": "8/31",
                "status": "low"
            },
            {
                "filePath": "src/app/components/download-mockdefinitions/download-mockdefinitions.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DownloadMockdefinitionsComponent",
                "coveragePercent": 30,
                "coverageCount": "4/13",
                "status": "medium"
            },
            {
                "filePath": "src/app/components/endpoint-view/endpoint-list-item/endpoint-list-item.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "EndpointListItemComponent",
                "coveragePercent": 20,
                "coverageCount": "1/5",
                "status": "low"
            },
            {
                "filePath": "src/app/components/endpoint-view/endpoint-list/endpoint-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "EndpointListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/components/endpoint-view/endpoint-view.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "EndpointViewComponent",
                "coveragePercent": 33,
                "coverageCount": "3/9",
                "status": "medium"
            },
            {
                "filePath": "src/app/components/export-to-server-view/export-to-server-view.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ExportToServerViewComponent",
                "coveragePercent": 29,
                "coverageCount": "5/17",
                "status": "medium"
            },
            {
                "filePath": "src/app/components/home-view/home-view.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HomeViewComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/components/import-from-file-view/import-from-file-view.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ImportFromFileViewComponent",
                "coveragePercent": 38,
                "coverageCount": "7/18",
                "status": "medium"
            },
            {
                "filePath": "src/app/components/import-from-server-view/import-from-server-view.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ImportFromServerViewComponent",
                "coveragePercent": 16,
                "coverageCount": "4/24",
                "status": "low"
            },
            {
                "filePath": "src/app/components/scenario-editor/body-rule-form/body-rule-form.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BodyRuleFormComponent",
                "coveragePercent": 19,
                "coverageCount": "4/21",
                "status": "low"
            },
            {
                "filePath": "src/app/components/scenario-editor/body-rule-form/body-rule-item-form/body-rule-item-form.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BodyRuleItemFormComponent",
                "coveragePercent": 0,
                "coverageCount": "0/46",
                "status": "low"
            },
            {
                "filePath": "src/app/components/scenario-editor/body-rule-form/body-rule-item-form/body-rule-item-form.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "BodyRuleItemFormValues",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/components/scenario-editor/body-rule-form/body-rule-item-form/body-rule-item-form.types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "JsonBodyRule",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/components/scenario-editor/body-rule-form/body-rule-item-form/body-rule-item-form.types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "TextBodyRule",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/components/scenario-editor/metadata-form/metadata-form.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MetadataFormComponent",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "src/app/components/scenario-editor/metadata-form/metadata-form.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "MetadataFormValues",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/components/scenario-editor/policies-form/policies-form.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PoliciesFormComponent",
                "coveragePercent": 23,
                "coverageCount": "5/21",
                "status": "low"
            },
            {
                "filePath": "src/app/components/scenario-editor/policies-form/policy-form/policy-form.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PolicyFormComponent",
                "coveragePercent": 0,
                "coverageCount": "0/24",
                "status": "low"
            },
            {
                "filePath": "src/app/components/scenario-editor/request-form/request-form.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "RequestFormComponent",
                "coveragePercent": 5,
                "coverageCount": "1/18",
                "status": "low"
            },
            {
                "filePath": "src/app/components/scenario-editor/request-form/request-form.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "RequestFormValues",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/components/scenario-editor/response-form/response-form.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ResponseFormComponent",
                "coveragePercent": 0,
                "coverageCount": "0/23",
                "status": "low"
            },
            {
                "filePath": "src/app/components/scenario-editor/response-form/response-form.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "InternalResponseFormValues",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/components/scenario-editor/response-form/response-form.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ResponseFormValues",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/components/scenario-editor/scenario-editor.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ScenarioEditorComponent",
                "coveragePercent": 20,
                "coverageCount": "4/20",
                "status": "low"
            },
            {
                "filePath": "src/app/components/scenario-editor/scenario-editor.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ScenarioEditorFormValues",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/components/scenario-view/scenario-view.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ScenarioViewComponent",
                "coveragePercent": 32,
                "coverageCount": "10/31",
                "status": "medium"
            },
            {
                "filePath": "src/app/models/endpoint.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Endpoint",
                "coveragePercent": 25,
                "coverageCount": "1/4",
                "status": "low"
            },
            {
                "filePath": "src/app/models/mock-definition/metadata.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Metadata",
                "coveragePercent": 33,
                "coverageCount": "1/3",
                "status": "medium"
            },
            {
                "filePath": "src/app/models/mock-definition/metadata.model.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "defaultMetadata",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/models/mock-definition/mock-definition.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "MockDefinition",
                "coveragePercent": 12,
                "coverageCount": "1/8",
                "status": "low"
            },
            {
                "filePath": "src/app/models/mock-definition/mock-definition.model.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "defaultMockDefinition",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/models/mock-definition/scenario/body-rule.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "BodyRule",
                "coveragePercent": 33,
                "coverageCount": "1/3",
                "status": "medium"
            },
            {
                "filePath": "src/app/models/mock-definition/scenario/body-rule.model.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "defaultBodyRule",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/models/mock-definition/scenario/key-value-rule.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "KeyValueRule",
                "coveragePercent": 25,
                "coverageCount": "1/4",
                "status": "low"
            },
            {
                "filePath": "src/app/models/mock-definition/scenario/policy.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DelayResponsePolicy",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/models/mock-definition/scenario/policy.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "NonePolicy",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/models/mock-definition/scenario/policy.model.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "defaultPolicy",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/models/mock-definition/scenario/request-match-rules.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "RequestMatchRules",
                "coveragePercent": 20,
                "coverageCount": "1/5",
                "status": "low"
            },
            {
                "filePath": "src/app/models/mock-definition/scenario/request-match-rules.model.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "defaultRequestMatchRule",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/models/mock-definition/scenario/response.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Response",
                "coveragePercent": 20,
                "coverageCount": "1/5",
                "status": "low"
            },
            {
                "filePath": "src/app/models/mock-definition/scenario/response.model.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "defaultResponse",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/models/mock-definition/scenario/scenario.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Scenario",
                "coveragePercent": 10,
                "coverageCount": "1/10",
                "status": "low"
            },
            {
                "filePath": "src/app/models/mock-definition/scenario/scenario.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ScenarioParams",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/models/mock-definition/scenario/scenario.model.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "emptyScenario",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/models/mock-definition/scenario/token-rule.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "TokenRule",
                "coveragePercent": 33,
                "coverageCount": "1/3",
                "status": "medium"
            },
            {
                "filePath": "src/app/models/mock-definition/scenario/token-rule.model.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "defaultTokenRule",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/models/mock-definition/scenario/url-rule.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "UrlRule",
                "coveragePercent": 33,
                "coverageCount": "1/3",
                "status": "medium"
            },
            {
                "filePath": "src/app/models/mock-definition/scenario/url-rule.model.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "defaultUrlRule",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/models/record.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "compareRecords",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "src/app/models/record.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "recordMap",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "src/app/pipes/get-endpoint-scenarios/get-endpoint-scenarios.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "GetEndpointScenariosPipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pipes/get-rule-type-string/get-rule-type-string.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "GetRuleTypeStringPipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pipes/get-verb-color/get-verb-color.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "GetVerbColorPipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pipes/get-verb-string/get-verb-string.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "GetVerbStringPipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/services/export-mockdefinition/export-mockdefinition.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ExportMockdefinitionService",
                "coveragePercent": 42,
                "coverageCount": "3/7",
                "status": "medium"
            },
            {
                "filePath": "src/app/services/mock-definition/mock-definition.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "MockDefinitionService",
                "coveragePercent": 36,
                "coverageCount": "4/11",
                "status": "medium"
            },
            {
                "filePath": "src/app/services/notification-service/notification.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "NotificationService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/services/openapispecservice/open-api-spec.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "OpenApiSpecService",
                "coveragePercent": 20,
                "coverageCount": "1/5",
                "status": "low"
            },
            {
                "filePath": "src/app/services/orbital-admin/orbital-admin.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "OrbitalAdminService",
                "coveragePercent": 66,
                "coverageCount": "6/9",
                "status": "good"
            },
            {
                "filePath": "src/app/services/overview-redirect/overview-redirect.service.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "OverviewRedirectService",
                "coveragePercent": 33,
                "coverageCount": "1/3",
                "status": "medium"
            },
            {
                "filePath": "src/app/services/read-file/read-file.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ReadFileService",
                "coveragePercent": 33,
                "coverageCount": "1/3",
                "status": "medium"
            },
            {
                "filePath": "src/app/services/valid-json/valid-json.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ValidJsonService",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/dialog-box/dialog-box.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DialogBoxComponent",
                "coveragePercent": 25,
                "coverageCount": "2/8",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/file-input/file-input.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FileInputComponent",
                "coveragePercent": 13,
                "coverageCount": "2/15",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/key-value-pair-form/key-value-pair-form.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "KeyValuePairFormComponent",
                "coveragePercent": 19,
                "coverageCount": "5/26",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/key-value-pair-form/key-value-pair-item-form/key-value-pair-item-form.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "KeyValuePairItemFormComponent",
                "coveragePercent": 0,
                "coverageCount": "0/23",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/key-value-pair-form/key-value-pair-item-form/key-value-pair-item-form.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "KeyValuePairItemFormValues",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/key-value-rule-form/key-value-rule-form.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "KeyValueRuleFormComponent",
                "coveragePercent": 18,
                "coverageCount": "5/27",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/key-value-rule-form/key-value-rule-item-form/key-value-rule-item-form.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "KeyValueRuleItemFormComponent",
                "coveragePercent": 3,
                "coverageCount": "1/29",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/key-value-rule-form/key-value-rule-item-form/key-value-rule-item-form.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "KeyValueRuleItemFormValues",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/overview-header/overview-header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "OverviewHeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/quick-export/quick-export.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "QuickExportComponent",
                "coveragePercent": 11,
                "coverageCount": "1/9",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/search-bar/search-bar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SearchBarComponent",
                "coveragePercent": 22,
                "coverageCount": "2/9",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/shuttle-list/shuttle-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ShuttleListComponent",
                "coveragePercent": 27,
                "coverageCount": "5/18",
                "status": "medium"
            },
            {
                "filePath": "src/app/shared/components/shuttle-list/shuttle-sub-list/shuttle-sub-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ShuttleSubListComponent",
                "coveragePercent": 37,
                "coverageCount": "6/16",
                "status": "medium"
            },
            {
                "filePath": "src/app/shared/components/side-bar/side-bar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SideBarComponent",
                "coveragePercent": 29,
                "coverageCount": "5/17",
                "status": "medium"
            },
            {
                "filePath": "src/app/shared/components/test/blank.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BlankComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/text-input/text-input.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TextInputComponent",
                "coveragePercent": 12,
                "coverageCount": "1/8",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/tooltip/tooltip.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ToolTipComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/url-rule-form/url-rule-form.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "UrlRuleFormComponent",
                "coveragePercent": 21,
                "coverageCount": "5/23",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/url-rule-form/url-rule-item-form/url-rule-item-form.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "UrlRuleItemFormComponent",
                "coveragePercent": 0,
                "coverageCount": "0/28",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/url-rule-form/url-rule-item-form/url-rule-item-form.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "UrlRuleItemFormValues",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/pipes/get-string-errors/get-string-errors.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "GetStringErrorsPipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/designer-store.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "DesignerStore",
                "coveragePercent": 50,
                "coverageCount": "8/16",
                "status": "medium"
            },
            {
                "filePath": "src/app/store/designer-store.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "State",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/components/create-edit-mock-view.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "CreateMock",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/components/create-edit-mock-view.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "EditMock",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/components/create-edit-mock-view.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/shared/dialog-box.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/shared/dialog-box.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/shared/dialog-box.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/shared/overview-header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/shared/overview-header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/shared/overview-header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/shared/search-bar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/shared/search-bar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/shared/search-bar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Secondary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/shared/search-bar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/shared/shuttle-list.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/shared/shuttle-list.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/shared/shuttle-list.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/shared/text-input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MaxLength10",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/shared/text-input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/shared/text-input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MultiLine",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/shared/text-input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "NoTitle",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/shared/text-input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SingleLine",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/shared/text-input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SingleLineInvalid",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/shared/text-input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/shared/tooltip.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Large",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/shared/tooltip.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/shared/tooltip.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/shared/tooltip.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Secondary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/shared/tooltip.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Small",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/shared/tooltip.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test-files/test-mockdefinition-object.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "validMockDefinition",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}